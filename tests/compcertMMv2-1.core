-- Aggregates
def union _G_fpos64_t :=
  __opaque: 'char[16]'
  __lldata: 'signed long_long'
  __align: 'double'

-- Globals
glob a_672: pointer [ail_ctype = 'char[6]'] :=
  create_readonly(Ivalignof('char[6]'), 'char[6]', Specified(Array(Specified(conv_int('char',
  120)), Specified(conv_int('char', 61)), Specified(conv_int('char', 37)),
  Specified(conv_int('char', 105)), Specified(conv_int('char', 10)),
  Specified(0))))

-- Fun map
proc main (): eff loaded integer :=
  let strong x: pointer = create(Ivalignof('signed int'), 'signed int') in
  let strong a_652: loaded integer =
    {- §6.5#2 -}
    bound(pure(Specified(3))) in
  store('signed int', x, conv_loaded_int('signed int', a_652)) ;
  let strong _: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.16#3, sentence 4 -}
      let weak (a_651: pointer, a_663: loaded integer) =
        {- §6.5.16#3, sentence 5 -}
        unseq(
          {- §6.5.3.2 -}
          let weak a_653: loaded pointer =
            {- §6.5.4 -}
            let weak a_656: loaded pointer =
              {- §6.5.4 -}
              let weak a_658: loaded pointer =
                {- §6.5.3.2#3, sentence 5 -}
                let weak a_660: pointer = pure(x) in
                pure(Specified(a_660)) in
              let Specified(a_659: pointer) = a_658 in
              let weak a_661: boolean =
                memop(PtrWellAligned, 'float', a_659) in
              pure(
                Specified(if a_661 then
                  a_659
                else
                  undef(<<UB025_misaligned_pointer_conversion>>))
              ) in
            let Specified(a_657: pointer) = a_656 in
            let weak a_662: boolean =
              memop(PtrWellAligned, 'signed int', a_657) in
            pure(
              Specified(if a_662 then
                a_657
              else
                undef(<<UB025_misaligned_pointer_conversion>>))
            ) in
          let Specified(a_654: pointer) = a_653 in
          let weak a_655: boolean =
            memop(PtrValidForDeref, 'signed int', a_654) in
          pure(
            if a_655 then
              a_654
            else
              undef(<<UB043_indirection_invalid_value>>)
          )
        ,
          pure(Specified(4))
        ) in
      let weak _: unit =
        {- §6.5.16.1#2, store -}
        neg(store('signed int', a_651, conv_loaded_int('signed int', a_663))) in
      pure(conv_loaded_int('signed int', a_663))
    ) in
  pure(Unit) ;
  let strong _: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.2.2#10, sentence 1 -}
      let strong ((a_664: loaded pointer,
      (a_665: ctype, a_666: [ctype], a_667: boolean, a_668: boolean)),
      a_671: loaded pointer, a_675: loaded integer) =
        {- §6.5.2.2#4, sentence 2 -}
        unseq(
          let strong a_650: loaded pointer =
            pure(Specified(Cfunction(printf_proxy))) in
          pure((a_650, cfunction(a_650)))
        ,
          let weak a_673: pointer = pure(a_672) in
          {- §6.3.2.1#3 -}
          let weak a_674: pointer = memop(PtrArrayShift, a_673, 'char', 0) in
          pure(Specified(a_674))
        ,
          let weak a_676: pointer = pure(x) in
          load('signed int', a_676)
        ) in
      if not(params_length(a_666) <= 2) then
        pure(undef(<<UB038_number_of_args>>))
      else
        if not(a_667) \/ not(are_compatible ('signed int', a_665)) then
          pure(undef(<<UB041_function_not_compatible>>))
        else
          let strong a_670: pointer =
            let a_677: ctype = params_nth(a_666, 0) in
            if not(are_compatible ('const char*', a_677)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_678: pointer = create(Ivalignof(a_677), a_677) in
              let weak _: unit = store(a_677, a_678, a_671) in
              pure(a_678) in
          let strong a_669: pointer =
            {- §6.5.2.2#7, sentences 2 and 3 -}
            pcall(create_and_store, 'signed int',
            conv_loaded_int('signed int', a_675)) in
          let strong a_679: loaded integer =
            ccall('signed int (*) (const char*restrict , ...)', a_664, a_670,
            [('signed int', a_669)]) in
          let strong _: (unit,unit) =
            unseq(kill('char*', a_670), kill('signed int', a_669)) in
          pure(a_679)
    ) in
  pure(Unit) ;
  kill('signed int', x) ;
  pure(Unit) ;
  save ret_649: loaded integer (a_680: loaded integer:= Specified(0)) in
    pure(a_680)

