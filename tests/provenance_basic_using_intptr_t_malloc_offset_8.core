-- Aggregates
def union _G_fpos64_t :=
  __opaque: 'char[16]'
  __lldata: 'signed long_long'
  __align: 'double'

def struct div :=
  quot: 'signed int'
  rem: 'signed int'

def struct ldiv :=
  quot: 'signed long'
  rem: 'signed long'

def struct lldiv :=
  quot: 'signed long_long'
  rem: 'signed long_long'

def struct __cerbty_unnamed_tag_824 :=
  __dummy_max_align_t: 'void*'

def struct __cerbty_unnamed_tag_856 :=
  quot: 'intmax_t'
  rem: 'intmax_t'

-- Globals
glob a_944: pointer [ail_ctype = 'char[28]'] :=
  create_readonly(Ivalignof('char[28]'), 'char[28]', Specified(Array(Specified(conv_int('char',
  65)), Specified(conv_int('char', 100)), Specified(conv_int('char', 100)),
  Specified(conv_int('char', 114)), Specified(conv_int('char', 101)),
  Specified(conv_int('char', 115)), Specified(conv_int('char', 115)),
  Specified(conv_int('char', 101)), Specified(conv_int('char', 115)),
  Specified(conv_int('char', 58)), Specified(conv_int('char', 32)),
  Specified(conv_int('char', 120)), Specified(conv_int('char', 112)),
  Specified(conv_int('char', 61)), Specified(conv_int('char', 37)),
  Specified(conv_int('char', 112)), Specified(conv_int('char', 32)),
  Specified(conv_int('char', 112)), Specified(conv_int('char', 61)),
  Specified(conv_int('char', 37)), Specified(conv_int('char', 112)),
  Specified(conv_int('char', 32)), Specified(conv_int('char', 113)),
  Specified(conv_int('char', 61)), Specified(conv_int('char', 37)),
  Specified(conv_int('char', 112)), Specified(conv_int('char', 10)),
  Specified(0))))

glob a_1016: pointer [ail_ctype = 'char[27]'] :=
  create_readonly(Ivalignof('char[27]'), 'char[27]', Specified(Array(Specified(conv_int('char',
  42)), Specified(conv_int('char', 120)), Specified(conv_int('char', 112)),
  Specified(conv_int('char', 61)), Specified(conv_int('char', 37)),
  Specified(conv_int('char', 100)), Specified(conv_int('char', 32)),
  Specified(conv_int('char', 42)), Specified(conv_int('char', 121)),
  Specified(conv_int('char', 112)), Specified(conv_int('char', 61)),
  Specified(conv_int('char', 37)), Specified(conv_int('char', 100)),
  Specified(conv_int('char', 32)), Specified(conv_int('char', 42)),
  Specified(conv_int('char', 112)), Specified(conv_int('char', 61)),
  Specified(conv_int('char', 37)), Specified(conv_int('char', 100)),
  Specified(conv_int('char', 32)), Specified(conv_int('char', 42)),
  Specified(conv_int('char', 113)), Specified(conv_int('char', 61)),
  Specified(conv_int('char', 37)), Specified(conv_int('char', 100)),
  Specified(conv_int('char', 10)), Specified(0))))

-- Fun map
proc main (): eff loaded integer :=
  let strong xp: pointer = create(Ivalignof('signed int*'), 'signed int*') in
  let strong yp: pointer = create(Ivalignof('signed int*'), 'signed int*') in
  let strong p: pointer = create(Ivalignof('signed int*'), 'signed int*') in
  let strong q: pointer = create(Ivalignof('signed int*'), 'signed int*') in
  let strong a_885: loaded pointer =
    {- §6.5#2 -}
    bound(
      {- §6.5.2.2#10, sentence 1 -}
      let strong ((a_887: loaded pointer,
      (a_888: ctype, a_889: [ctype], a_890: boolean, a_891: boolean)),
      a_893: loaded integer) =
        {- §6.5.2.2#4, sentence 2 -}
        unseq(
          let strong a_886: loaded pointer =
            pure(Specified(Cfunction(malloc_proxy))) in
          pure((a_886, cfunction(a_886)))
        ,
          pure(Specified(Ivsizeof('signed int')))
        ) in
      if not(params_length(a_889) = 1) then
        pure(undef(<<UB038_number_of_args>>))
      else
        if a_890 \/ not(are_compatible ('void*', a_888)) then
          pure(undef(<<UB041_function_not_compatible>>))
        else
          let strong a_892: pointer =
            let a_894: ctype = params_nth(a_889, 0) in
            if not(are_compatible ('size_t', a_894)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_895: pointer = create(Ivalignof(a_894), a_894) in
              let weak _: unit =
                store(a_894, a_895, conv_loaded_int(a_894, a_893)) in
              pure(a_895) in
          let strong a_896: loaded pointer =
            ccall('void* (*) (size_t)', a_887, a_892) in
          kill('size_t', a_892) ;
          pure(a_896)
    ) in
  store('signed int*', xp, a_885) ;
  let strong a_897: loaded pointer =
    {- §6.5#2 -}
    bound(
      {- §6.5.2.2#10, sentence 1 -}
      let strong ((a_899: loaded pointer,
      (a_900: ctype, a_901: [ctype], a_902: boolean, a_903: boolean)),
      a_905: loaded integer) =
        {- §6.5.2.2#4, sentence 2 -}
        unseq(
          let strong a_898: loaded pointer =
            pure(Specified(Cfunction(malloc_proxy))) in
          pure((a_898, cfunction(a_898)))
        ,
          pure(Specified(Ivsizeof('signed int')))
        ) in
      if not(params_length(a_901) = 1) then
        pure(undef(<<UB038_number_of_args>>))
      else
        if a_902 \/ not(are_compatible ('void*', a_900)) then
          pure(undef(<<UB041_function_not_compatible>>))
        else
          let strong a_904: pointer =
            let a_906: ctype = params_nth(a_901, 0) in
            if not(are_compatible ('size_t', a_906)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_907: pointer = create(Ivalignof(a_906), a_906) in
              let weak _: unit =
                store(a_906, a_907, conv_loaded_int(a_906, a_905)) in
              pure(a_907) in
          let strong a_908: loaded pointer =
            ccall('void* (*) (size_t)', a_899, a_904) in
          kill('size_t', a_904) ;
          pure(a_908)
    ) in
  store('signed int*', yp, a_897) ;
  let strong _: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.16#3, sentence 4 -}
      let weak (a_884: pointer, a_913: loaded integer) =
        {- §6.5.16#3, sentence 5 -}
        unseq(
          {- §6.5.3.2 -}
          let weak a_909: loaded pointer =
            let weak a_912: pointer = pure(xp) in
            load('signed int*', a_912) in
          let Specified(a_910: pointer) = a_909 in
          let weak a_911: boolean =
            memop(PtrValidForDeref, 'signed int', a_910) in
          pure(
            if a_911 then
              a_910
            else
              undef(<<UB043_indirection_invalid_value>>)
          )
        ,
          pure(Specified(1))
        ) in
      let weak _: unit =
        {- §6.5.16.1#2, store -}
        neg(store('signed int', a_884, conv_loaded_int('signed int', a_913))) in
      pure(conv_loaded_int('signed int', a_913))
    ) in
  pure(Unit) ;
  let strong _: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.16#3, sentence 4 -}
      let weak (a_883: pointer, a_918: loaded integer) =
        {- §6.5.16#3, sentence 5 -}
        unseq(
          {- §6.5.3.2 -}
          let weak a_914: loaded pointer =
            let weak a_917: pointer = pure(yp) in
            load('signed int*', a_917) in
          let Specified(a_915: pointer) = a_914 in
          let weak a_916: boolean =
            memop(PtrValidForDeref, 'signed int', a_915) in
          pure(
            if a_916 then
              a_915
            else
              undef(<<UB043_indirection_invalid_value>>)
          )
        ,
          pure(Specified(2))
        ) in
      let weak _: unit =
        {- §6.5.16.1#2, store -}
        neg(store('signed int', a_883, conv_loaded_int('signed int', a_918))) in
      pure(conv_loaded_int('signed int', a_918))
    ) in
  pure(Unit) ;
  let strong a_919: loaded pointer =
    {- §6.5#2 -}
    bound(
      {- §6.5.4 -}
      let weak a_920: loaded integer =
        {- §6.5.6 -}
        let weak (a_922: loaded integer, a_923: loaded integer) =
          unseq(
            {- §6.5.4 -}
            let weak a_927: loaded pointer =
              let weak a_929: pointer = pure(xp) in
              load('signed int*', a_929) in
            let Specified(a_928: pointer) = a_927 in
            let weak a_930: integer =
              memop(IntFromPtr, 'signed int', 'uintptr_t', a_928) in
            pure(Specified(a_930))
          ,
            pure(Specified(8))
          ) in
        pure(
          let (Specified(a_924: integer), Specified(a_925: integer)) =
            (a_922, a_923) in
          Specified(wrapI('uintptr_t',
          conv_int('uintptr_t', a_924) + conv_int('uintptr_t', a_925)))
        ) in
      let Specified(a_921: integer) = a_920 in
      let weak a_931: pointer =
        memop(PtrFromInt, 'uintptr_t', 'signed int', a_921) in
      pure(Specified(a_931))
    ) in
  store('signed int*', p, a_919) ;
  let strong a_932: loaded pointer =
    {- §6.5#2 -}
    bound(
      let weak a_933: pointer = pure(yp) in
      load('signed int*', a_933)
    ) in
  store('signed int*', q, a_932) ;
  let strong _: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.2.2#10, sentence 1 -}
      let strong ((a_934: loaded pointer,
      (a_935: ctype, a_936: [ctype], a_937: boolean, a_938: boolean)),
      a_943: loaded pointer, a_947: loaded pointer, a_952: loaded pointer,
      a_957: loaded pointer) =
        {- §6.5.2.2#4, sentence 2 -}
        unseq(
          let strong a_882: loaded pointer =
            pure(Specified(Cfunction(printf_proxy))) in
          pure((a_882, cfunction(a_882)))
        ,
          let weak a_945: pointer = pure(a_944) in
          {- §6.3.2.1#3 -}
          let weak a_946: pointer = memop(PtrArrayShift, a_945, 'char', 0) in
          pure(Specified(a_946))
        ,
          {- §6.5.4 -}
          let weak a_950: pointer = pure(xp) in
          load('signed int*', a_950)
        ,
          {- §6.5.4 -}
          let weak a_955: pointer = pure(p) in
          load('signed int*', a_955)
        ,
          {- §6.5.4 -}
          let weak a_960: pointer = pure(q) in
          load('signed int*', a_960)
        ) in
      if not(params_length(a_936) <= 4) then
        pure(undef(<<UB038_number_of_args>>))
      else
        if not(a_937) \/ not(are_compatible ('signed int', a_935)) then
          pure(undef(<<UB041_function_not_compatible>>))
        else
          let strong a_942: pointer =
            let a_962: ctype = params_nth(a_936, 0) in
            if not(are_compatible ('const char*', a_962)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_963: pointer = create(Ivalignof(a_962), a_962) in
              let weak _: unit = store(a_962, a_963, a_943) in
              pure(a_963) in
          let strong a_941: pointer =
            {- §6.5.2.2#7, sentences 2 and 3 -}
            pcall(create_and_store, 'void*', a_947) in
          let strong a_940: pointer =
            {- §6.5.2.2#7, sentences 2 and 3 -}
            pcall(create_and_store, 'void*', a_952) in
          let strong a_939: pointer =
            {- §6.5.2.2#7, sentences 2 and 3 -}
            pcall(create_and_store, 'void*', a_957) in
          let strong a_964: loaded integer =
            ccall('signed int (*) (const char*restrict , ...)', a_934, a_942,
            [('void*', a_941), ('void*', a_940), ('void*', a_939)]) in
          let strong _: (unit,unit,unit,unit) =
            unseq(
              kill('char*', a_942)
            ,
              kill('void*', a_941)
            ,
              kill('void*', a_940)
            ,
              kill('void*', a_939)
            ) in
          pure(a_964)
    ) in
  pure(Unit) ;
  let strong a_965: loaded integer =
    {- §6.5#2 -}
    bound(
      let weak (a_967: loaded integer, a_968: loaded integer) =
        unseq(
          let weak (a_972: loaded integer, a_973: loaded integer) =
            unseq(
              {- §6.5.2.2#10, sentence 1 -}
              let strong ((a_978: loaded pointer,
              (a_979: ctype, a_980: [ctype], a_981: boolean, a_982: boolean)),
              a_986: loaded pointer, a_988: loaded pointer,
              a_990: loaded integer) =
                {- §6.5.2.2#4, sentence 2 -}
                unseq(
                  let strong a_977: loaded pointer =
                    pure(Specified(Cfunction(memcmp_proxy))) in
                  pure((a_977, cfunction(a_977)))
                ,
                  {- §6.5.3.2#3, sentence 5 -}
                  let weak a_987: pointer = pure(p) in
                  pure(Specified(a_987))
                ,
                  {- §6.5.3.2#3, sentence 5 -}
                  let weak a_989: pointer = pure(q) in
                  pure(Specified(a_989))
                ,
                  pure(Specified(Ivsizeof('signed int*')))
                ) in
              if not(params_length(a_980) = 3) then
                pure(undef(<<UB038_number_of_args>>))
              else
                if a_981 \/ not(are_compatible ('signed int', a_979)) then
                  pure(undef(<<UB041_function_not_compatible>>))
                else
                  let strong a_985: pointer =
                    let a_991: ctype = params_nth(a_980, 0) in
                    if not(are_compatible ('const void*', a_991)) then
                      pure(undef(<<UB041_function_not_compatible>>))
                    else
                      {- §6.5.2.2#7, sentence 1 -}
                      let weak a_992: pointer =
                        create(Ivalignof(a_991), a_991) in
                      let weak _: unit = store(a_991, a_992, a_986) in
                      pure(a_992) in
                  let strong a_984: pointer =
                    let a_993: ctype = params_nth(a_980, 1) in
                    if not(are_compatible ('const void*', a_993)) then
                      pure(undef(<<UB041_function_not_compatible>>))
                    else
                      {- §6.5.2.2#7, sentence 1 -}
                      let weak a_994: pointer =
                        create(Ivalignof(a_993), a_993) in
                      let weak _: unit = store(a_993, a_994, a_988) in
                      pure(a_994) in
                  let strong a_983: pointer =
                    let a_995: ctype = params_nth(a_980, 2) in
                    if not(are_compatible ('size_t', a_995)) then
                      pure(undef(<<UB041_function_not_compatible>>))
                    else
                      {- §6.5.2.2#7, sentence 1 -}
                      let weak a_996: pointer =
                        create(Ivalignof(a_995), a_995) in
                      let weak _: unit =
                        store(a_995, a_996, conv_loaded_int(a_995, a_990)) in
                      pure(a_996) in
                  let strong a_997: loaded integer =
                    ccall('signed int (*) (const void*, const void*, size_t)',
                    a_978, a_985, a_984, a_983) in
                  let strong _: (unit,unit,unit) =
                    unseq(
                      kill('void*', a_985)
                    ,
                      kill('void*', a_984)
                    ,
                      kill('size_t', a_983)
                    ) in
                  pure(a_997)
            ,
              pure(Specified(0))
            ) in
          pure(
            let (Specified(a_974: integer), Specified(a_975: integer)) =
              (a_972, a_973) in
            if conv_int('signed int', a_974) = conv_int('signed int', a_975) then
              Specified(1)
            else
              Specified(0)
          )
        ,
          pure(Specified(0))
        ) in
      pure(
        let (Specified(a_969: integer), Specified(a_970: integer)) =
          (a_967, a_968) in
        if conv_int('signed int', a_969) = conv_int('signed int', a_970) then
          Specified(1)
        else
          Specified(0)
      )
    ) in
  let strong a_881: boolean =
    let Specified(a_966: integer) = a_965 in
    pure(if not(a_966 = 1) then True else False) in
  if a_881 then
    let strong _: loaded integer =
      {- §6.5#2 -}
      bound(
        {- §6.5.16#3, sentence 4 -}
        let weak (a_999: pointer, a_1004: loaded integer) =
          {- §6.5.16#3, sentence 5 -}
          unseq(
            {- §6.5.3.2 -}
            let weak a_1000: loaded pointer =
              let weak a_1003: pointer = pure(p) in
              load('signed int*', a_1003) in
            let Specified(a_1001: pointer) = a_1000 in
            let weak a_1002: boolean =
              memop(PtrValidForDeref, 'signed int', a_1001) in
            pure(
              if a_1002 then
                a_1001
              else
                undef(<<UB043_indirection_invalid_value>>)
            )
          ,
            pure(Specified(11))
          ) in
        let weak _: unit =
          {- §6.5.16.1#2, store -}
          neg(store('signed int', a_999, conv_loaded_int('signed int', a_1004))) in
        pure(conv_loaded_int('signed int', a_1004))
      ) in
    pure(Unit) ;
    let strong _: loaded integer =
      {- §6.5#2 -}
      bound(
        {- §6.5.2.2#10, sentence 1 -}
        let strong ((a_1005: loaded pointer,
        (a_1006: ctype, a_1007: [ctype], a_1008: boolean, a_1009: boolean)),
        a_1015: loaded pointer, a_1019: loaded integer, a_1025: loaded integer,
        a_1031: loaded integer, a_1037: loaded integer) =
          {- §6.5.2.2#4, sentence 2 -}
          unseq(
            let strong a_998: loaded pointer =
              pure(Specified(Cfunction(printf_proxy))) in
            pure((a_998, cfunction(a_998)))
          ,
            let weak a_1017: pointer = pure(a_1016) in
            {- §6.3.2.1#3 -}
            let weak a_1018: pointer =
              memop(PtrArrayShift, a_1017, 'char', 0) in
            pure(Specified(a_1018))
          ,
            let weak a_1024: pointer =
              {- §6.5.3.2 -}
              let weak a_1020: loaded pointer =
                let weak a_1023: pointer = pure(xp) in
                load('signed int*', a_1023) in
              let Specified(a_1021: pointer) = a_1020 in
              let weak a_1022: boolean =
                memop(PtrValidForDeref, 'signed int', a_1021) in
              pure(
                if a_1022 then
                  a_1021
                else
                  undef(<<UB043_indirection_invalid_value>>)
              ) in
            load('signed int', a_1024)
          ,
            let weak a_1030: pointer =
              {- §6.5.3.2 -}
              let weak a_1026: loaded pointer =
                let weak a_1029: pointer = pure(yp) in
                load('signed int*', a_1029) in
              let Specified(a_1027: pointer) = a_1026 in
              let weak a_1028: boolean =
                memop(PtrValidForDeref, 'signed int', a_1027) in
              pure(
                if a_1028 then
                  a_1027
                else
                  undef(<<UB043_indirection_invalid_value>>)
              ) in
            load('signed int', a_1030)
          ,
            let weak a_1036: pointer =
              {- §6.5.3.2 -}
              let weak a_1032: loaded pointer =
                let weak a_1035: pointer = pure(p) in
                load('signed int*', a_1035) in
              let Specified(a_1033: pointer) = a_1032 in
              let weak a_1034: boolean =
                memop(PtrValidForDeref, 'signed int', a_1033) in
              pure(
                if a_1034 then
                  a_1033
                else
                  undef(<<UB043_indirection_invalid_value>>)
              ) in
            load('signed int', a_1036)
          ,
            let weak a_1042: pointer =
              {- §6.5.3.2 -}
              let weak a_1038: loaded pointer =
                let weak a_1041: pointer = pure(q) in
                load('signed int*', a_1041) in
              let Specified(a_1039: pointer) = a_1038 in
              let weak a_1040: boolean =
                memop(PtrValidForDeref, 'signed int', a_1039) in
              pure(
                if a_1040 then
                  a_1039
                else
                  undef(<<UB043_indirection_invalid_value>>)
              ) in
            load('signed int', a_1042)
          ) in
        if not(params_length(a_1007) <= 5) then
          pure(undef(<<UB038_number_of_args>>))
        else
          if not(a_1008) \/ not(are_compatible ('signed int', a_1006)) then
            pure(undef(<<UB041_function_not_compatible>>))
          else
            let strong a_1014: pointer =
              let a_1043: ctype = params_nth(a_1007, 0) in
              if not(are_compatible ('const char*', a_1043)) then
                pure(undef(<<UB041_function_not_compatible>>))
              else
                {- §6.5.2.2#7, sentence 1 -}
                let weak a_1044: pointer =
                  create(Ivalignof(a_1043), a_1043) in
                let weak _: unit = store(a_1043, a_1044, a_1015) in
                pure(a_1044) in
            let strong a_1013: pointer =
              {- §6.5.2.2#7, sentences 2 and 3 -}
              pcall(create_and_store, 'signed int',
              conv_loaded_int('signed int', a_1019)) in
            let strong a_1012: pointer =
              {- §6.5.2.2#7, sentences 2 and 3 -}
              pcall(create_and_store, 'signed int',
              conv_loaded_int('signed int', a_1025)) in
            let strong a_1011: pointer =
              {- §6.5.2.2#7, sentences 2 and 3 -}
              pcall(create_and_store, 'signed int',
              conv_loaded_int('signed int', a_1031)) in
            let strong a_1010: pointer =
              {- §6.5.2.2#7, sentences 2 and 3 -}
              pcall(create_and_store, 'signed int',
              conv_loaded_int('signed int', a_1037)) in
            let strong a_1045: loaded integer =
              ccall('signed int (*) (const char*restrict , ...)', a_1005,
              a_1014,
              [('signed int', a_1013), ('signed int', a_1012),
              ('signed int', a_1011), ('signed int', a_1010)]) in
            let strong _: (unit,unit,unit,unit,unit) =
              unseq(
                kill('char*', a_1014)
              ,
                kill('signed int', a_1013)
              ,
                kill('signed int', a_1012)
              ,
                kill('signed int', a_1011)
              ,
                kill('signed int', a_1010)
              ) in
            pure(a_1045)
      ) in
    pure(Unit) ;
    pure(Unit)
  else
    pure(Unit) ;
  let strong a_1046: loaded integer =
    {- §6.5#2 -}
    bound(pure(Specified(0))) in
  kill('signed int*', xp) ;
  kill('signed int*', yp) ;
  kill('signed int*', p) ;
  kill('signed int*', q) ;
  run ret_880(conv_loaded_int('signed int', a_1046)) ;
  kill('signed int*', xp) ;
  kill('signed int*', yp) ;
  kill('signed int*', p) ;
  kill('signed int*', q) ;
  pure(Unit) ;
  save ret_880: loaded integer (a_1047: loaded integer:= Specified(0)) in
    pure(a_1047)

