-- Aggregates
def union _G_fpos64_t :=
  __opaque: 'char[16]'
  __lldata: 'signed long_long'
  __align: 'double'

def union a_union :=
  i: 'signed int'
  d: 'double'

-- Globals
glob a_675: pointer [ail_ctype = 'char[6]'] :=
  create_readonly(Ivalignof('char[6]'), 'char[6]', Specified(Array(Specified(conv_int('char',
  106)), Specified(conv_int('char', 61)), Specified(conv_int('char', 37)),
  Specified(conv_int('char', 100)), Specified(conv_int('char', 10)),
  Specified(0))))

-- Fun map
proc main (): eff loaded integer :=
  let strong t: pointer =
    create(Ivalignof('union a_union'), 'union a_union') in
  let strong ip: pointer = create(Ivalignof('signed int*'), 'signed int*') in
  let strong j: pointer = create(Ivalignof('signed int'), 'signed int') in
  {- §6.2.4#6 -}
  store('union a_union', t, Unspecified('union a_union')) ;
  {- §6.2.4#6 -}
  store('signed int*', ip, Unspecified('signed int*')) ;
  let strong _: loaded floating =
    {- §6.5#2 -}
    bound(
      {- §6.5.16#3, sentence 4 -}
      let weak (a_655: pointer, a_657: loaded floating) =
        {- §6.5.16#3, sentence 5 -}
        unseq(
          {- §6.5.2.3#3, sentence 2 -}
          let strong a_656: pointer = pure(t) in
          memop(PtrArrayShift[a_union, d], a_656)
        ,
          pure(Specified(3.1415))
        ) in
      let weak _: unit =
        {- §6.5.16.1#2, store -}
        neg(store('double', a_655, a_657)) in
      pure(a_657)
    ) in
  pure(Unit) ;
  let strong _: loaded pointer =
    {- §6.5#2 -}
    bound(
      {- §6.5.16#3, sentence 4 -}
      let weak (a_654: pointer, a_660: loaded pointer) =
        {- §6.5.16#3, sentence 5 -}
        unseq(
          pure(ip)
        ,
          {- §6.5.3.2#3, sentence 5 -}
          let weak a_658: pointer =
            {- §6.5.2.3#3, sentence 2 -}
            let strong a_659: pointer = pure(t) in
            memop(PtrArrayShift[a_union, i], a_659) in
          pure(Specified(a_658))
        ) in
      let weak _: unit =
        {- §6.5.16.1#2, store -}
        neg(store('signed int*', a_654, a_660)) in
      pure(a_660)
    ) in
  pure(Unit) ;
  let strong a_661: loaded integer =
    {- §6.5#2 -}
    bound(
      let weak a_666: pointer =
        {- §6.5.3.2 -}
        let weak a_662: loaded pointer =
          let weak a_665: pointer = pure(ip) in
          load('signed int*', a_665) in
        let Specified(a_663: pointer) = a_662 in
        let weak a_664: boolean =
          memop(PtrValidForDeref, 'signed int', a_663) in
        pure(
          if a_664 then a_663 else undef(<<UB043_indirection_invalid_value>>)
        ) in
      load('signed int', a_666)
    ) in
  store('signed int', j, conv_loaded_int('signed int', a_661)) ;
  let strong _: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.2.2#10, sentence 1 -}
      let strong ((a_667: loaded pointer,
      (a_668: ctype, a_669: [ctype], a_670: boolean, a_671: boolean)),
      a_674: loaded pointer, a_678: loaded integer) =
        {- §6.5.2.2#4, sentence 2 -}
        unseq(
          let strong a_653: loaded pointer =
            pure(Specified(Cfunction(printf_proxy))) in
          pure((a_653, cfunction(a_653)))
        ,
          let weak a_676: pointer = pure(a_675) in
          {- §6.3.2.1#3 -}
          let weak a_677: pointer = memop(PtrArrayShift, a_676, 'char', 0) in
          pure(Specified(a_677))
        ,
          let weak a_679: pointer = pure(j) in
          load('signed int', a_679)
        ) in
      if not(params_length(a_669) <= 2) then
        pure(undef(<<UB038_number_of_args>>))
      else
        if not(a_670) \/ not(are_compatible ('signed int', a_668)) then
          pure(undef(<<UB041_function_not_compatible>>))
        else
          let strong a_673: pointer =
            let a_680: ctype = params_nth(a_669, 0) in
            if not(are_compatible ('const char*', a_680)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_681: pointer = create(Ivalignof(a_680), a_680) in
              let weak _: unit = store(a_680, a_681, a_674) in
              pure(a_681) in
          let strong a_672: pointer =
            {- §6.5.2.2#7, sentences 2 and 3 -}
            pcall(create_and_store, 'signed int',
            conv_loaded_int('signed int', a_678)) in
          let strong a_682: loaded integer =
            ccall('signed int (*) (const char*restrict , ...)', a_667, a_673,
            [('signed int', a_672)]) in
          let strong _: (unit,unit) =
            unseq(kill('char*', a_673), kill('signed int', a_672)) in
          pure(a_682)
    ) in
  pure(Unit) ;
  kill('union a_union', t) ;
  kill('signed int*', ip) ;
  kill('signed int', j) ;
  pure(Unit) ;
  save ret_652: loaded integer (a_683: loaded integer:= Specified(0)) in
    pure(a_683)

