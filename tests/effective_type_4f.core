-- Aggregates
def union _G_fpos64_t :=
  __opaque: 'char[16]'
  __lldata: 'signed long_long'
  __align: 'double'

def struct div :=
  quot: 'signed int'
  rem: 'signed int'

def struct ldiv :=
  quot: 'signed long'
  rem: 'signed long'

def struct lldiv :=
  quot: 'signed long_long'
  rem: 'signed long_long'

-- Globals
glob a_948: pointer [ail_ctype = 'char[6]'] :=
  create_readonly(Ivalignof('char[6]'), 'char[6]', Specified(Array(Specified(conv_int('char',
  102)), Specified(conv_int('char', 61)), Specified(conv_int('char', 37)),
  Specified(conv_int('char', 102)), Specified(conv_int('char', 10)),
  Specified(0))))

-- Fun map
proc main (): eff loaded integer :=
  let strong i: pointer = create(Ivalignof('signed int'), 'signed int') in
  let strong p: pointer = create(Ivalignof('void*'), 'void*') in
  let strong k: pointer = create(Ivalignof('signed int'), 'signed int') in
  let strong q: pointer = create(Ivalignof('signed int*'), 'signed int*') in
  let strong f: pointer = create(Ivalignof('float'), 'float') in
  let strong a_844: loaded integer =
    {- §6.5#2 -}
    bound(pure(Specified(1))) in
  store('signed int', i, conv_loaded_int('signed int', a_844)) ;
  let strong a_845: loaded pointer =
    {- §6.5#2 -}
    bound(
      {- §6.5.2.2#10, sentence 1 -}
      let strong ((a_847: loaded pointer,
      (a_848: ctype, a_849: [ctype], a_850: boolean, a_851: boolean)),
      a_853: loaded integer) =
        {- §6.5.2.2#4, sentence 2 -}
        unseq(
          let strong a_846: loaded pointer =
            pure(Specified(Cfunction(malloc_proxy))) in
          pure((a_846, cfunction(a_846)))
        ,
          pure(Specified(Ivsizeof('signed int')))
        ) in
      if not(params_length(a_849) = 1) then
        pure(undef(<<UB038_number_of_args>>))
      else
        if a_850 \/ not(are_compatible ('void*', a_848)) then
          pure(undef(<<UB041_function_not_compatible>>))
        else
          let strong a_852: pointer =
            let a_854: ctype = params_nth(a_849, 0) in
            if not(are_compatible ('size_t', a_854)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_855: pointer = create(Ivalignof(a_854), a_854) in
              let weak _: unit =
                store(a_854, a_855, conv_loaded_int(a_854, a_853)) in
              pure(a_855) in
          let strong a_856: loaded pointer =
            ccall('void* (*) (size_t)', a_847, a_852) in
          kill('size_t', a_852) ;
          pure(a_856)
    ) in
  store('void*', p, a_845) ;
  let strong _: loaded pointer =
    {- §6.5#2 -}
    bound(
      {- §6.5.2.2#10, sentence 1 -}
      let strong ((a_857: loaded pointer,
      (a_858: ctype, a_859: [ctype], a_860: boolean, a_861: boolean)),
      a_865: loaded pointer, a_870: loaded pointer, a_875: loaded integer) =
        {- §6.5.2.2#4, sentence 2 -}
        unseq(
          let strong a_843: loaded pointer =
            pure(Specified(Cfunction(memcpy_proxy))) in
          pure((a_843, cfunction(a_843)))
        ,
          {- §6.5.4 -}
          let weak a_868: pointer = pure(p) in
          load('void*', a_868)
        ,
          {- §6.5.3.2#3, sentence 5 -}
          {- §6.5.4 -}
          let weak a_873: pointer = pure(i) in
          pure(Specified(a_873))
        ,
          pure(Specified(Ivsizeof('signed int')))
        ) in
      if not(params_length(a_859) = 3) then
        pure(undef(<<UB038_number_of_args>>))
      else
        if a_860 \/ not(are_compatible ('void*', a_858)) then
          pure(undef(<<UB041_function_not_compatible>>))
        else
          let strong a_864: pointer =
            let a_876: ctype = params_nth(a_859, 0) in
            if not(are_compatible ('void*', a_876)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_877: pointer = create(Ivalignof(a_876), a_876) in
              let weak _: unit = store(a_876, a_877, a_865) in
              pure(a_877) in
          let strong a_863: pointer =
            let a_878: ctype = params_nth(a_859, 1) in
            if not(are_compatible ('const void*', a_878)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_879: pointer = create(Ivalignof(a_878), a_878) in
              let weak _: unit = store(a_878, a_879, a_870) in
              pure(a_879) in
          let strong a_862: pointer =
            let a_880: ctype = params_nth(a_859, 2) in
            if not(are_compatible ('size_t', a_880)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_881: pointer = create(Ivalignof(a_880), a_880) in
              let weak _: unit =
                store(a_880, a_881, conv_loaded_int(a_880, a_875)) in
              pure(a_881) in
          let strong a_882: loaded pointer =
            ccall('void* (*) (void*restrict , const void*restrict , size_t)',
            a_857, a_864, a_863, a_862) in
          let strong _: (unit,unit,unit) =
            unseq(
              kill('void*', a_864)
            ,
              kill('void*', a_863)
            ,
              kill('size_t', a_862)
            ) in
          pure(a_882)
    ) in
  pure(Unit) ;
  {- §6.2.4#6 -}
  store('signed int', k, Unspecified('signed int')) ;
  let strong _: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.16#3, sentence 4 -}
      let weak (a_842: pointer, a_883: loaded integer) =
        {- §6.5.16#3, sentence 5 -}
        unseq(pure(k), pure(Specified(0))) in
      let weak _: unit =
        {- §6.5.16.1#2, store -}
        neg(store('signed int', a_842, conv_loaded_int('signed int', a_883))) in
      pure(conv_loaded_int('signed int', a_883))
    ) in
  pure(Unit) ;
  save while_839: unit (i: pointer:= i, p: pointer:= p, k: pointer:= k,
  q: pointer:= q, f: pointer:= f) in
    let strong a_884: loaded integer =
      {- §6.5#2 -}
      bound(
        let weak (a_886: loaded integer, a_887: loaded integer) =
          unseq(
            {- §6.5.8 -}
            let weak (a_892: loaded integer, a_893: loaded integer) =
              unseq(
                let weak a_891: pointer = pure(k) in
                load('signed int', a_891)
              ,
                pure(Specified(Ivsizeof('signed int')))
              ) in
            let (Specified(a_894: integer), Specified(a_895: integer)) =
              (a_892, a_893) in
            {- §6.5.8#6 -}
            pure(
              if if all_values_representable_in('size_t', 'signed int') then
                conv_int('signed int', a_894)
              else
                conv_int('unsigned int', a_894) <
              if all_values_representable_in('size_t', 'signed int') then
                conv_int('signed int', a_895)
              else
                conv_int('unsigned int', a_895) then
                Specified(1)
              else
                Specified(0)
            )
          ,
            pure(Specified(0))
          ) in
        pure(
          let (Specified(a_888: integer), Specified(a_889: integer)) =
            (a_886, a_887) in
          if conv_int('signed int', a_888) = conv_int('signed int', a_889) then
            Specified(1)
          else
            Specified(0)
        )
      ) in
    let strong a_841: boolean =
      let Specified(a_885: integer) = a_884 in
      pure(if not(a_885 = 1) then True else False) in
    if a_841 then
      save while_body_840: unit (i: pointer:= i, p: pointer:= p,
      k: pointer:= k, q: pointer:= q, f: pointer:= f) in
        let strong _: loaded integer =
          {- §6.5#2 -}
          bound(
            {- §6.5.16#3, sentence 4 -}
            let weak (a_897: pointer, a_911: loaded integer) =
              {- §6.5.16#3, sentence 5 -}
              unseq(
                {- §6.5.3.2 -}
                let weak a_898: loaded pointer =
                  {- §6.5.6 -}
                  let weak (a_901: loaded pointer, a_903: loaded integer) =
                    unseq(
                      {- §6.5.4 -}
                      let weak a_906: loaded pointer =
                        let weak a_908: pointer = pure(p) in
                        load('void*', a_908) in
                      let Specified(a_907: pointer) = a_906 in
                      let weak a_909: boolean =
                        memop(PtrWellAligned, 'unsigned char', a_907) in
                      pure(
                        Specified(if a_909 then
                          a_907
                        else
                          undef(<<UB025_misaligned_pointer_conversion>>))
                      )
                    ,
                      let weak a_910: pointer = pure(k) in
                      load('signed int', a_910)
                    ) in
                  let (Specified(a_902: pointer), Specified(a_904: integer)) =
                    (a_901, a_903) in
                  let weak a_905: pointer =
                    memop(PtrArrayShift, a_902, 'unsigned char', a_904) in
                  pure(Specified(a_905)) in
                let Specified(a_899: pointer) = a_898 in
                let weak a_900: boolean =
                  memop(PtrValidForDeref, 'unsigned char', a_899) in
                pure(
                  if a_900 then
                    a_899
                  else
                    undef(<<UB043_indirection_invalid_value>>)
                )
              ,
                pure(Specified(0))
              ) in
            let weak _: unit =
              {- §6.5.16.1#2, store -}
              neg(store('unsigned char', a_897,
              conv_loaded_int('unsigned char', a_911))) in
            pure(conv_loaded_int('unsigned char', a_911))
          ) in
        pure(Unit) ;
        save __cerb_continue0: unit (i: pointer:= i, p: pointer:= p,
        k: pointer:= k, q: pointer:= q, f: pointer:= f) in
          let strong _: loaded integer =
            {- §6.5#2 -}
            bound(
              {- §6.5.2.4#2, sentence 3 -}
              {- §6.5.2.4#2, sentence 1 -}
              {- §6.5.2.4 -}
              let weak a_912: pointer = pure(k) in
              seq_rmw('signed int', a_912, a_913 => let Specified(a_914: integer) =
                a_913 in
              Specified(conv_int('signed int',
              catch_exceptional_condition('signed int', a_914 + 1))))
            ) in
          pure(Unit) ;
        pure(Unit) ;
        save continue_834: unit (i: pointer:= i, p: pointer:= p,
        k: pointer:= k, q: pointer:= q, f: pointer:= f) in
          pure(Unit) ;
        pure(Unit) ;
        run while_839(i, p, k, q, f)
    else
      pure(Unit) ;
  save break_835: unit (i: pointer:= i, p: pointer:= p, k: pointer:= k,
  q: pointer:= q, f: pointer:= f) in
    pure(Unit) ;
  pure(Unit) ;
  let strong a_915: loaded pointer =
    {- §6.5#2 -}
    bound(
      {- §6.5.4 -}
      let weak a_916: loaded pointer =
        let weak a_918: pointer = pure(p) in
        load('void*', a_918) in
      let Specified(a_917: pointer) = a_916 in
      let weak a_919: boolean = memop(PtrWellAligned, 'signed int', a_917) in
      pure(
        Specified(if a_919 then
          a_917
        else
          undef(<<UB025_misaligned_pointer_conversion>>))
      )
    ) in
  store('signed int*', q, a_915) ;
  {- §6.5#2 -}
  bound(
    let strong a_838: loaded integer =
      let weak (a_922: loaded integer, a_923: loaded integer) =
        unseq(
          pure(Specified(Ivsizeof('float')))
        ,
          pure(Specified(Ivsizeof('signed int')))
        ) in
      pure(
        let (Specified(a_924: integer), Specified(a_925: integer)) =
          (a_922, a_923) in
        if conv_int('size_t', a_924) = conv_int('size_t', a_925) then
          Specified(1)
        else
          Specified(0)
      ) in
    pure(
      let Specified(a_920: integer) = a_838 in
      if a_920 = 0 then error("assert() failure", Unit) else Unit
    )
  ) ;
  pure(Unit) ;
  {- §6.5#2 -}
  bound(
    let strong a_837: loaded integer =
      let weak (a_929: loaded integer, a_930: loaded integer) =
        unseq(
          pure(Specified(Ivalignof('float')))
        ,
          pure(Specified(Ivalignof('signed int')))
        ) in
      pure(
        let (Specified(a_931: integer), Specified(a_932: integer)) =
          (a_929, a_930) in
        if conv_int('size_t', a_931) = conv_int('size_t', a_932) then
          Specified(1)
        else
          Specified(0)
      ) in
    pure(
      let Specified(a_927: integer) = a_837 in
      if a_927 = 0 then error("assert() failure", Unit) else Unit
    )
  ) ;
  pure(Unit) ;
  let strong a_934: loaded integer =
    {- §6.5#2 -}
    bound(
      let weak a_939: pointer =
        {- §6.5.3.2 -}
        let weak a_935: loaded pointer =
          let weak a_938: pointer = pure(q) in
          load('signed int*', a_938) in
        let Specified(a_936: pointer) = a_935 in
        let weak a_937: boolean =
          memop(PtrValidForDeref, 'signed int', a_936) in
        pure(
          if a_937 then a_936 else undef(<<UB043_indirection_invalid_value>>)
        ) in
      load('signed int', a_939)
    ) in
  store('float', f, loaded_fvfromint('float', a_934)) ;
  let strong _: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.2.2#10, sentence 1 -}
      let strong ((a_940: loaded pointer,
      (a_941: ctype, a_942: [ctype], a_943: boolean, a_944: boolean)),
      a_947: loaded pointer, a_951: loaded floating) =
        {- §6.5.2.2#4, sentence 2 -}
        unseq(
          let strong a_836: loaded pointer =
            pure(Specified(Cfunction(printf_proxy))) in
          pure((a_836, cfunction(a_836)))
        ,
          let weak a_949: pointer = pure(a_948) in
          {- §6.3.2.1#3 -}
          let weak a_950: pointer = memop(PtrArrayShift, a_949, 'char', 0) in
          pure(Specified(a_950))
        ,
          let weak a_952: pointer = pure(f) in
          load('float', a_952)
        ) in
      if not(params_length(a_942) <= 2) then
        pure(undef(<<UB038_number_of_args>>))
      else
        if not(a_943) \/ not(are_compatible ('signed int', a_941)) then
          pure(undef(<<UB041_function_not_compatible>>))
        else
          let strong a_946: pointer =
            let a_953: ctype = params_nth(a_942, 0) in
            if not(are_compatible ('const char*', a_953)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_954: pointer = create(Ivalignof(a_953), a_953) in
              let weak _: unit = store(a_953, a_954, a_947) in
              pure(a_954) in
          let strong a_945: pointer =
            {- §6.5.2.2#7, sentences 2 and 3 -}
            pcall(create_and_store, 'double', a_951) in
          let strong a_955: loaded integer =
            ccall('signed int (*) (const char*restrict , ...)', a_940, a_946,
            [('double', a_945)]) in
          let strong _: (unit,unit) =
            unseq(kill('char*', a_946), kill('double', a_945)) in
          pure(a_955)
    ) in
  pure(Unit) ;
  kill('signed int', i) ;
  kill('void*', p) ;
  kill('signed int', k) ;
  kill('signed int*', q) ;
  kill('float', f) ;
  pure(Unit) ;
  save ret_833: loaded integer (a_956: loaded integer:= Specified(0)) in
    pure(a_956)

