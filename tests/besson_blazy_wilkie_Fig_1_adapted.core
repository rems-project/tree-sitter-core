-- Aggregates
def union _G_fpos64_t :=
  __opaque: 'char[16]'
  __lldata: 'signed long_long'
  __align: 'double'

-- Globals
glob a_670: pointer [ail_ctype = 'char[13]'] :=
  create_readonly(Ivalignof('char[13]'), 'char[13]', Specified(Array(Specified(conv_int('char',
  115)), Specified(conv_int('char', 116)), Specified(conv_int('char', 97)),
  Specified(conv_int('char', 116)), Specified(conv_int('char', 117)),
  Specified(conv_int('char', 115)), Specified(conv_int('char', 61)),
  Specified(conv_int('char', 48)), Specified(conv_int('char', 120)),
  Specified(conv_int('char', 37)), Specified(conv_int('char', 120)),
  Specified(conv_int('char', 10)), Specified(0))))

glob a_721: pointer [ail_ctype = 'char[19]'] :=
  create_readonly(Ivalignof('char[19]'), 'char[19]', Specified(Array(Specified(conv_int('char',
  115)), Specified(conv_int('char', 116)), Specified(conv_int('char', 97)),
  Specified(conv_int('char', 116)), Specified(conv_int('char', 117)),
  Specified(conv_int('char', 115)), Specified(conv_int('char', 61)),
  Specified(conv_int('char', 48)), Specified(conv_int('char', 120)),
  Specified(conv_int('char', 37)), Specified(conv_int('char', 120)),
  Specified(conv_int('char', 32)), Specified(conv_int('char', 32)),
  Specified(conv_int('char', 98)), Specified(conv_int('char', 61)),
  Specified(conv_int('char', 37)), Specified(conv_int('char', 115)),
  Specified(conv_int('char', 10)), Specified(0))))

glob a_735: pointer [ail_ctype = 'char[5]'] :=
  create_readonly(Ivalignof('char[5]'), 'char[5]', Specified(Array(Specified(conv_int('char',
  116)), Specified(conv_int('char', 114)), Specified(conv_int('char', 117)),
  Specified(conv_int('char', 101)), Specified(0))))

glob a_738: pointer [ail_ctype = 'char[6]'] :=
  create_readonly(Ivalignof('char[6]'), 'char[6]', Specified(Array(Specified(conv_int('char',
  102)), Specified(conv_int('char', 97)), Specified(conv_int('char', 108)),
  Specified(conv_int('char', 115)), Specified(conv_int('char', 101)),
  Specified(0))))

-- Fun map
proc set (p: pointer, flag: pointer): eff loaded integer :=
  let strong a_801: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.12 -}
      let weak (a_788: loaded integer, a_789: loaded integer) =
        unseq(
          let weak a_792: pointer = pure(p) in
          load('signed int', a_792)
        ,
          {- §6.5.7 -}
          let weak (a_793: loaded integer, a_794: loaded integer) =
            unseq(
              pure(Specified(1))
            ,
              let weak a_800: pointer = pure(flag) in
              load('signed int', a_800)
            ) in
          pure(
            let (Specified(a_795: integer), Specified(a_796: integer)) =
              (a_793, a_794) in
            let a_797: integer = conv_int('signed int', a_795) in
            let a_798: integer = conv_int('signed int', a_796) in
            if a_798 < 0 then
              undef(<<UB051a_negative_shift>>)
            else
              if ctype_width('signed int') < a_798 \/
              ctype_width('signed int') = a_798 then
                undef(<<UB51b_shift_too_large>>)
              else
                if a_797 < 0 then
                  undef(<<UB052a_negative_left_shift>>)
                else
                  let a_799: integer = a_797 * 2 ^ a_798 in
                  if is_representable_integer(a_799, 'signed int') then
                    Specified(a_799)
                  else
                    undef(<<UB052b_non_representable_left_shift>>)
          )
        ) in
      pure(
        let (Specified(a_790: integer), Specified(a_791: integer)) =
          (a_788, a_789) in
        Specified(IvOR('signed int', conv_int('signed int', a_790),
        conv_int('signed int', a_791)))
      )
    ) in
  run ret_787(conv_loaded_int('signed int', a_801)) ;
  pure(Unit) ;
  save ret_787: loaded integer (a_802: loaded integer:= undef(<<UB088_reached_end_of_function>>)) in
    pure(a_802)

proc isset (p: pointer, flag: pointer): eff loaded integer :=
  let strong a_783: loaded integer =
    {- §6.5#2 -}
    bound(
      let weak (a_765: loaded integer, a_766: loaded integer) =
        unseq(
          {- §6.5.10 -}
          let weak (a_770: loaded integer, a_771: loaded integer) =
            unseq(
              let weak a_774: pointer = pure(p) in
              load('signed int', a_774)
            ,
              {- §6.5.7 -}
              let weak (a_775: loaded integer, a_776: loaded integer) =
                unseq(
                  pure(Specified(1))
                ,
                  let weak a_782: pointer = pure(flag) in
                  load('signed int', a_782)
                ) in
              pure(
                let (Specified(a_777: integer), Specified(a_778: integer)) =
                  (a_775, a_776) in
                let a_779: integer = conv_int('signed int', a_777) in
                let a_780: integer = conv_int('signed int', a_778) in
                if a_780 < 0 then
                  undef(<<UB051a_negative_shift>>)
                else
                  if ctype_width('signed int') < a_780 \/
                  ctype_width('signed int') = a_780 then
                    undef(<<UB51b_shift_too_large>>)
                  else
                    if a_779 < 0 then
                      undef(<<UB052a_negative_left_shift>>)
                    else
                      let a_781: integer = a_779 * 2 ^ a_780 in
                      if is_representable_integer(a_781, 'signed int') then
                        Specified(a_781)
                      else
                        undef(<<UB052b_non_representable_left_shift>>)
              )
            ) in
          pure(
            let (Specified(a_772: integer), Specified(a_773: integer)) =
              (a_770, a_771) in
            Specified(IvAND('signed int', conv_int('signed int', a_772),
            conv_int('signed int', a_773)))
          )
        ,
          pure(Specified(0))
        ) in
      pure(
        let (Specified(a_767: integer), Specified(a_768: integer)) =
          (a_765, a_766) in
        if not(conv_int('signed int', a_767) = conv_int('signed int', a_768)) then
          Specified(1)
        else
          Specified(0)
      )
    ) in
  run ret_764(conv_loaded_int('signed int', a_783)) ;
  pure(Unit) ;
  save ret_764: loaded integer (a_784: loaded integer:= undef(<<UB088_reached_end_of_function>>)) in
    pure(a_784)

proc main (): eff loaded integer :=
  let strong status: pointer =
    create(Ivalignof('signed int'), 'signed int') in
  let strong b: pointer = create(Ivalignof('_Bool'), '_Bool') in
  {- §6.2.4#6 -}
  store('signed int', status, Unspecified('signed int')) ;
  let strong _: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.2.2#10, sentence 1 -}
      let strong ((a_662: loaded pointer,
      (a_663: ctype, a_664: [ctype], a_665: boolean, a_666: boolean)),
      a_669: loaded pointer, a_673: loaded integer) =
        {- §6.5.2.2#4, sentence 2 -}
        unseq(
          let strong a_661: loaded pointer =
            pure(Specified(Cfunction(printf_proxy))) in
          pure((a_661, cfunction(a_661)))
        ,
          let weak a_671: pointer = pure(a_670) in
          {- §6.3.2.1#3 -}
          let weak a_672: pointer = memop(PtrArrayShift, a_671, 'char', 0) in
          pure(Specified(a_672))
        ,
          let weak a_674: pointer = pure(status) in
          load('signed int', a_674)
        ) in
      if not(params_length(a_664) <= 2) then
        pure(undef(<<UB038_number_of_args>>))
      else
        if not(a_665) \/ not(are_compatible ('signed int', a_663)) then
          pure(undef(<<UB041_function_not_compatible>>))
        else
          let strong a_668: pointer =
            let a_675: ctype = params_nth(a_664, 0) in
            if not(are_compatible ('const char*', a_675)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_676: pointer = create(Ivalignof(a_675), a_675) in
              let weak _: unit = store(a_675, a_676, a_669) in
              pure(a_676) in
          let strong a_667: pointer =
            {- §6.5.2.2#7, sentences 2 and 3 -}
            pcall(create_and_store, 'signed int',
            conv_loaded_int('signed int', a_673)) in
          let strong a_677: loaded integer =
            ccall('signed int (*) (const char*restrict , ...)', a_662, a_668,
            [('signed int', a_667)]) in
          let strong _: (unit,unit) =
            unseq(kill('char*', a_668), kill('signed int', a_667)) in
          pure(a_677)
    ) in
  pure(Unit) ;
  let strong _: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.16#3, sentence 4 -}
      let weak (a_660: pointer, a_694: loaded integer) =
        {- §6.5.16#3, sentence 5 -}
        unseq(
          pure(status)
        ,
          {- §6.5.2.2#10, sentence 1 -}
          let strong ((a_679: loaded pointer,
          (a_680: ctype, a_681: [ctype], a_682: boolean, a_683: boolean)),
          a_686: loaded integer, a_688: loaded integer) =
            {- §6.5.2.2#4, sentence 2 -}
            unseq(
              let strong a_678: loaded pointer =
                pure(Specified(Cfunction(set))) in
              pure((a_678, cfunction(a_678)))
            ,
              let weak a_687: pointer = pure(status) in
              load('signed int', a_687)
            ,
              pure(Specified(0))
            ) in
          if not(params_length(a_681) = 2) then
            pure(undef(<<UB038_number_of_args>>))
          else
            if a_682 \/ not(are_compatible ('signed int', a_680)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              let strong a_685: pointer =
                let a_689: ctype = params_nth(a_681, 0) in
                if not(are_compatible ('signed int', a_689)) then
                  pure(undef(<<UB041_function_not_compatible>>))
                else
                  {- §6.5.2.2#7, sentence 1 -}
                  let weak a_690: pointer = create(Ivalignof(a_689), a_689) in
                  let weak _: unit =
                    store(a_689, a_690, conv_loaded_int(a_689, a_686)) in
                  pure(a_690) in
              let strong a_684: pointer =
                let a_691: ctype = params_nth(a_681, 1) in
                if not(are_compatible ('signed int', a_691)) then
                  pure(undef(<<UB041_function_not_compatible>>))
                else
                  {- §6.5.2.2#7, sentence 1 -}
                  let weak a_692: pointer = create(Ivalignof(a_691), a_691) in
                  let weak _: unit =
                    store(a_691, a_692, conv_loaded_int(a_691, a_688)) in
                  pure(a_692) in
              let strong a_693: loaded integer =
                ccall('signed int (*) (signed int, signed int)', a_679, a_685,
                a_684) in
              let strong _: (unit,unit) =
                unseq(kill('signed int', a_685), kill('signed int', a_684)) in
              pure(a_693)
        ) in
      let weak _: unit =
        {- §6.5.16.1#2, store -}
        neg(store('signed int', a_660, conv_loaded_int('signed int', a_694))) in
      pure(conv_loaded_int('signed int', a_694))
    ) in
  pure(Unit) ;
  let strong a_695: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.2.2#10, sentence 1 -}
      let strong ((a_697: loaded pointer,
      (a_698: ctype, a_699: [ctype], a_700: boolean, a_701: boolean)),
      a_704: loaded integer, a_706: loaded integer) =
        {- §6.5.2.2#4, sentence 2 -}
        unseq(
          let strong a_696: loaded pointer =
            pure(Specified(Cfunction(isset))) in
          pure((a_696, cfunction(a_696)))
        ,
          let weak a_705: pointer = pure(status) in
          load('signed int', a_705)
        ,
          pure(Specified(0))
        ) in
      if not(params_length(a_699) = 2) then
        pure(undef(<<UB038_number_of_args>>))
      else
        if a_700 \/ not(are_compatible ('signed int', a_698)) then
          pure(undef(<<UB041_function_not_compatible>>))
        else
          let strong a_703: pointer =
            let a_707: ctype = params_nth(a_699, 0) in
            if not(are_compatible ('signed int', a_707)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_708: pointer = create(Ivalignof(a_707), a_707) in
              let weak _: unit =
                store(a_707, a_708, conv_loaded_int(a_707, a_704)) in
              pure(a_708) in
          let strong a_702: pointer =
            let a_709: ctype = params_nth(a_699, 1) in
            if not(are_compatible ('signed int', a_709)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_710: pointer = create(Ivalignof(a_709), a_709) in
              let weak _: unit =
                store(a_709, a_710, conv_loaded_int(a_709, a_706)) in
              pure(a_710) in
          let strong a_711: loaded integer =
            ccall('signed int (*) (signed int, signed int)', a_697, a_703,
            a_702) in
          let strong _: (unit,unit) =
            unseq(kill('signed int', a_703), kill('signed int', a_702)) in
          pure(a_711)
    ) in
  store('_Bool', b, conv_loaded_int('_Bool', a_695)) ;
  let strong _: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.2.2#10, sentence 1 -}
      let strong ((a_712: loaded pointer,
      (a_713: ctype, a_714: [ctype], a_715: boolean, a_716: boolean)),
      a_720: loaded pointer, a_724: loaded integer, a_726: loaded pointer) =
        {- §6.5.2.2#4, sentence 2 -}
        unseq(
          let strong a_659: loaded pointer =
            pure(Specified(Cfunction(printf_proxy))) in
          pure((a_659, cfunction(a_659)))
        ,
          let weak a_722: pointer = pure(a_721) in
          {- §6.3.2.1#3 -}
          let weak a_723: pointer = memop(PtrArrayShift, a_722, 'char', 0) in
          pure(Specified(a_723))
        ,
          let weak a_725: pointer = pure(status) in
          load('signed int', a_725)
        ,
          {- §6.5.15#4, sentence 1 -}
          let strong a_733: loaded integer =
            let weak (a_727: loaded integer, a_728: loaded integer) =
              unseq(
                let weak a_732: pointer = pure(b) in
                load('_Bool', a_732)
              ,
                pure(Specified(0))
              ) in
            pure(
              let (Specified(a_729: integer), Specified(a_730: integer)) =
                (a_727, a_728) in
              if conv_int('signed int', a_729) = conv_int('signed int', a_730) then
                Specified(1)
              else
                Specified(0)
            ) in
          let Specified(a_734: integer) = a_733 in
          {- §6.5.15#4, sentence 2 -}
          if a_734 = 0 then
            let weak a_736: pointer = pure(a_735) in
            {- §6.3.2.1#3 -}
            let weak a_737: pointer =
              memop(PtrArrayShift, a_736, 'char', 0) in
            pure(Specified(a_737))
          else
            let weak a_739: pointer = pure(a_738) in
            {- §6.3.2.1#3 -}
            let weak a_740: pointer =
              memop(PtrArrayShift, a_739, 'char', 0) in
            pure(Specified(a_740))
        ) in
      if not(params_length(a_714) <= 3) then
        pure(undef(<<UB038_number_of_args>>))
      else
        if not(a_715) \/ not(are_compatible ('signed int', a_713)) then
          pure(undef(<<UB041_function_not_compatible>>))
        else
          let strong a_719: pointer =
            let a_741: ctype = params_nth(a_714, 0) in
            if not(are_compatible ('const char*', a_741)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_742: pointer = create(Ivalignof(a_741), a_741) in
              let weak _: unit = store(a_741, a_742, a_720) in
              pure(a_742) in
          let strong a_718: pointer =
            {- §6.5.2.2#7, sentences 2 and 3 -}
            pcall(create_and_store, 'signed int',
            conv_loaded_int('signed int', a_724)) in
          let strong a_717: pointer =
            {- §6.5.2.2#7, sentences 2 and 3 -}
            pcall(create_and_store, 'char*', a_726) in
          let strong a_743: loaded integer =
            ccall('signed int (*) (const char*restrict , ...)', a_712, a_719,
            [('signed int', a_718), ('char*', a_717)]) in
          let strong _: (unit,unit,unit) =
            unseq(
              kill('char*', a_719)
            ,
              kill('signed int', a_718)
            ,
              kill('char*', a_717)
            ) in
          pure(a_743)
    ) in
  pure(Unit) ;
  let strong a_760: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.2.2#10, sentence 1 -}
      let strong ((a_745: loaded pointer,
      (a_746: ctype, a_747: [ctype], a_748: boolean, a_749: boolean)),
      a_752: loaded integer, a_754: loaded integer) =
        {- §6.5.2.2#4, sentence 2 -}
        unseq(
          let strong a_744: loaded pointer =
            pure(Specified(Cfunction(isset))) in
          pure((a_744, cfunction(a_744)))
        ,
          let weak a_753: pointer = pure(status) in
          load('signed int', a_753)
        ,
          pure(Specified(0))
        ) in
      if not(params_length(a_747) = 2) then
        pure(undef(<<UB038_number_of_args>>))
      else
        if a_748 \/ not(are_compatible ('signed int', a_746)) then
          pure(undef(<<UB041_function_not_compatible>>))
        else
          let strong a_751: pointer =
            let a_755: ctype = params_nth(a_747, 0) in
            if not(are_compatible ('signed int', a_755)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_756: pointer = create(Ivalignof(a_755), a_755) in
              let weak _: unit =
                store(a_755, a_756, conv_loaded_int(a_755, a_752)) in
              pure(a_756) in
          let strong a_750: pointer =
            let a_757: ctype = params_nth(a_747, 1) in
            if not(are_compatible ('signed int', a_757)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_758: pointer = create(Ivalignof(a_757), a_757) in
              let weak _: unit =
                store(a_757, a_758, conv_loaded_int(a_757, a_754)) in
              pure(a_758) in
          let strong a_759: loaded integer =
            ccall('signed int (*) (signed int, signed int)', a_745, a_751,
            a_750) in
          let strong _: (unit,unit) =
            unseq(kill('signed int', a_751), kill('signed int', a_750)) in
          pure(a_759)
    ) in
  kill('signed int', status) ;
  kill('_Bool', b) ;
  run ret_658(conv_loaded_int('signed int', a_760)) ;
  kill('signed int', status) ;
  kill('_Bool', b) ;
  pure(Unit) ;
  save ret_658: loaded integer (a_761: loaded integer:= Specified(0)) in
    pure(a_761)

