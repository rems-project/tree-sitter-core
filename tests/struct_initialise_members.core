-- Aggregates
def union _G_fpos64_t :=
  __opaque: 'char[16]'
  __lldata: 'signed long_long'
  __align: 'double'

def struct __cerbty_unnamed_tag_650 :=
  c: 'char'
  f: 'float'

-- Globals
glob a_689: pointer [ail_ctype = 'char[20]'] :=
  create_readonly(Ivalignof('char[20]'), 'char[20]', Specified(Array(Specified(conv_int('char',
  115)), Specified(conv_int('char', 50)), Specified(conv_int('char', 46)),
  Specified(conv_int('char', 99)), Specified(conv_int('char', 61)),
  Specified(conv_int('char', 48)), Specified(conv_int('char', 120)),
  Specified(conv_int('char', 37)), Specified(conv_int('char', 120)),
  Specified(conv_int('char', 32)), Specified(conv_int('char', 32)),
  Specified(conv_int('char', 115)), Specified(conv_int('char', 50)),
  Specified(conv_int('char', 46)), Specified(conv_int('char', 102)),
  Specified(conv_int('char', 61)), Specified(conv_int('char', 37)),
  Specified(conv_int('char', 102)), Specified(conv_int('char', 10)),
  Specified(0))))

-- Fun map
proc f (cp: pointer, fp: pointer): eff unit :=
  let strong _: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.16#3, sentence 4 -}
      let weak (a_706: pointer, a_711: loaded integer) =
        {- §6.5.16#3, sentence 5 -}
        unseq(
          {- §6.5.3.2 -}
          let weak a_707: loaded pointer =
            let weak a_710: pointer = pure(cp) in
            load('char*', a_710) in
          let Specified(a_708: pointer) = a_707 in
          let weak a_709: boolean = memop(PtrValidForDeref, 'char', a_708) in
          pure(
            if a_709 then
              a_708
            else
              undef(<<UB043_indirection_invalid_value>>)
          )
        ,
          pure(Specified(65))
        ) in
      let weak _: unit =
        {- §6.5.16.1#2, store -}
        neg(store('char', a_706, conv_loaded_int('char', a_711))) in
      pure(conv_loaded_int('char', a_711))
    ) in
  pure(Unit) ;
  let strong _: loaded floating =
    {- §6.5#2 -}
    bound(
      {- §6.5.16#3, sentence 4 -}
      let weak (a_705: pointer, a_716: loaded floating) =
        {- §6.5.16#3, sentence 5 -}
        unseq(
          {- §6.5.3.2 -}
          let weak a_712: loaded pointer =
            let weak a_715: pointer = pure(fp) in
            load('float*', a_715) in
          let Specified(a_713: pointer) = a_712 in
          let weak a_714: boolean = memop(PtrValidForDeref, 'float', a_713) in
          pure(
            if a_714 then
              a_713
            else
              undef(<<UB043_indirection_invalid_value>>)
          )
        ,
          pure(Specified(1.))
        ) in
      let weak _: unit =
        {- §6.5.16.1#2, store -}
        neg(store('float', a_705, a_716)) in
      pure(a_716)
    ) in
  pure(Unit) ;
  pure(Unit) ;
  save ret_704: unit (a_717: unit:= Unit) in  pure(a_717)

proc main (): eff loaded integer :=
  let strong s1: pointer =
    create(Ivalignof('struct __cerbty_unnamed_tag_650'), 'struct __cerbty_unnamed_tag_650') in
  let strong s2: pointer =
    create(Ivalignof('struct __cerbty_unnamed_tag_650'), 'struct __cerbty_unnamed_tag_650') in
  {- §6.2.4#6 -}
  store('struct __cerbty_unnamed_tag_650', s1,
  Unspecified('struct __cerbty_unnamed_tag_650')) ;
  {- §6.5#2 -}
  bound(
    {- §6.5.2.2#10, sentence 1 -}
    let strong ((a_660: loaded pointer,
    (a_661: ctype, a_662: [ctype], a_663: boolean, a_664: boolean)),
    a_667: loaded pointer, a_670: loaded pointer) =
      {- §6.5.2.2#4, sentence 2 -}
      unseq(
        let strong a_659: loaded pointer = pure(Specified(Cfunction(f))) in
        pure((a_659, cfunction(a_659)))
      ,
        {- §6.5.3.2#3, sentence 5 -}
        let weak a_668: pointer =
          {- §6.5.2.3#3, sentence 2 -}
          let strong a_669: pointer = pure(s1) in
          memop(PtrArrayShift[__cerbty_unnamed_tag_650, c], a_669) in
        pure(Specified(a_668))
      ,
        {- §6.5.3.2#3, sentence 5 -}
        let weak a_671: pointer =
          {- §6.5.2.3#3, sentence 2 -}
          let strong a_672: pointer = pure(s1) in
          memop(PtrArrayShift[__cerbty_unnamed_tag_650, f], a_672) in
        pure(Specified(a_671))
      ) in
    if not(params_length(a_662) = 2) then
      pure(undef(<<UB038_number_of_args>>))
    else
      if a_663 \/ not(are_compatible ('void', a_661)) then
        pure(undef(<<UB041_function_not_compatible>>))
      else
        let strong a_666: pointer =
          let a_673: ctype = params_nth(a_662, 0) in
          if not(are_compatible ('char*', a_673)) then
            pure(undef(<<UB041_function_not_compatible>>))
          else
            {- §6.5.2.2#7, sentence 1 -}
            let weak a_674: pointer = create(Ivalignof(a_673), a_673) in
            let weak _: unit = store(a_673, a_674, a_667) in
            pure(a_674) in
        let strong a_665: pointer =
          let a_675: ctype = params_nth(a_662, 1) in
          if not(are_compatible ('float*', a_675)) then
            pure(undef(<<UB041_function_not_compatible>>))
          else
            {- §6.5.2.2#7, sentence 1 -}
            let weak a_676: pointer = create(Ivalignof(a_675), a_675) in
            let weak _: unit = store(a_675, a_676, a_670) in
            pure(a_676) in
        let strong a_677: unit =
          ccall('void (*) (char*, float*)', a_660, a_666, a_665) in
        let strong _: (unit,unit) =
          unseq(kill('char*', a_666), kill('float*', a_665)) in
        pure(a_677)
  ) ;
  pure(Unit) ;
  {- §6.2.4#6 -}
  store('struct __cerbty_unnamed_tag_650', s2,
  Unspecified('struct __cerbty_unnamed_tag_650')) ;
  let strong _: loaded struct a_650 =
    {- §6.5#2 -}
    bound(
      {- §6.5.16#3, sentence 4 -}
      let weak (a_658: pointer, a_679: loaded struct a_650) =
        {- §6.5.16#3, sentence 5 -}
        unseq(
          pure(s2)
        ,
          let weak a_678: pointer = pure(s1) in
          load('struct __cerbty_unnamed_tag_650', a_678)
        ) in
      let weak _: unit =
        {- §6.5.16.1#2, store -}
        neg(store('struct __cerbty_unnamed_tag_650', a_658, a_679)) in
      pure(a_679)
    ) in
  pure(Unit) ;
  let strong _: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.2.2#10, sentence 1 -}
      let strong ((a_680: loaded pointer,
      (a_681: ctype, a_682: [ctype], a_683: boolean, a_684: boolean)),
      a_688: loaded pointer, a_692: loaded integer, a_695: loaded floating) =
        {- §6.5.2.2#4, sentence 2 -}
        unseq(
          let strong a_657: loaded pointer =
            pure(Specified(Cfunction(printf_proxy))) in
          pure((a_657, cfunction(a_657)))
        ,
          let weak a_690: pointer = pure(a_689) in
          {- §6.3.2.1#3 -}
          let weak a_691: pointer = memop(PtrArrayShift, a_690, 'char', 0) in
          pure(Specified(a_691))
        ,
          let weak a_694: pointer =
            {- §6.5.2.3#3, sentence 2 -}
            let strong a_693: pointer = pure(s2) in
            memop(PtrArrayShift[__cerbty_unnamed_tag_650, c], a_693) in
          load('char', a_694)
        ,
          let weak a_697: pointer =
            {- §6.5.2.3#3, sentence 2 -}
            let strong a_696: pointer = pure(s2) in
            memop(PtrArrayShift[__cerbty_unnamed_tag_650, f], a_696) in
          load('float', a_697)
        ) in
      if not(params_length(a_682) <= 3) then
        pure(undef(<<UB038_number_of_args>>))
      else
        if not(a_683) \/ not(are_compatible ('signed int', a_681)) then
          pure(undef(<<UB041_function_not_compatible>>))
        else
          let strong a_687: pointer =
            let a_698: ctype = params_nth(a_682, 0) in
            if not(are_compatible ('const char*', a_698)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_699: pointer = create(Ivalignof(a_698), a_698) in
              let weak _: unit = store(a_698, a_699, a_688) in
              pure(a_699) in
          let strong a_686: pointer =
            {- §6.5.2.2#7, sentences 2 and 3 -}
            pcall(create_and_store, 'signed int',
            conv_loaded_int('signed int', a_692)) in
          let strong a_685: pointer =
            {- §6.5.2.2#7, sentences 2 and 3 -}
            pcall(create_and_store, 'double', a_695) in
          let strong a_700: loaded integer =
            ccall('signed int (*) (const char*restrict , ...)', a_680, a_687,
            [('signed int', a_686), ('double', a_685)]) in
          let strong _: (unit,unit,unit) =
            unseq(
              kill('char*', a_687)
            ,
              kill('signed int', a_686)
            ,
              kill('double', a_685)
            ) in
          pure(a_700)
    ) in
  pure(Unit) ;
  kill('struct __cerbty_unnamed_tag_650', s1) ;
  kill('struct __cerbty_unnamed_tag_650', s2) ;
  pure(Unit) ;
  save ret_656: loaded integer (a_701: loaded integer:= Specified(0)) in
    pure(a_701)

