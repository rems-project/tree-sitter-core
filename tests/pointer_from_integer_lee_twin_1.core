-- Aggregates
def union _G_fpos64_t :=
  __opaque: 'char[16]'
  __lldata: 'signed long_long'
  __align: 'double'

def struct div :=
  quot: 'signed int'
  rem: 'signed int'

def struct ldiv :=
  quot: 'signed long'
  rem: 'signed long'

def struct lldiv :=
  quot: 'signed long_long'
  rem: 'signed long_long'

-- Globals
glob a_880: pointer [ail_ctype = 'char[12]'] :=
  create_readonly(Ivalignof('char[12]'), 'char[12]', Specified(Array(Specified(conv_int('char',
  104)), Specified(conv_int('char', 97)), Specified(conv_int('char', 108)),
  Specified(conv_int('char', 102)), Specified(conv_int('char', 32)),
  Specified(conv_int('char', 61)), Specified(conv_int('char', 32)),
  Specified(conv_int('char', 37)), Specified(conv_int('char', 122)),
  Specified(conv_int('char', 120)), Specified(conv_int('char', 10)),
  Specified(0))))

glob a_992: pointer [ail_ctype = 'char[9]'] :=
  create_readonly(Ivalignof('char[9]'), 'char[9]', Specified(Array(Specified(conv_int('char',
  42)), Specified(conv_int('char', 113)), Specified(conv_int('char', 32)),
  Specified(conv_int('char', 61)), Specified(conv_int('char', 32)),
  Specified(conv_int('char', 37)), Specified(conv_int('char', 120)),
  Specified(conv_int('char', 10)), Specified(0))))

glob a_1015: pointer [ail_ctype = 'char[19]'] :=
  create_readonly(Ivalignof('char[19]'), 'char[19]', Specified(Array(Specified(conv_int('char',
  97)), Specified(conv_int('char', 108)), Specified(conv_int('char', 108)),
  Specified(conv_int('char', 111)), Specified(conv_int('char', 99)),
  Specified(conv_int('char', 97)), Specified(conv_int('char', 116)),
  Specified(conv_int('char', 105)), Specified(conv_int('char', 111)),
  Specified(conv_int('char', 110)), Specified(conv_int('char', 32)),
  Specified(conv_int('char', 102)), Specified(conv_int('char', 97)),
  Specified(conv_int('char', 105)), Specified(conv_int('char', 108)),
  Specified(conv_int('char', 101)), Specified(conv_int('char', 100)),
  Specified(conv_int('char', 10)), Specified(0))))

-- Fun map
proc main (): eff loaded integer :=
  let strong half: pointer = create(Ivalignof('size_t'), 'size_t') in
  let strong p: pointer = create(Ivalignof('char*'), 'char*') in
  let strong q: pointer = create(Ivalignof('char*'), 'char*') in
  let strong a_860: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.6 -}
      let weak (a_861: loaded integer, a_862: loaded integer) =
        unseq(
          {- §6.5.5 -}
          let weak (a_866: loaded integer, a_867: loaded integer) =
            unseq(pure(Specified(18446744073709551615)), pure(Specified(2))) in
          pure(
            let (Specified(a_868: integer), Specified(a_869: integer)) =
              (a_866, a_867) in
            let a_870: integer =
              if all_values_representable_in('size_t', 'signed int') then
                conv_int('signed int', a_868)
              else
                conv_int('unsigned int', a_868) in
            let a_871: integer =
              if all_values_representable_in('size_t', 'signed int') then
                conv_int('signed int', a_869)
              else
                conv_int('unsigned int', a_869) in
            if a_871 = 0 then
              undef(<<UB045a_division_by_zero>>)
            else
              if is_representable_integer(if all_values_representable_in('size_t',
              'signed int') then
                conv_int('signed int', a_868)
              else
                conv_int('unsigned int', a_868) /
              a_871, 'size_t') then
                Specified(wrapI('size_t',
                if all_values_representable_in('size_t', 'signed int') then
                  conv_int('signed int', a_868)
                else
                  conv_int('unsigned int', a_868) /
                a_871))
              else
                undef(<<UB045c_quotient_not_representable>>)
          )
        ,
          pure(Specified(1))
        ) in
      pure(
        let (Specified(a_863: integer), Specified(a_864: integer)) =
          (a_861, a_862) in
        Specified(wrapI('size_t',
        if all_values_representable_in('size_t', 'signed int') then
          conv_int('signed int', a_863)
        else
          conv_int('unsigned int', a_863) +
        if all_values_representable_in('size_t', 'signed int') then
          conv_int('signed int', a_864)
        else
          conv_int('unsigned int', a_864)))
      )
    ) in
  store('size_t', half, conv_loaded_int('size_t', a_860)) ;
  let strong _: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.2.2#10, sentence 1 -}
      let strong ((a_872: loaded pointer,
      (a_873: ctype, a_874: [ctype], a_875: boolean, a_876: boolean)),
      a_879: loaded pointer, a_883: loaded integer) =
        {- §6.5.2.2#4, sentence 2 -}
        unseq(
          let strong a_859: loaded pointer =
            pure(Specified(Cfunction(printf_proxy))) in
          pure((a_859, cfunction(a_859)))
        ,
          let weak a_881: pointer = pure(a_880) in
          {- §6.3.2.1#3 -}
          let weak a_882: pointer = memop(PtrArrayShift, a_881, 'char', 0) in
          pure(Specified(a_882))
        ,
          let weak a_884: pointer = pure(half) in
          load('size_t', a_884)
        ) in
      if not(params_length(a_874) <= 2) then
        pure(undef(<<UB038_number_of_args>>))
      else
        if not(a_875) \/ not(are_compatible ('signed int', a_873)) then
          pure(undef(<<UB041_function_not_compatible>>))
        else
          let strong a_878: pointer =
            let a_885: ctype = params_nth(a_874, 0) in
            if not(are_compatible ('const char*', a_885)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_886: pointer = create(Ivalignof(a_885), a_885) in
              let weak _: unit = store(a_885, a_886, a_879) in
              pure(a_886) in
          let strong a_877: pointer =
            {- §6.5.2.2#7, sentences 2 and 3 -}
            pcall(create_and_store, 'size_t', conv_loaded_int('size_t', a_883)) in
          let strong a_887: loaded integer =
            ccall('signed int (*) (const char*restrict , ...)', a_872, a_878,
            [('size_t', a_877)]) in
          let strong _: (unit,unit) =
            unseq(kill('char*', a_878), kill('size_t', a_877)) in
          pure(a_887)
    ) in
  pure(Unit) ;
  let strong a_888: loaded pointer =
    {- §6.5#2 -}
    bound(
      {- §6.5.2.2#10, sentence 1 -}
      let strong ((a_890: loaded pointer,
      (a_891: ctype, a_892: [ctype], a_893: boolean, a_894: boolean)),
      a_896: loaded integer) =
        {- §6.5.2.2#4, sentence 2 -}
        unseq(
          let strong a_889: loaded pointer =
            pure(Specified(Cfunction(malloc_proxy))) in
          pure((a_889, cfunction(a_889)))
        ,
          let weak a_897: pointer = pure(half) in
          load('size_t', a_897)
        ) in
      if not(params_length(a_892) = 1) then
        pure(undef(<<UB038_number_of_args>>))
      else
        if a_893 \/ not(are_compatible ('void*', a_891)) then
          pure(undef(<<UB041_function_not_compatible>>))
        else
          let strong a_895: pointer =
            let a_898: ctype = params_nth(a_892, 0) in
            if not(are_compatible ('size_t', a_898)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_899: pointer = create(Ivalignof(a_898), a_898) in
              let weak _: unit =
                store(a_898, a_899, conv_loaded_int(a_898, a_896)) in
              pure(a_899) in
          let strong a_900: loaded pointer =
            ccall('void* (*) (size_t)', a_890, a_895) in
          kill('size_t', a_895) ;
          pure(a_900)
    ) in
  store('char*', p, a_888) ;
  let strong a_901: loaded pointer =
    {- §6.5#2 -}
    bound(
      {- §6.5.2.2#10, sentence 1 -}
      let strong ((a_903: loaded pointer,
      (a_904: ctype, a_905: [ctype], a_906: boolean, a_907: boolean)),
      a_909: loaded integer) =
        {- §6.5.2.2#4, sentence 2 -}
        unseq(
          let strong a_902: loaded pointer =
            pure(Specified(Cfunction(malloc_proxy))) in
          pure((a_902, cfunction(a_902)))
        ,
          let weak a_910: pointer = pure(half) in
          load('size_t', a_910)
        ) in
      if not(params_length(a_905) = 1) then
        pure(undef(<<UB038_number_of_args>>))
      else
        if a_906 \/ not(are_compatible ('void*', a_904)) then
          pure(undef(<<UB041_function_not_compatible>>))
        else
          let strong a_908: pointer =
            let a_911: ctype = params_nth(a_905, 0) in
            if not(are_compatible ('size_t', a_911)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_912: pointer = create(Ivalignof(a_911), a_911) in
              let weak _: unit =
                store(a_911, a_912, conv_loaded_int(a_911, a_909)) in
              pure(a_912) in
          let strong a_913: loaded pointer =
            ccall('void* (*) (size_t)', a_903, a_908) in
          kill('size_t', a_908) ;
          pure(a_913)
    ) in
  store('char*', q, a_901) ;
  let strong a_914: loaded integer =
    {- §6.5#2 -}
    bound(
      let weak (a_916: loaded integer, a_917: loaded integer) =
        unseq(
          {- 6.5.13#4 -}
          {- 6.5.13#3 -}
          let strong a_935: loaded integer =
            let weak (a_921: loaded integer, a_922: loaded integer) =
              unseq(
                let weak (a_926: loaded integer, a_927: loaded integer) =
                  unseq(
                    let weak a_932: loaded pointer =
                      let weak a_931: pointer = pure(p) in
                      load('char*', a_931) in
                    let Specified(a_933: pointer) = a_932 in
                    let weak a_934: boolean =
                      memop(PtrNe, a_933, NULL(char*)) in
                    {- §6.5.9#3 -}
                    pure(if a_934 then Specified(1) else Specified(0))
                  ,
                    pure(Specified(0))
                  ) in
                pure(
                  let (Specified(a_928: integer), Specified(a_929: integer)) =
                    (a_926, a_927) in
                  if conv_int('signed int', a_928) =
                  conv_int('signed int', a_929) then
                    Specified(1)
                  else
                    Specified(0)
                )
              ,
                pure(Specified(0))
              ) in
            pure(
              let (Specified(a_923: integer), Specified(a_924: integer)) =
                (a_921, a_922) in
              if conv_int('signed int', a_923) = conv_int('signed int', a_924) then
                Specified(1)
              else
                Specified(0)
            ) in
          let Specified(a_936: integer) = a_935 in
          if a_936 = 0 then
            let strong a_937: loaded integer = pure(Specified(0)) in
            pure(conv_loaded_int('signed int', a_937))
          else
            let strong a_947: loaded integer =
              let weak (a_938: loaded integer, a_939: loaded integer) =
                unseq(
                  let weak a_944: loaded pointer =
                    let weak a_943: pointer = pure(q) in
                    load('char*', a_943) in
                  let Specified(a_945: pointer) = a_944 in
                  let weak a_946: boolean =
                    memop(PtrNe, a_945, NULL(char*)) in
                  {- §6.5.9#3 -}
                  pure(if a_946 then Specified(1) else Specified(0))
                ,
                  pure(Specified(0))
                ) in
              pure(
                let (Specified(a_940: integer), Specified(a_941: integer)) =
                  (a_938, a_939) in
                if not(conv_int('signed int', a_940) =
                conv_int('signed int', a_941)) then
                  Specified(1)
                else
                  Specified(0)
              ) in
            pure(conv_loaded_int('signed int', a_947))
        ,
          pure(Specified(0))
        ) in
      pure(
        let (Specified(a_918: integer), Specified(a_919: integer)) =
          (a_916, a_917) in
        if conv_int('signed int', a_918) = conv_int('signed int', a_919) then
          Specified(1)
        else
          Specified(0)
      )
    ) in
  let strong a_858: boolean =
    let Specified(a_915: integer) = a_914 in
    pure(if not(a_915 = 1) then True else False) in
  if a_858 then
    let strong v: pointer = create(Ivalignof('uintptr_t'), 'uintptr_t') in
    let strong _: loaded integer =
      {- §6.5#2 -}
      bound(
        {- §6.5.16#3, sentence 4 -}
        let weak (a_950: pointer, a_955: loaded integer) =
          {- §6.5.16#3, sentence 5 -}
          unseq(
            {- §6.5.3.2 -}
            let weak a_951: loaded pointer =
              let weak a_954: pointer = pure(q) in
              load('char*', a_954) in
            let Specified(a_952: pointer) = a_951 in
            let weak a_953: boolean =
              memop(PtrValidForDeref, 'char', a_952) in
            pure(
              if a_953 then
                a_952
              else
                undef(<<UB043_indirection_invalid_value>>)
            )
          ,
            pure(Specified(0))
          ) in
        let weak _: unit =
          {- §6.5.16.1#2, store -}
          neg(store('char', a_950, conv_loaded_int('char', a_955))) in
        pure(conv_loaded_int('char', a_955))
      ) in
    pure(Unit) ;
    let strong a_956: loaded integer =
      {- §6.5#2 -}
      bound(
        {- §6.5.15#4, sentence 1 -}
        let strong a_971: loaded integer =
          let weak (a_957: loaded integer, a_958: loaded integer) =
            unseq(
              let weak (a_962: loaded integer, a_963: loaded integer) =
                unseq(
                  {- §6.5.4 -}
                  let weak a_967: loaded pointer =
                    let weak a_969: pointer = pure(p) in
                    load('char*', a_969) in
                  let Specified(a_968: pointer) = a_967 in
                  let weak a_970: integer =
                    memop(IntFromPtr, 'char', 'uintptr_t', a_968) in
                  pure(Specified(a_970))
                ,
                  pure(Specified(0))
                ) in
              pure(
                let (Specified(a_964: integer), Specified(a_965: integer)) =
                  (a_962, a_963) in
                if conv_int('uintptr_t', a_964) = conv_int('uintptr_t', a_965) then
                  Specified(1)
                else
                  Specified(0)
              )
            ,
              pure(Specified(0))
            ) in
          pure(
            let (Specified(a_959: integer), Specified(a_960: integer)) =
              (a_957, a_958) in
            if conv_int('signed int', a_959) = conv_int('signed int', a_960) then
              Specified(1)
            else
              Specified(0)
          ) in
        let Specified(a_972: integer) = a_971 in
        {- §6.5.15#4, sentence 2 -}
        if a_972 = 0 then
          let strong a_974: loaded integer =
            let weak a_973: pointer = pure(half) in
            load('size_t', a_973) in
          pure(conv_loaded_int('size_t', a_974))
        else
          let strong a_975: loaded integer = pure(Specified(0)) in
          pure(conv_loaded_int('size_t', a_975))
      ) in
    store('uintptr_t', v, conv_loaded_int('uintptr_t', a_956)) ;
    let strong _: loaded integer =
      {- §6.5#2 -}
      bound(
        {- §6.5.16#3, sentence 4 -}
        let weak (a_949: pointer, a_983: loaded integer) =
          {- §6.5.16#3, sentence 5 -}
          unseq(
            {- §6.5.3.2 -}
            let weak a_976: loaded pointer =
              {- §6.5.4 -}
              let weak a_979: loaded integer =
                let weak a_981: pointer = pure(v) in
                load('uintptr_t', a_981) in
              let Specified(a_980: integer) = a_979 in
              let weak a_982: pointer =
                memop(PtrFromInt, 'uintptr_t', 'char', a_980) in
              pure(Specified(a_982)) in
            let Specified(a_977: pointer) = a_976 in
            let weak a_978: boolean =
              memop(PtrValidForDeref, 'char', a_977) in
            pure(
              if a_978 then
                a_977
              else
                undef(<<UB043_indirection_invalid_value>>)
            )
          ,
            pure(Specified(1))
          ) in
        let weak _: unit =
          {- §6.5.16.1#2, store -}
          neg(store('char', a_949, conv_loaded_int('char', a_983))) in
        pure(conv_loaded_int('char', a_983))
      ) in
    pure(Unit) ;
    let strong _: loaded integer =
      {- §6.5#2 -}
      bound(
        {- §6.5.2.2#10, sentence 1 -}
        let strong ((a_984: loaded pointer,
        (a_985: ctype, a_986: [ctype], a_987: boolean, a_988: boolean)),
        a_991: loaded pointer, a_995: loaded integer) =
          {- §6.5.2.2#4, sentence 2 -}
          unseq(
            let strong a_948: loaded pointer =
              pure(Specified(Cfunction(printf_proxy))) in
            pure((a_948, cfunction(a_948)))
          ,
            let weak a_993: pointer = pure(a_992) in
            {- §6.3.2.1#3 -}
            let weak a_994: pointer =
              memop(PtrArrayShift, a_993, 'char', 0) in
            pure(Specified(a_994))
          ,
            {- §6.5.4 -}
            let weak a_996: loaded integer =
              let weak a_1002: pointer =
                {- §6.5.3.2 -}
                let weak a_998: loaded pointer =
                  let weak a_1001: pointer = pure(q) in
                  load('char*', a_1001) in
                let Specified(a_999: pointer) = a_998 in
                let weak a_1000: boolean =
                  memop(PtrValidForDeref, 'char', a_999) in
                pure(
                  if a_1000 then
                    a_999
                  else
                    undef(<<UB043_indirection_invalid_value>>)
                ) in
              load('char', a_1002) in
            pure(conv_loaded_int('signed int', a_996))
          ) in
        if not(params_length(a_986) <= 2) then
          pure(undef(<<UB038_number_of_args>>))
        else
          if not(a_987) \/ not(are_compatible ('signed int', a_985)) then
            pure(undef(<<UB041_function_not_compatible>>))
          else
            let strong a_990: pointer =
              let a_1004: ctype = params_nth(a_986, 0) in
              if not(are_compatible ('const char*', a_1004)) then
                pure(undef(<<UB041_function_not_compatible>>))
              else
                {- §6.5.2.2#7, sentence 1 -}
                let weak a_1005: pointer =
                  create(Ivalignof(a_1004), a_1004) in
                let weak _: unit = store(a_1004, a_1005, a_991) in
                pure(a_1005) in
            let strong a_989: pointer =
              {- §6.5.2.2#7, sentences 2 and 3 -}
              pcall(create_and_store, 'signed int',
              conv_loaded_int('signed int', a_995)) in
            let strong a_1006: loaded integer =
              ccall('signed int (*) (const char*restrict , ...)', a_984, a_990,
              [('signed int', a_989)]) in
            let strong _: (unit,unit) =
              unseq(kill('char*', a_990), kill('signed int', a_989)) in
            pure(a_1006)
      ) in
    pure(Unit) ;
    kill('uintptr_t', v) ;
    pure(Unit)
  else
    let strong _: loaded integer =
      {- §6.5#2 -}
      bound(
        {- §6.5.2.2#10, sentence 1 -}
        let strong ((a_1008: loaded pointer,
        (a_1009: ctype, a_1010: [ctype], a_1011: boolean, a_1012: boolean)),
        a_1014: loaded pointer) =
          {- §6.5.2.2#4, sentence 2 -}
          unseq(
            let strong a_1007: loaded pointer =
              pure(Specified(Cfunction(printf_proxy))) in
            pure((a_1007, cfunction(a_1007)))
          ,
            let weak a_1016: pointer = pure(a_1015) in
            {- §6.3.2.1#3 -}
            let weak a_1017: pointer =
              memop(PtrArrayShift, a_1016, 'char', 0) in
            pure(Specified(a_1017))
          ) in
        if not(params_length(a_1010) <= 1) then
          pure(undef(<<UB038_number_of_args>>))
        else
          if not(a_1011) \/ not(are_compatible ('signed int', a_1009)) then
            pure(undef(<<UB041_function_not_compatible>>))
          else
            let strong a_1013: pointer =
              let a_1018: ctype = params_nth(a_1010, 0) in
              if not(are_compatible ('const char*', a_1018)) then
                pure(undef(<<UB041_function_not_compatible>>))
              else
                {- §6.5.2.2#7, sentence 1 -}
                let weak a_1019: pointer =
                  create(Ivalignof(a_1018), a_1018) in
                let weak _: unit = store(a_1018, a_1019, a_1014) in
                pure(a_1019) in
            let strong a_1020: loaded integer =
              ccall('signed int (*) (const char*restrict , ...)', a_1008,
              a_1013, []: (ctype,pointer)) in
            kill('char*', a_1013) ;
            pure(a_1020)
      ) in
    pure(Unit) ;
    pure(Unit) ;
  kill('size_t', half) ;
  kill('char*', p) ;
  kill('char*', q) ;
  pure(Unit) ;
  save ret_857: loaded integer (a_1021: loaded integer:= Specified(0)) in
    pure(a_1021)

