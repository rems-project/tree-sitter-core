-- Aggregates
def union _G_fpos64_t :=
  __opaque: 'char[16]'
  __lldata: 'signed long_long'
  __align: 'double'

-- Globals
glob x: pointer [ail_ctype = 'signed int'] :=
  let strong a_868: pointer = create(Ivalignof('signed int'), 'signed int') in
  let strong a_869: loaded integer =
    {- §6.5#2 -}
    bound(pure(Specified(1))) in
  store('signed int', a_868, conv_loaded_int('signed int', a_869)) ;
  pure(a_868)

glob y: pointer [ail_ctype = 'signed int'] :=
  let strong a_866: pointer = create(Ivalignof('signed int'), 'signed int') in
  let strong a_867: loaded integer =
    {- §6.5#2 -}
    bound(pure(Specified(2))) in
  store('signed int', a_866, conv_loaded_int('signed int', a_867)) ;
  pure(a_866)

glob a_756: pointer [ail_ctype = 'char[22]'] :=
  create_readonly(Ivalignof('char[22]'), 'char[22]', Specified(Array(Specified(conv_int('char',
  65)), Specified(conv_int('char', 100)), Specified(conv_int('char', 100)),
  Specified(conv_int('char', 114)), Specified(conv_int('char', 101)),
  Specified(conv_int('char', 115)), Specified(conv_int('char', 115)),
  Specified(conv_int('char', 101)), Specified(conv_int('char', 115)),
  Specified(conv_int('char', 58)), Specified(conv_int('char', 32)),
  Specified(conv_int('char', 112)), Specified(conv_int('char', 61)),
  Specified(conv_int('char', 37)), Specified(conv_int('char', 112)),
  Specified(conv_int('char', 32)), Specified(conv_int('char', 113)),
  Specified(conv_int('char', 61)), Specified(conv_int('char', 37)),
  Specified(conv_int('char', 112)), Specified(conv_int('char', 10)),
  Specified(0))))

glob a_844: pointer [ail_ctype = 'char[13]'] :=
  create_readonly(Ivalignof('char[13]'), 'char[13]', Specified(Array(Specified(conv_int('char',
  40)), Specified(conv_int('char', 112)), Specified(conv_int('char', 61)),
  Specified(conv_int('char', 61)), Specified(conv_int('char', 113)),
  Specified(conv_int('char', 41)), Specified(conv_int('char', 32)),
  Specified(conv_int('char', 61)), Specified(conv_int('char', 32)),
  Specified(conv_int('char', 37)), Specified(conv_int('char', 115)),
  Specified(conv_int('char', 10)), Specified(0))))

glob a_856: pointer [ail_ctype = 'char[5]'] :=
  create_readonly(Ivalignof('char[5]'), 'char[5]', Specified(Array(Specified(conv_int('char',
  116)), Specified(conv_int('char', 114)), Specified(conv_int('char', 117)),
  Specified(conv_int('char', 101)), Specified(0))))

glob a_859: pointer [ail_ctype = 'char[6]'] :=
  create_readonly(Ivalignof('char[6]'), 'char[6]', Specified(Array(Specified(conv_int('char',
  102)), Specified(conv_int('char', 97)), Specified(conv_int('char', 108)),
  Specified(conv_int('char', 115)), Specified(conv_int('char', 101)),
  Specified(0))))

-- Fun map
proc f (p: pointer, q: pointer): eff unit :=
  let strong a_794: loaded integer =
    {- §6.5#2 -}
    bound(
      let weak (a_796: loaded integer, a_797: loaded integer) =
        unseq(
          let weak (a_801: loaded integer, a_802: loaded integer) =
            unseq(
              {- §6.5.2.2#10, sentence 1 -}
              let strong ((a_807: loaded pointer,
              (a_808: ctype, a_809: [ctype], a_810: boolean, a_811: boolean)),
              a_815: loaded pointer, a_817: loaded pointer,
              a_819: loaded integer) =
                {- §6.5.2.2#4, sentence 2 -}
                unseq(
                  let strong a_806: loaded pointer =
                    pure(Specified(Cfunction(memcmp_proxy))) in
                  pure((a_806, cfunction(a_806)))
                ,
                  {- §6.5.3.2#3, sentence 5 -}
                  let weak a_816: pointer = pure(p) in
                  pure(Specified(a_816))
                ,
                  {- §6.5.3.2#3, sentence 5 -}
                  let weak a_818: pointer = pure(q) in
                  pure(Specified(a_818))
                ,
                  pure(Specified(Ivsizeof('signed int*')))
                ) in
              if not(params_length(a_809) = 3) then
                pure(undef(<<UB038_number_of_args>>))
              else
                if a_810 \/ not(are_compatible ('signed int', a_808)) then
                  pure(undef(<<UB041_function_not_compatible>>))
                else
                  let strong a_814: pointer =
                    let a_820: ctype = params_nth(a_809, 0) in
                    if not(are_compatible ('const void*', a_820)) then
                      pure(undef(<<UB041_function_not_compatible>>))
                    else
                      {- §6.5.2.2#7, sentence 1 -}
                      let weak a_821: pointer =
                        create(Ivalignof(a_820), a_820) in
                      let weak _: unit = store(a_820, a_821, a_815) in
                      pure(a_821) in
                  let strong a_813: pointer =
                    let a_822: ctype = params_nth(a_809, 1) in
                    if not(are_compatible ('const void*', a_822)) then
                      pure(undef(<<UB041_function_not_compatible>>))
                    else
                      {- §6.5.2.2#7, sentence 1 -}
                      let weak a_823: pointer =
                        create(Ivalignof(a_822), a_822) in
                      let weak _: unit = store(a_822, a_823, a_817) in
                      pure(a_823) in
                  let strong a_812: pointer =
                    let a_824: ctype = params_nth(a_809, 2) in
                    if not(are_compatible ('size_t', a_824)) then
                      pure(undef(<<UB041_function_not_compatible>>))
                    else
                      {- §6.5.2.2#7, sentence 1 -}
                      let weak a_825: pointer =
                        create(Ivalignof(a_824), a_824) in
                      let weak _: unit =
                        store(a_824, a_825, conv_loaded_int(a_824, a_819)) in
                      pure(a_825) in
                  let strong a_826: loaded integer =
                    ccall('signed int (*) (const void*, const void*, size_t)',
                    a_807, a_814, a_813, a_812) in
                  let strong _: (unit,unit,unit) =
                    unseq(
                      kill('void*', a_814)
                    ,
                      kill('void*', a_813)
                    ,
                      kill('size_t', a_812)
                    ) in
                  pure(a_826)
            ,
              pure(Specified(0))
            ) in
          pure(
            let (Specified(a_803: integer), Specified(a_804: integer)) =
              (a_801, a_802) in
            if conv_int('signed int', a_803) = conv_int('signed int', a_804) then
              Specified(1)
            else
              Specified(0)
          )
        ,
          pure(Specified(0))
        ) in
      pure(
        let (Specified(a_798: integer), Specified(a_799: integer)) =
          (a_796, a_797) in
        if conv_int('signed int', a_798) = conv_int('signed int', a_799) then
          Specified(1)
        else
          Specified(0)
      )
    ) in
  let strong a_793: boolean =
    let Specified(a_795: integer) = a_794 in
    pure(if not(a_795 = 1) then True else False) in
  if a_793 then
    let strong b: pointer = create(Ivalignof('_Bool'), '_Bool') in
    let strong a_828: loaded integer =
      {- §6.5#2 -}
      bound(
        let weak (a_829: loaded pointer, a_830: loaded pointer) =
          unseq(
            let weak a_834: pointer = pure(p) in
            load('signed int*', a_834)
          ,
            let weak a_835: pointer = pure(q) in
            load('signed int*', a_835)
          ) in
        let (Specified(a_831: pointer), Specified(a_832: pointer)) =
          (a_829, a_830) in
        let weak a_833: boolean = memop(PtrEq, a_831, a_832) in
        pure(if a_833 then Specified(1) else Specified(0))
      ) in
    store('_Bool', b, conv_loaded_int('_Bool', a_828)) ;
    let strong _: loaded integer =
      {- §6.5#2 -}
      bound(
        {- §6.5.2.2#10, sentence 1 -}
        let strong ((a_836: loaded pointer,
        (a_837: ctype, a_838: [ctype], a_839: boolean, a_840: boolean)),
        a_843: loaded pointer, a_847: loaded pointer) =
          {- §6.5.2.2#4, sentence 2 -}
          unseq(
            let strong a_827: loaded pointer =
              pure(Specified(Cfunction(printf_proxy))) in
            pure((a_827, cfunction(a_827)))
          ,
            let weak a_845: pointer = pure(a_844) in
            {- §6.3.2.1#3 -}
            let weak a_846: pointer =
              memop(PtrArrayShift, a_845, 'char', 0) in
            pure(Specified(a_846))
          ,
            {- §6.5.15#4, sentence 1 -}
            let strong a_854: loaded integer =
              let weak (a_848: loaded integer, a_849: loaded integer) =
                unseq(
                  let weak a_853: pointer = pure(b) in
                  load('_Bool', a_853)
                ,
                  pure(Specified(0))
                ) in
              pure(
                let (Specified(a_850: integer), Specified(a_851: integer)) =
                  (a_848, a_849) in
                if conv_int('signed int', a_850) =
                conv_int('signed int', a_851) then
                  Specified(1)
                else
                  Specified(0)
              ) in
            let Specified(a_855: integer) = a_854 in
            {- §6.5.15#4, sentence 2 -}
            if a_855 = 0 then
              let weak a_857: pointer = pure(a_856) in
              {- §6.3.2.1#3 -}
              let weak a_858: pointer =
                memop(PtrArrayShift, a_857, 'char', 0) in
              pure(Specified(a_858))
            else
              let weak a_860: pointer = pure(a_859) in
              {- §6.3.2.1#3 -}
              let weak a_861: pointer =
                memop(PtrArrayShift, a_860, 'char', 0) in
              pure(Specified(a_861))
          ) in
        if not(params_length(a_838) <= 2) then
          pure(undef(<<UB038_number_of_args>>))
        else
          if not(a_839) \/ not(are_compatible ('signed int', a_837)) then
            pure(undef(<<UB041_function_not_compatible>>))
          else
            let strong a_842: pointer =
              let a_862: ctype = params_nth(a_838, 0) in
              if not(are_compatible ('const char*', a_862)) then
                pure(undef(<<UB041_function_not_compatible>>))
              else
                {- §6.5.2.2#7, sentence 1 -}
                let weak a_863: pointer = create(Ivalignof(a_862), a_862) in
                let weak _: unit = store(a_862, a_863, a_843) in
                pure(a_863) in
            let strong a_841: pointer =
              {- §6.5.2.2#7, sentences 2 and 3 -}
              pcall(create_and_store, 'char*', a_847) in
            let strong a_864: loaded integer =
              ccall('signed int (*) (const char*restrict , ...)', a_836, a_842,
              [('char*', a_841)]) in
            let strong _: (unit,unit) =
              unseq(kill('char*', a_842), kill('char*', a_841)) in
            pure(a_864)
      ) in
    pure(Unit) ;
    kill('_Bool', b) ;
    pure(Unit)
  else
    pure(Unit) ;
  pure(Unit) ;
  save ret_792: unit (a_865: unit:= Unit) in  pure(a_865)

proc main (): eff loaded integer :=
  let strong p: pointer = create(Ivalignof('signed int*'), 'signed int*') in
  let strong q: pointer = create(Ivalignof('signed int*'), 'signed int*') in
  let strong a_738: loaded pointer =
    {- §6.5#2 -}
    bound(
      {- §6.5.6 -}
      let weak (a_739: loaded pointer, a_741: loaded integer) =
        unseq(
          {- §6.5.3.2#3, sentence 5 -}
          let weak a_744: pointer = pure(x) in
          pure(Specified(a_744))
        ,
          pure(Specified(1))
        ) in
      let (Specified(a_740: pointer), Specified(a_742: integer)) =
        (a_739, a_741) in
      let weak a_743: pointer =
        memop(PtrArrayShift, a_740, 'signed int', a_742) in
      pure(Specified(a_743))
    ) in
  store('signed int*', p, a_738) ;
  let strong a_745: loaded pointer =
    {- §6.5#2 -}
    bound(
      {- §6.5.3.2#3, sentence 5 -}
      let weak a_746: pointer = pure(y) in
      pure(Specified(a_746))
    ) in
  store('signed int*', q, a_745) ;
  let strong _: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.2.2#10, sentence 1 -}
      let strong ((a_747: loaded pointer,
      (a_748: ctype, a_749: [ctype], a_750: boolean, a_751: boolean)),
      a_755: loaded pointer, a_759: loaded pointer, a_764: loaded pointer) =
        {- §6.5.2.2#4, sentence 2 -}
        unseq(
          let strong a_737: loaded pointer =
            pure(Specified(Cfunction(printf_proxy))) in
          pure((a_737, cfunction(a_737)))
        ,
          let weak a_757: pointer = pure(a_756) in
          {- §6.3.2.1#3 -}
          let weak a_758: pointer = memop(PtrArrayShift, a_757, 'char', 0) in
          pure(Specified(a_758))
        ,
          {- §6.5.4 -}
          let weak a_762: pointer = pure(p) in
          load('signed int*', a_762)
        ,
          {- §6.5.4 -}
          let weak a_767: pointer = pure(q) in
          load('signed int*', a_767)
        ) in
      if not(params_length(a_749) <= 3) then
        pure(undef(<<UB038_number_of_args>>))
      else
        if not(a_750) \/ not(are_compatible ('signed int', a_748)) then
          pure(undef(<<UB041_function_not_compatible>>))
        else
          let strong a_754: pointer =
            let a_769: ctype = params_nth(a_749, 0) in
            if not(are_compatible ('const char*', a_769)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_770: pointer = create(Ivalignof(a_769), a_769) in
              let weak _: unit = store(a_769, a_770, a_755) in
              pure(a_770) in
          let strong a_753: pointer =
            {- §6.5.2.2#7, sentences 2 and 3 -}
            pcall(create_and_store, 'void*', a_759) in
          let strong a_752: pointer =
            {- §6.5.2.2#7, sentences 2 and 3 -}
            pcall(create_and_store, 'void*', a_764) in
          let strong a_771: loaded integer =
            ccall('signed int (*) (const char*restrict , ...)', a_747, a_754,
            [('void*', a_753), ('void*', a_752)]) in
          let strong _: (unit,unit,unit) =
            unseq(
              kill('char*', a_754)
            ,
              kill('void*', a_753)
            ,
              kill('void*', a_752)
            ) in
          pure(a_771)
    ) in
  pure(Unit) ;
  {- §6.5#2 -}
  bound(
    {- §6.5.2.2#10, sentence 1 -}
    let strong ((a_772: loaded pointer,
    (a_773: ctype, a_774: [ctype], a_775: boolean, a_776: boolean)),
    a_779: loaded pointer, a_781: loaded pointer) =
      {- §6.5.2.2#4, sentence 2 -}
      unseq(
        let strong a_736: loaded pointer = pure(Specified(Cfunction(f))) in
        pure((a_736, cfunction(a_736)))
      ,
        let weak a_780: pointer = pure(p) in
        load('signed int*', a_780)
      ,
        let weak a_782: pointer = pure(q) in
        load('signed int*', a_782)
      ) in
    if not(params_length(a_774) = 2) then
      pure(undef(<<UB038_number_of_args>>))
    else
      if a_775 \/ not(are_compatible ('void', a_773)) then
        pure(undef(<<UB041_function_not_compatible>>))
      else
        let strong a_778: pointer =
          let a_783: ctype = params_nth(a_774, 0) in
          if not(are_compatible ('signed int*', a_783)) then
            pure(undef(<<UB041_function_not_compatible>>))
          else
            {- §6.5.2.2#7, sentence 1 -}
            let weak a_784: pointer = create(Ivalignof(a_783), a_783) in
            let weak _: unit = store(a_783, a_784, a_779) in
            pure(a_784) in
        let strong a_777: pointer =
          let a_785: ctype = params_nth(a_774, 1) in
          if not(are_compatible ('signed int*', a_785)) then
            pure(undef(<<UB041_function_not_compatible>>))
          else
            {- §6.5.2.2#7, sentence 1 -}
            let weak a_786: pointer = create(Ivalignof(a_785), a_785) in
            let weak _: unit = store(a_785, a_786, a_781) in
            pure(a_786) in
        let strong a_787: unit =
          ccall('void (*) (signed int*, signed int*)', a_772, a_778, a_777) in
        let strong _: (unit,unit) =
          unseq(kill('signed int*', a_778), kill('signed int*', a_777)) in
        pure(a_787)
  ) ;
  pure(Unit) ;
  let strong a_788: loaded integer =
    {- §6.5#2 -}
    bound(pure(Specified(0))) in
  kill('signed int*', p) ;
  kill('signed int*', q) ;
  run ret_735(conv_loaded_int('signed int', a_788)) ;
  kill('signed int*', p) ;
  kill('signed int*', q) ;
  pure(Unit) ;
  save ret_735: loaded integer (a_789: loaded integer:= Specified(0)) in
    pure(a_789)

