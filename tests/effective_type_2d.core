-- Aggregates
def union _G_fpos64_t :=
  __opaque: 'char[16]'
  __lldata: 'signed long_long'
  __align: 'double'

def struct div :=
  quot: 'signed int'
  rem: 'signed int'

def struct ldiv :=
  quot: 'signed long'
  rem: 'signed long'

def struct lldiv :=
  quot: 'signed long_long'
  rem: 'signed long_long'

def struct __cerbty_unnamed_tag_745 :=
  i1: 'signed int'

def struct __cerbty_unnamed_tag_747 :=
  i2: 'signed int'

-- Globals
glob a_811: pointer [ail_ctype = 'char[6]'] :=
  create_readonly(Ivalignof('char[6]'), 'char[6]', Specified(Array(Specified(conv_int('char',
  105)), Specified(conv_int('char', 61)), Specified(conv_int('char', 37)),
  Specified(conv_int('char', 105)), Specified(conv_int('char', 10)),
  Specified(0))))

-- Fun map
proc main (): eff loaded integer :=
  let strong a_780: pointer =
    create(Ivalignof('struct __cerbty_unnamed_tag_745'), 'struct __cerbty_unnamed_tag_745') in
  let strong p: pointer = create(Ivalignof('void*'), 'void*') in
  let strong p1: pointer =
    create(Ivalignof('struct __cerbty_unnamed_tag_745*'), 'struct __cerbty_unnamed_tag_745*') in
  let strong p2: pointer =
    create(Ivalignof('struct __cerbty_unnamed_tag_747*'), 'struct __cerbty_unnamed_tag_747*') in
  let strong pi: pointer = create(Ivalignof('signed int*'), 'signed int*') in
  let strong i: pointer = create(Ivalignof('signed int'), 'signed int') in
  let strong a_759: loaded pointer =
    {- §6.5#2 -}
    bound(
      {- §6.5.2.2#10, sentence 1 -}
      let strong ((a_761: loaded pointer,
      (a_762: ctype, a_763: [ctype], a_764: boolean, a_765: boolean)),
      a_767: loaded integer) =
        {- §6.5.2.2#4, sentence 2 -}
        unseq(
          let strong a_760: loaded pointer =
            pure(Specified(Cfunction(malloc_proxy))) in
          pure((a_760, cfunction(a_760)))
        ,
          pure(Specified(Ivsizeof('struct __cerbty_unnamed_tag_745')))
        ) in
      if not(params_length(a_763) = 1) then
        pure(undef(<<UB038_number_of_args>>))
      else
        if a_764 \/ not(are_compatible ('void*', a_762)) then
          pure(undef(<<UB041_function_not_compatible>>))
        else
          let strong a_766: pointer =
            let a_768: ctype = params_nth(a_763, 0) in
            if not(are_compatible ('size_t', a_768)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_769: pointer = create(Ivalignof(a_768), a_768) in
              let weak _: unit =
                store(a_768, a_769, conv_loaded_int(a_768, a_767)) in
              pure(a_769) in
          let strong a_770: loaded pointer =
            ccall('void* (*) (size_t)', a_761, a_766) in
          kill('size_t', a_766) ;
          pure(a_770)
    ) in
  store('void*', p, a_759) ;
  let strong a_771: loaded pointer =
    {- §6.5#2 -}
    bound(
      {- §6.5.4 -}
      let weak a_772: loaded pointer =
        let weak a_774: pointer = pure(p) in
        load('void*', a_774) in
      let Specified(a_773: pointer) = a_772 in
      let weak a_775: boolean =
        memop(PtrWellAligned, 'struct __cerbty_unnamed_tag_745', a_773) in
      pure(
        Specified(if a_775 then
          a_773
        else
          undef(<<UB025_misaligned_pointer_conversion>>))
      )
    ) in
  store('struct __cerbty_unnamed_tag_745*', p1, a_771) ;
  let strong _: loaded struct a_745 =
    {- §6.5#2 -}
    bound(
      {- §6.5.16#3, sentence 4 -}
      let weak (a_758: pointer, a_784: loaded struct a_745) =
        {- §6.5.16#3, sentence 5 -}
        unseq(
          {- §6.5.3.2 -}
          let weak a_776: loaded pointer =
            let weak a_779: pointer = pure(p1) in
            load('struct __cerbty_unnamed_tag_745*', a_779) in
          let Specified(a_777: pointer) = a_776 in
          let weak a_778: boolean =
            memop(PtrValidForDeref, 'struct __cerbty_unnamed_tag_745', a_777) in
          pure(
            if a_778 then
              a_777
            else
              undef(<<UB043_indirection_invalid_value>>)
          )
        ,
          let weak a_783: pointer =
            let weak a_781: loaded struct a_745 =
              let weak a_782: loaded integer = pure(Specified(1)) in
              pure(
                Specified((struct __cerbty_unnamed_tag_745){.i1= conv_loaded_int('signed int',
                a_782)})
              ) in
            let weak _: unit =
              store('struct __cerbty_unnamed_tag_745', a_780, a_781) in
            pure(a_780) in
          load('struct __cerbty_unnamed_tag_745', a_783)
        ) in
      let weak _: unit =
        {- §6.5.16.1#2, store -}
        neg(store('struct __cerbty_unnamed_tag_745', a_758, a_784)) in
      pure(a_784)
    ) in
  pure(Unit) ;
  let strong a_785: loaded pointer =
    {- §6.5#2 -}
    bound(
      {- §6.5.4 -}
      let weak a_786: loaded pointer =
        let weak a_788: pointer = pure(p) in
        load('void*', a_788) in
      let Specified(a_787: pointer) = a_786 in
      let weak a_789: boolean =
        memop(PtrWellAligned, 'struct __cerbty_unnamed_tag_747', a_787) in
      pure(
        Specified(if a_789 then
          a_787
        else
          undef(<<UB025_misaligned_pointer_conversion>>))
      )
    ) in
  store('struct __cerbty_unnamed_tag_747*', p2, a_785) ;
  let strong a_790: loaded pointer =
    {- §6.5#2 -}
    bound(
      {- §6.5.3.2#3, sentence 5 -}
      let weak a_791: pointer =
        {- §6.5.2.3#4, sentence 2 -}
        let strong a_792: loaded pointer =
          let weak a_796: pointer = pure(p2) in
          load('struct __cerbty_unnamed_tag_747*', a_796) in
        let Specified(a_793: pointer) = a_792 in
        let weak a_794: boolean =
          memop(PtrValidForDeref, 'struct __cerbty_unnamed_tag_747', a_793) in
        pure(
          if a_794 then
            member_shift(a_793, __cerbty_unnamed_tag_747, .i2)
          else
            undef(<<UB043_indirection_invalid_value>>)
        ) in
      pure(Specified(a_791))
    ) in
  store('signed int*', pi, a_790) ;
  let strong a_797: loaded integer =
    {- §6.5#2 -}
    bound(
      let weak a_802: pointer =
        {- §6.5.3.2 -}
        let weak a_798: loaded pointer =
          let weak a_801: pointer = pure(pi) in
          load('signed int*', a_801) in
        let Specified(a_799: pointer) = a_798 in
        let weak a_800: boolean =
          memop(PtrValidForDeref, 'signed int', a_799) in
        pure(
          if a_800 then a_799 else undef(<<UB043_indirection_invalid_value>>)
        ) in
      load('signed int', a_802)
    ) in
  store('signed int', i, conv_loaded_int('signed int', a_797)) ;
  let strong _: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.2.2#10, sentence 1 -}
      let strong ((a_803: loaded pointer,
      (a_804: ctype, a_805: [ctype], a_806: boolean, a_807: boolean)),
      a_810: loaded pointer, a_814: loaded integer) =
        {- §6.5.2.2#4, sentence 2 -}
        unseq(
          let strong a_757: loaded pointer =
            pure(Specified(Cfunction(printf_proxy))) in
          pure((a_757, cfunction(a_757)))
        ,
          let weak a_812: pointer = pure(a_811) in
          {- §6.3.2.1#3 -}
          let weak a_813: pointer = memop(PtrArrayShift, a_812, 'char', 0) in
          pure(Specified(a_813))
        ,
          let weak a_815: pointer = pure(i) in
          load('signed int', a_815)
        ) in
      if not(params_length(a_805) <= 2) then
        pure(undef(<<UB038_number_of_args>>))
      else
        if not(a_806) \/ not(are_compatible ('signed int', a_804)) then
          pure(undef(<<UB041_function_not_compatible>>))
        else
          let strong a_809: pointer =
            let a_816: ctype = params_nth(a_805, 0) in
            if not(are_compatible ('const char*', a_816)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_817: pointer = create(Ivalignof(a_816), a_816) in
              let weak _: unit = store(a_816, a_817, a_810) in
              pure(a_817) in
          let strong a_808: pointer =
            {- §6.5.2.2#7, sentences 2 and 3 -}
            pcall(create_and_store, 'signed int',
            conv_loaded_int('signed int', a_814)) in
          let strong a_818: loaded integer =
            ccall('signed int (*) (const char*restrict , ...)', a_803, a_809,
            [('signed int', a_808)]) in
          let strong _: (unit,unit) =
            unseq(kill('char*', a_809), kill('signed int', a_808)) in
          pure(a_818)
    ) in
  pure(Unit) ;
  kill('void*', p) ;
  kill('struct __cerbty_unnamed_tag_745*', p1) ;
  kill('struct __cerbty_unnamed_tag_747*', p2) ;
  kill('signed int*', pi) ;
  kill('signed int', i) ;
  kill('struct __cerbty_unnamed_tag_745', a_780) ;
  pure(Unit) ;
  save ret_756: loaded integer (a_819: loaded integer:= Specified(0)) in
    pure(a_819)

