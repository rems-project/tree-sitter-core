-- Aggregates
def union _G_fpos64_t :=
  __opaque: 'char[16]'
  __lldata: 'signed long_long'
  __align: 'double'

def union a_union :=
  i: 'signed int'
  d: 'double'

-- Globals
glob a_672: pointer [ail_ctype = 'char[6]'] :=
  create_readonly(Ivalignof('char[6]'), 'char[6]', Specified(Array(Specified(conv_int('char',
  106)), Specified(conv_int('char', 61)), Specified(conv_int('char', 37)),
  Specified(conv_int('char', 100)), Specified(conv_int('char', 10)),
  Specified(0))))

-- Fun map
proc main (): eff loaded integer :=
  let strong d: pointer = create(Ivalignof('double'), 'double') in
  let strong j: pointer = create(Ivalignof('signed int'), 'signed int') in
  let strong a_653: loaded floating =
    {- §6.5#2 -}
    bound(pure(Specified(3.1415))) in
  store('double', d, a_653) ;
  let strong a_654: loaded integer =
    {- §6.5#2 -}
    bound(
      let weak a_663: pointer =
        {- §6.5.2.3#4, sentence 2 -}
        let strong a_655: loaded pointer =
          {- §6.5.4 -}
          let weak a_659: loaded pointer =
            {- §6.5.3.2#3, sentence 5 -}
            let weak a_661: pointer = pure(d) in
            pure(Specified(a_661)) in
          let Specified(a_660: pointer) = a_659 in
          let weak a_662: boolean =
            memop(PtrWellAligned, 'union a_union', a_660) in
          pure(
            Specified(if a_662 then
              a_660
            else
              undef(<<UB025_misaligned_pointer_conversion>>))
          ) in
        let Specified(a_656: pointer) = a_655 in
        let weak a_657: boolean =
          memop(PtrValidForDeref, 'union a_union', a_656) in
        pure(
          if a_657 then
            member_shift(a_656, a_union, .i)
          else
            undef(<<UB043_indirection_invalid_value>>)
        ) in
      load('signed int', a_663)
    ) in
  store('signed int', j, conv_loaded_int('signed int', a_654)) ;
  let strong _: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.2.2#10, sentence 1 -}
      let strong ((a_664: loaded pointer,
      (a_665: ctype, a_666: [ctype], a_667: boolean, a_668: boolean)),
      a_671: loaded pointer, a_675: loaded integer) =
        {- §6.5.2.2#4, sentence 2 -}
        unseq(
          let strong a_652: loaded pointer =
            pure(Specified(Cfunction(printf_proxy))) in
          pure((a_652, cfunction(a_652)))
        ,
          let weak a_673: pointer = pure(a_672) in
          {- §6.3.2.1#3 -}
          let weak a_674: pointer = memop(PtrArrayShift, a_673, 'char', 0) in
          pure(Specified(a_674))
        ,
          let weak a_676: pointer = pure(j) in
          load('signed int', a_676)
        ) in
      if not(params_length(a_666) <= 2) then
        pure(undef(<<UB038_number_of_args>>))
      else
        if not(a_667) \/ not(are_compatible ('signed int', a_665)) then
          pure(undef(<<UB041_function_not_compatible>>))
        else
          let strong a_670: pointer =
            let a_677: ctype = params_nth(a_666, 0) in
            if not(are_compatible ('const char*', a_677)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_678: pointer = create(Ivalignof(a_677), a_677) in
              let weak _: unit = store(a_677, a_678, a_671) in
              pure(a_678) in
          let strong a_669: pointer =
            {- §6.5.2.2#7, sentences 2 and 3 -}
            pcall(create_and_store, 'signed int',
            conv_loaded_int('signed int', a_675)) in
          let strong a_679: loaded integer =
            ccall('signed int (*) (const char*restrict , ...)', a_664, a_670,
            [('signed int', a_669)]) in
          let strong _: (unit,unit) =
            unseq(kill('char*', a_670), kill('signed int', a_669)) in
          pure(a_679)
    ) in
  pure(Unit) ;
  kill('double', d) ;
  kill('signed int', j) ;
  pure(Unit) ;
  save ret_651: loaded integer (a_680: loaded integer:= Specified(0)) in
    pure(a_680)

