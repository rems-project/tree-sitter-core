-- Aggregates
def union _G_fpos64_t :=
  __opaque: 'char[16]'
  __lldata: 'signed long_long'
  __align: 'double'

def struct div :=
  quot: 'signed int'
  rem: 'signed int'

def struct ldiv :=
  quot: 'signed long'
  rem: 'signed long'

def struct lldiv :=
  quot: 'signed long_long'
  rem: 'signed long_long'

-- Globals
glob a_910: pointer [ail_ctype = 'char[6]'] :=
  create_readonly(Ivalignof('char[6]'), 'char[6]', Specified(Array(Specified(conv_int('char',
  106)), Specified(conv_int('char', 61)), Specified(conv_int('char', 37)),
  Specified(conv_int('char', 100)), Specified(conv_int('char', 10)),
  Specified(0))))

-- Fun map
proc main (): eff loaded integer :=
  let strong o: pointer = create(Ivalignof('void*'), 'void*') in
  let strong p: pointer = create(Ivalignof('void*'), 'void*') in
  let strong q: pointer = create(Ivalignof('signed int*'), 'signed int*') in
  let strong j: pointer = create(Ivalignof('signed int'), 'signed int') in
  let strong a_833: loaded pointer =
    {- §6.5#2 -}
    bound(
      {- §6.5.2.2#10, sentence 1 -}
      let strong ((a_835: loaded pointer,
      (a_836: ctype, a_837: [ctype], a_838: boolean, a_839: boolean)),
      a_841: loaded integer) =
        {- §6.5.2.2#4, sentence 2 -}
        unseq(
          let strong a_834: loaded pointer =
            pure(Specified(Cfunction(malloc_proxy))) in
          pure((a_834, cfunction(a_834)))
        ,
          pure(Specified(Ivsizeof('signed int')))
        ) in
      if not(params_length(a_837) = 1) then
        pure(undef(<<UB038_number_of_args>>))
      else
        if a_838 \/ not(are_compatible ('void*', a_836)) then
          pure(undef(<<UB041_function_not_compatible>>))
        else
          let strong a_840: pointer =
            let a_842: ctype = params_nth(a_837, 0) in
            if not(are_compatible ('size_t', a_842)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_843: pointer = create(Ivalignof(a_842), a_842) in
              let weak _: unit =
                store(a_842, a_843, conv_loaded_int(a_842, a_841)) in
              pure(a_843) in
          let strong a_844: loaded pointer =
            ccall('void* (*) (size_t)', a_835, a_840) in
          kill('size_t', a_840) ;
          pure(a_844)
    ) in
  store('void*', o, a_833) ;
  let strong _: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.16#3, sentence 4 -}
      let weak (a_832: pointer, a_852: loaded integer) =
        {- §6.5.16#3, sentence 5 -}
        unseq(
          {- §6.5.3.2 -}
          let weak a_845: loaded pointer =
            {- §6.5.4 -}
            let weak a_848: loaded pointer =
              let weak a_850: pointer = pure(o) in
              load('void*', a_850) in
            let Specified(a_849: pointer) = a_848 in
            let weak a_851: boolean =
              memop(PtrWellAligned, 'signed int', a_849) in
            pure(
              Specified(if a_851 then
                a_849
              else
                undef(<<UB025_misaligned_pointer_conversion>>))
            ) in
          let Specified(a_846: pointer) = a_845 in
          let weak a_847: boolean =
            memop(PtrValidForDeref, 'signed int', a_846) in
          pure(
            if a_847 then
              a_846
            else
              undef(<<UB043_indirection_invalid_value>>)
          )
        ,
          pure(Specified(1))
        ) in
      let weak _: unit =
        {- §6.5.16.1#2, store -}
        neg(store('signed int', a_832, conv_loaded_int('signed int', a_852))) in
      pure(conv_loaded_int('signed int', a_852))
    ) in
  pure(Unit) ;
  let strong a_853: loaded pointer =
    {- §6.5#2 -}
    bound(
      {- §6.5.2.2#10, sentence 1 -}
      let strong ((a_855: loaded pointer,
      (a_856: ctype, a_857: [ctype], a_858: boolean, a_859: boolean)),
      a_861: loaded integer) =
        {- §6.5.2.2#4, sentence 2 -}
        unseq(
          let strong a_854: loaded pointer =
            pure(Specified(Cfunction(malloc_proxy))) in
          pure((a_854, cfunction(a_854)))
        ,
          pure(Specified(Ivsizeof('signed int')))
        ) in
      if not(params_length(a_857) = 1) then
        pure(undef(<<UB038_number_of_args>>))
      else
        if a_858 \/ not(are_compatible ('void*', a_856)) then
          pure(undef(<<UB041_function_not_compatible>>))
        else
          let strong a_860: pointer =
            let a_862: ctype = params_nth(a_857, 0) in
            if not(are_compatible ('size_t', a_862)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_863: pointer = create(Ivalignof(a_862), a_862) in
              let weak _: unit =
                store(a_862, a_863, conv_loaded_int(a_862, a_861)) in
              pure(a_863) in
          let strong a_864: loaded pointer =
            ccall('void* (*) (size_t)', a_855, a_860) in
          kill('size_t', a_860) ;
          pure(a_864)
    ) in
  store('void*', p, a_853) ;
  let strong _: loaded pointer =
    {- §6.5#2 -}
    bound(
      {- §6.5.2.2#10, sentence 1 -}
      let strong ((a_865: loaded pointer,
      (a_866: ctype, a_867: [ctype], a_868: boolean, a_869: boolean)),
      a_873: loaded pointer, a_878: loaded pointer, a_883: loaded integer) =
        {- §6.5.2.2#4, sentence 2 -}
        unseq(
          let strong a_831: loaded pointer =
            pure(Specified(Cfunction(memcpy_proxy))) in
          pure((a_831, cfunction(a_831)))
        ,
          {- §6.5.4 -}
          let weak a_876: pointer = pure(p) in
          load('void*', a_876)
        ,
          {- §6.5.4 -}
          let weak a_881: pointer = pure(o) in
          load('void*', a_881)
        ,
          pure(Specified(Ivsizeof('signed int')))
        ) in
      if not(params_length(a_867) = 3) then
        pure(undef(<<UB038_number_of_args>>))
      else
        if a_868 \/ not(are_compatible ('void*', a_866)) then
          pure(undef(<<UB041_function_not_compatible>>))
        else
          let strong a_872: pointer =
            let a_884: ctype = params_nth(a_867, 0) in
            if not(are_compatible ('void*', a_884)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_885: pointer = create(Ivalignof(a_884), a_884) in
              let weak _: unit = store(a_884, a_885, a_873) in
              pure(a_885) in
          let strong a_871: pointer =
            let a_886: ctype = params_nth(a_867, 1) in
            if not(are_compatible ('const void*', a_886)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_887: pointer = create(Ivalignof(a_886), a_886) in
              let weak _: unit = store(a_886, a_887, a_878) in
              pure(a_887) in
          let strong a_870: pointer =
            let a_888: ctype = params_nth(a_867, 2) in
            if not(are_compatible ('size_t', a_888)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_889: pointer = create(Ivalignof(a_888), a_888) in
              let weak _: unit =
                store(a_888, a_889, conv_loaded_int(a_888, a_883)) in
              pure(a_889) in
          let strong a_890: loaded pointer =
            ccall('void* (*) (void*restrict , const void*restrict , size_t)',
            a_865, a_872, a_871, a_870) in
          let strong _: (unit,unit,unit) =
            unseq(
              kill('void*', a_872)
            ,
              kill('void*', a_871)
            ,
              kill('size_t', a_870)
            ) in
          pure(a_890)
    ) in
  pure(Unit) ;
  let strong a_891: loaded pointer =
    {- §6.5#2 -}
    bound(
      {- §6.5.4 -}
      let weak a_892: loaded pointer =
        let weak a_894: pointer = pure(p) in
        load('void*', a_894) in
      let Specified(a_893: pointer) = a_892 in
      let weak a_895: boolean = memop(PtrWellAligned, 'signed int', a_893) in
      pure(
        Specified(if a_895 then
          a_893
        else
          undef(<<UB025_misaligned_pointer_conversion>>))
      )
    ) in
  store('signed int*', q, a_891) ;
  let strong a_896: loaded integer =
    {- §6.5#2 -}
    bound(
      let weak a_901: pointer =
        {- §6.5.3.2 -}
        let weak a_897: loaded pointer =
          let weak a_900: pointer = pure(q) in
          load('signed int*', a_900) in
        let Specified(a_898: pointer) = a_897 in
        let weak a_899: boolean =
          memop(PtrValidForDeref, 'signed int', a_898) in
        pure(
          if a_899 then a_898 else undef(<<UB043_indirection_invalid_value>>)
        ) in
      load('signed int', a_901)
    ) in
  store('signed int', j, conv_loaded_int('signed int', a_896)) ;
  let strong _: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.2.2#10, sentence 1 -}
      let strong ((a_902: loaded pointer,
      (a_903: ctype, a_904: [ctype], a_905: boolean, a_906: boolean)),
      a_909: loaded pointer, a_913: loaded integer) =
        {- §6.5.2.2#4, sentence 2 -}
        unseq(
          let strong a_830: loaded pointer =
            pure(Specified(Cfunction(printf_proxy))) in
          pure((a_830, cfunction(a_830)))
        ,
          let weak a_911: pointer = pure(a_910) in
          {- §6.3.2.1#3 -}
          let weak a_912: pointer = memop(PtrArrayShift, a_911, 'char', 0) in
          pure(Specified(a_912))
        ,
          let weak a_914: pointer = pure(j) in
          load('signed int', a_914)
        ) in
      if not(params_length(a_904) <= 2) then
        pure(undef(<<UB038_number_of_args>>))
      else
        if not(a_905) \/ not(are_compatible ('signed int', a_903)) then
          pure(undef(<<UB041_function_not_compatible>>))
        else
          let strong a_908: pointer =
            let a_915: ctype = params_nth(a_904, 0) in
            if not(are_compatible ('const char*', a_915)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_916: pointer = create(Ivalignof(a_915), a_915) in
              let weak _: unit = store(a_915, a_916, a_909) in
              pure(a_916) in
          let strong a_907: pointer =
            {- §6.5.2.2#7, sentences 2 and 3 -}
            pcall(create_and_store, 'signed int',
            conv_loaded_int('signed int', a_913)) in
          let strong a_917: loaded integer =
            ccall('signed int (*) (const char*restrict , ...)', a_902, a_908,
            [('signed int', a_907)]) in
          let strong _: (unit,unit) =
            unseq(kill('char*', a_908), kill('signed int', a_907)) in
          pure(a_917)
    ) in
  pure(Unit) ;
  kill('void*', o) ;
  kill('void*', p) ;
  kill('signed int*', q) ;
  kill('signed int', j) ;
  pure(Unit) ;
  save ret_829: loaded integer (a_918: loaded integer:= Specified(0)) in
    pure(a_918)

