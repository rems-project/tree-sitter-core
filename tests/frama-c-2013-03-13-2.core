-- Aggregates
def union _G_fpos64_t :=
  __opaque: 'char[16]'
  __lldata: 'signed long_long'
  __align: 'double'

-- Globals
glob a_688: pointer [ail_ctype = 'char[6]'] :=
  create_readonly(Ivalignof('char[6]'), 'char[6]', Specified(Array(Specified(conv_int('char',
  106)), Specified(conv_int('char', 58)), Specified(conv_int('char', 37)),
  Specified(conv_int('char', 117)), Specified(conv_int('char', 32)),
  Specified(0))))

glob a_704: pointer [ail_ctype = 'char[6]'] :=
  create_readonly(Ivalignof('char[6]'), 'char[6]', Specified(Array(Specified(conv_int('char',
  99)), Specified(conv_int('char', 58)), Specified(conv_int('char', 37)),
  Specified(conv_int('char', 100)), Specified(conv_int('char', 10)),
  Specified(0))))

-- Fun map
proc main (c: pointer, v: pointer): eff loaded integer :=
  let strong j: pointer = create(Ivalignof('unsigned int'), 'unsigned int') in
  {- §6.2.4#6 -}
  store('unsigned int', j, Unspecified('unsigned int')) ;
  let strong a_657: loaded integer =
    {- §6.5#2 -}
    bound(
      let weak (a_659: loaded integer, a_660: loaded integer) =
        unseq(
          let weak (a_664: loaded integer, a_665: loaded integer) =
            unseq(
              let weak a_669: pointer = pure(c) in
              load('signed int', a_669)
            ,
              pure(Specified(4))
            ) in
          pure(
            let (Specified(a_666: integer), Specified(a_667: integer)) =
              (a_664, a_665) in
            if conv_int('signed int', a_666) = conv_int('signed int', a_667) then
              Specified(1)
            else
              Specified(0)
          )
        ,
          pure(Specified(0))
        ) in
      pure(
        let (Specified(a_661: integer), Specified(a_662: integer)) =
          (a_659, a_660) in
        if conv_int('signed int', a_661) = conv_int('signed int', a_662) then
          Specified(1)
        else
          Specified(0)
      )
    ) in
  let strong a_656: boolean =
    let Specified(a_658: integer) = a_657 in
    pure(if not(a_658 = 1) then True else False) in
  if a_656 then
    let strong _: loaded integer =
      {- §6.5#2 -}
      bound(
        {- §6.5.16#3, sentence 4 -}
        let weak (a_670: pointer, a_671: loaded integer) =
          {- §6.5.16#3, sentence 5 -}
          unseq(pure(j), pure(Specified(1))) in
        let weak _: unit =
          {- §6.5.16.1#2, store -}
          neg(store('unsigned int', a_670,
          conv_loaded_int('unsigned int', a_671))) in
        pure(conv_loaded_int('unsigned int', a_671))
      ) in
    pure(Unit)
  else
    let strong _: loaded integer =
      {- §6.5#2 -}
      bound(
        {- §6.5.16#3, sentence 4 -}
        let weak (a_672: pointer, a_679: loaded integer) =
          {- §6.5.16#3, sentence 5 -}
          unseq(
            pure(j)
          ,
            {- §6.5.5 -}
            let weak (a_674: loaded integer, a_675: loaded integer) =
              unseq(
                let weak a_673: pointer = pure(j) in
                load('unsigned int', a_673)
              ,
                pure(Specified(2))
              ) in
            pure(
              let (Specified(a_676: integer), Specified(a_677: integer)) =
                (a_674, a_675) in
              Specified(wrapI('unsigned int',
              conv_int('unsigned int', a_676) *
              conv_int('unsigned int', a_677)))
            )
          ) in
        let weak _: unit =
          {- §6.5.16.1#2, store -}
          neg(store('unsigned int', a_672,
          conv_loaded_int('unsigned int', a_679))) in
        pure(conv_loaded_int('unsigned int', a_679))
      ) in
    pure(Unit) ;
  let strong _: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.2.2#10, sentence 1 -}
      let strong ((a_680: loaded pointer,
      (a_681: ctype, a_682: [ctype], a_683: boolean, a_684: boolean)),
      a_687: loaded pointer, a_691: loaded integer) =
        {- §6.5.2.2#4, sentence 2 -}
        unseq(
          let strong a_655: loaded pointer =
            pure(Specified(Cfunction(printf_proxy))) in
          pure((a_655, cfunction(a_655)))
        ,
          let weak a_689: pointer = pure(a_688) in
          {- §6.3.2.1#3 -}
          let weak a_690: pointer = memop(PtrArrayShift, a_689, 'char', 0) in
          pure(Specified(a_690))
        ,
          let weak a_692: pointer = pure(j) in
          load('unsigned int', a_692)
        ) in
      if not(params_length(a_682) <= 2) then
        pure(undef(<<UB038_number_of_args>>))
      else
        if not(a_683) \/ not(are_compatible ('signed int', a_681)) then
          pure(undef(<<UB041_function_not_compatible>>))
        else
          let strong a_686: pointer =
            let a_693: ctype = params_nth(a_682, 0) in
            if not(are_compatible ('const char*', a_693)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_694: pointer = create(Ivalignof(a_693), a_693) in
              let weak _: unit = store(a_693, a_694, a_687) in
              pure(a_694) in
          let strong a_685: pointer =
            {- §6.5.2.2#7, sentences 2 and 3 -}
            pcall(create_and_store, 'unsigned int',
            conv_loaded_int('unsigned int', a_691)) in
          let strong a_695: loaded integer =
            ccall('signed int (*) (const char*restrict , ...)', a_680, a_686,
            [('unsigned int', a_685)]) in
          let strong _: (unit,unit) =
            unseq(kill('char*', a_686), kill('unsigned int', a_685)) in
          pure(a_695)
    ) in
  pure(Unit) ;
  let strong _: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.2.2#10, sentence 1 -}
      let strong ((a_696: loaded pointer,
      (a_697: ctype, a_698: [ctype], a_699: boolean, a_700: boolean)),
      a_703: loaded pointer, a_707: loaded integer) =
        {- §6.5.2.2#4, sentence 2 -}
        unseq(
          let strong a_654: loaded pointer =
            pure(Specified(Cfunction(printf_proxy))) in
          pure((a_654, cfunction(a_654)))
        ,
          let weak a_705: pointer = pure(a_704) in
          {- §6.3.2.1#3 -}
          let weak a_706: pointer = memop(PtrArrayShift, a_705, 'char', 0) in
          pure(Specified(a_706))
        ,
          let weak a_708: pointer = pure(c) in
          load('signed int', a_708)
        ) in
      if not(params_length(a_698) <= 2) then
        pure(undef(<<UB038_number_of_args>>))
      else
        if not(a_699) \/ not(are_compatible ('signed int', a_697)) then
          pure(undef(<<UB041_function_not_compatible>>))
        else
          let strong a_702: pointer =
            let a_709: ctype = params_nth(a_698, 0) in
            if not(are_compatible ('const char*', a_709)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_710: pointer = create(Ivalignof(a_709), a_709) in
              let weak _: unit = store(a_709, a_710, a_703) in
              pure(a_710) in
          let strong a_701: pointer =
            {- §6.5.2.2#7, sentences 2 and 3 -}
            pcall(create_and_store, 'signed int',
            conv_loaded_int('signed int', a_707)) in
          let strong a_711: loaded integer =
            ccall('signed int (*) (const char*restrict , ...)', a_696, a_702,
            [('signed int', a_701)]) in
          let strong _: (unit,unit) =
            unseq(kill('char*', a_702), kill('signed int', a_701)) in
          pure(a_711)
    ) in
  pure(Unit) ;
  kill('unsigned int', j) ;
  pure(Unit) ;
  save ret_653: loaded integer (a_712: loaded integer:= Specified(0)) in
    pure(a_712)

