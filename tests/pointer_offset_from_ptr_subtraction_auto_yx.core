-- Aggregates
def union _G_fpos64_t :=
  __opaque: 'char[16]'
  __lldata: 'signed long_long'
  __align: 'double'

def struct __cerbty_unnamed_tag_726 :=
  __dummy_max_align_t: 'void*'

-- Globals
glob a_812: pointer [ail_ctype = 'char[18]'] :=
  create_readonly(Ivalignof('char[18]'), 'char[18]', Specified(Array(Specified(conv_int('char',
  121)), Specified(conv_int('char', 61)), Specified(conv_int('char', 37)),
  Specified(conv_int('char', 100)), Specified(conv_int('char', 32)),
  Specified(conv_int('char', 42)), Specified(conv_int('char', 113)),
  Specified(conv_int('char', 61)), Specified(conv_int('char', 37)),
  Specified(conv_int('char', 100)), Specified(conv_int('char', 32)),
  Specified(conv_int('char', 42)), Specified(conv_int('char', 114)),
  Specified(conv_int('char', 61)), Specified(conv_int('char', 37)),
  Specified(conv_int('char', 100)), Specified(conv_int('char', 10)),
  Specified(0))))

-- Fun map
proc main (): eff loaded integer :=
  let strong y: pointer = create(Ivalignof('signed int'), 'signed int') in
  let strong x: pointer = create(Ivalignof('signed int'), 'signed int') in
  let strong p: pointer = create(Ivalignof('signed int*'), 'signed int*') in
  let strong q: pointer = create(Ivalignof('signed int*'), 'signed int*') in
  let strong offset: pointer = create(Ivalignof('ptrdiff_t'), 'ptrdiff_t') in
  let strong r: pointer = create(Ivalignof('signed int*'), 'signed int*') in
  let strong a_740: loaded integer =
    {- §6.5#2 -}
    bound(pure(Specified(2))) in
  store('signed int', y, conv_loaded_int('signed int', a_740)) ;
  let strong a_741: loaded integer =
    {- §6.5#2 -}
    bound(pure(Specified(1))) in
  store('signed int', x, conv_loaded_int('signed int', a_741)) ;
  let strong a_742: loaded pointer =
    {- §6.5#2 -}
    bound(
      {- §6.5.3.2#3, sentence 5 -}
      let weak a_743: pointer = pure(x) in
      pure(Specified(a_743))
    ) in
  store('signed int*', p, a_742) ;
  let strong a_744: loaded pointer =
    {- §6.5#2 -}
    bound(
      {- §6.5.3.2#3, sentence 5 -}
      let weak a_745: pointer = pure(y) in
      pure(Specified(a_745))
    ) in
  store('signed int*', q, a_744) ;
  let strong a_746: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.6 -}
      let weak (a_749: loaded pointer, a_750: loaded pointer) =
        unseq(
          let weak a_747: pointer = pure(q) in
          load('signed int*', a_747)
        ,
          let weak a_748: pointer = pure(p) in
          load('signed int*', a_748)
        ) in
      let (Specified(a_751: pointer), Specified(a_752: pointer)) =
        (a_749, a_750) in
      let weak a_753: integer = memop(Ptrdiff, 'signed int', a_751, a_752) in
      pure(
        if is_representable_integer(a_753, 'ptrdiff_t') then
          Specified(a_753)
        else
          undef(<<UB050_pointers_subtraction_not_representable>>)
      )
    ) in
  store('ptrdiff_t', offset, conv_loaded_int('ptrdiff_t', a_746)) ;
  let strong a_754: loaded pointer =
    {- §6.5#2 -}
    bound(
      {- §6.5.6 -}
      let weak (a_755: loaded pointer, a_757: loaded integer) =
        unseq(
          let weak a_760: pointer = pure(p) in
          load('signed int*', a_760)
        ,
          let weak a_761: pointer = pure(offset) in
          load('ptrdiff_t', a_761)
        ) in
      let (Specified(a_756: pointer), Specified(a_758: integer)) =
        (a_755, a_757) in
      let weak a_759: pointer =
        memop(PtrArrayShift, a_756, 'signed int', a_758) in
      pure(Specified(a_759))
    ) in
  store('signed int*', r, a_754) ;
  let strong a_762: loaded integer =
    {- §6.5#2 -}
    bound(
      let weak (a_764: loaded integer, a_765: loaded integer) =
        unseq(
          let weak (a_769: loaded integer, a_770: loaded integer) =
            unseq(
              {- §6.5.2.2#10, sentence 1 -}
              let strong ((a_775: loaded pointer,
              (a_776: ctype, a_777: [ctype], a_778: boolean, a_779: boolean)),
              a_783: loaded pointer, a_785: loaded pointer,
              a_787: loaded integer) =
                {- §6.5.2.2#4, sentence 2 -}
                unseq(
                  let strong a_774: loaded pointer =
                    pure(Specified(Cfunction(memcmp_proxy))) in
                  pure((a_774, cfunction(a_774)))
                ,
                  {- §6.5.3.2#3, sentence 5 -}
                  let weak a_784: pointer = pure(r) in
                  pure(Specified(a_784))
                ,
                  {- §6.5.3.2#3, sentence 5 -}
                  let weak a_786: pointer = pure(q) in
                  pure(Specified(a_786))
                ,
                  pure(Specified(Ivsizeof('signed int*')))
                ) in
              if not(params_length(a_777) = 3) then
                pure(undef(<<UB038_number_of_args>>))
              else
                if a_778 \/ not(are_compatible ('signed int', a_776)) then
                  pure(undef(<<UB041_function_not_compatible>>))
                else
                  let strong a_782: pointer =
                    let a_788: ctype = params_nth(a_777, 0) in
                    if not(are_compatible ('const void*', a_788)) then
                      pure(undef(<<UB041_function_not_compatible>>))
                    else
                      {- §6.5.2.2#7, sentence 1 -}
                      let weak a_789: pointer =
                        create(Ivalignof(a_788), a_788) in
                      let weak _: unit = store(a_788, a_789, a_783) in
                      pure(a_789) in
                  let strong a_781: pointer =
                    let a_790: ctype = params_nth(a_777, 1) in
                    if not(are_compatible ('const void*', a_790)) then
                      pure(undef(<<UB041_function_not_compatible>>))
                    else
                      {- §6.5.2.2#7, sentence 1 -}
                      let weak a_791: pointer =
                        create(Ivalignof(a_790), a_790) in
                      let weak _: unit = store(a_790, a_791, a_785) in
                      pure(a_791) in
                  let strong a_780: pointer =
                    let a_792: ctype = params_nth(a_777, 2) in
                    if not(are_compatible ('size_t', a_792)) then
                      pure(undef(<<UB041_function_not_compatible>>))
                    else
                      {- §6.5.2.2#7, sentence 1 -}
                      let weak a_793: pointer =
                        create(Ivalignof(a_792), a_792) in
                      let weak _: unit =
                        store(a_792, a_793, conv_loaded_int(a_792, a_787)) in
                      pure(a_793) in
                  let strong a_794: loaded integer =
                    ccall('signed int (*) (const void*, const void*, size_t)',
                    a_775, a_782, a_781, a_780) in
                  let strong _: (unit,unit,unit) =
                    unseq(
                      kill('void*', a_782)
                    ,
                      kill('void*', a_781)
                    ,
                      kill('size_t', a_780)
                    ) in
                  pure(a_794)
            ,
              pure(Specified(0))
            ) in
          pure(
            let (Specified(a_771: integer), Specified(a_772: integer)) =
              (a_769, a_770) in
            if conv_int('signed int', a_771) = conv_int('signed int', a_772) then
              Specified(1)
            else
              Specified(0)
          )
        ,
          pure(Specified(0))
        ) in
      pure(
        let (Specified(a_766: integer), Specified(a_767: integer)) =
          (a_764, a_765) in
        if conv_int('signed int', a_766) = conv_int('signed int', a_767) then
          Specified(1)
        else
          Specified(0)
      )
    ) in
  let strong a_739: boolean =
    let Specified(a_763: integer) = a_762 in
    pure(if not(a_763 = 1) then True else False) in
  if a_739 then
    let strong _: loaded integer =
      {- §6.5#2 -}
      bound(
        {- §6.5.16#3, sentence 4 -}
        let weak (a_796: pointer, a_801: loaded integer) =
          {- §6.5.16#3, sentence 5 -}
          unseq(
            {- §6.5.3.2 -}
            let weak a_797: loaded pointer =
              let weak a_800: pointer = pure(r) in
              load('signed int*', a_800) in
            let Specified(a_798: pointer) = a_797 in
            let weak a_799: boolean =
              memop(PtrValidForDeref, 'signed int', a_798) in
            pure(
              if a_799 then
                a_798
              else
                undef(<<UB043_indirection_invalid_value>>)
            )
          ,
            pure(Specified(11))
          ) in
        let weak _: unit =
          {- §6.5.16.1#2, store -}
          neg(store('signed int', a_796, conv_loaded_int('signed int', a_801))) in
        pure(conv_loaded_int('signed int', a_801))
      ) in
    pure(Unit) ;
    let strong _: loaded integer =
      {- §6.5#2 -}
      bound(
        {- §6.5.2.2#10, sentence 1 -}
        let strong ((a_802: loaded pointer,
        (a_803: ctype, a_804: [ctype], a_805: boolean, a_806: boolean)),
        a_811: loaded pointer, a_815: loaded integer, a_817: loaded integer,
        a_823: loaded integer) =
          {- §6.5.2.2#4, sentence 2 -}
          unseq(
            let strong a_795: loaded pointer =
              pure(Specified(Cfunction(printf_proxy))) in
            pure((a_795, cfunction(a_795)))
          ,
            let weak a_813: pointer = pure(a_812) in
            {- §6.3.2.1#3 -}
            let weak a_814: pointer =
              memop(PtrArrayShift, a_813, 'char', 0) in
            pure(Specified(a_814))
          ,
            let weak a_816: pointer = pure(y) in
            load('signed int', a_816)
          ,
            let weak a_822: pointer =
              {- §6.5.3.2 -}
              let weak a_818: loaded pointer =
                let weak a_821: pointer = pure(q) in
                load('signed int*', a_821) in
              let Specified(a_819: pointer) = a_818 in
              let weak a_820: boolean =
                memop(PtrValidForDeref, 'signed int', a_819) in
              pure(
                if a_820 then
                  a_819
                else
                  undef(<<UB043_indirection_invalid_value>>)
              ) in
            load('signed int', a_822)
          ,
            let weak a_828: pointer =
              {- §6.5.3.2 -}
              let weak a_824: loaded pointer =
                let weak a_827: pointer = pure(r) in
                load('signed int*', a_827) in
              let Specified(a_825: pointer) = a_824 in
              let weak a_826: boolean =
                memop(PtrValidForDeref, 'signed int', a_825) in
              pure(
                if a_826 then
                  a_825
                else
                  undef(<<UB043_indirection_invalid_value>>)
              ) in
            load('signed int', a_828)
          ) in
        if not(params_length(a_804) <= 4) then
          pure(undef(<<UB038_number_of_args>>))
        else
          if not(a_805) \/ not(are_compatible ('signed int', a_803)) then
            pure(undef(<<UB041_function_not_compatible>>))
          else
            let strong a_810: pointer =
              let a_829: ctype = params_nth(a_804, 0) in
              if not(are_compatible ('const char*', a_829)) then
                pure(undef(<<UB041_function_not_compatible>>))
              else
                {- §6.5.2.2#7, sentence 1 -}
                let weak a_830: pointer = create(Ivalignof(a_829), a_829) in
                let weak _: unit = store(a_829, a_830, a_811) in
                pure(a_830) in
            let strong a_809: pointer =
              {- §6.5.2.2#7, sentences 2 and 3 -}
              pcall(create_and_store, 'signed int',
              conv_loaded_int('signed int', a_815)) in
            let strong a_808: pointer =
              {- §6.5.2.2#7, sentences 2 and 3 -}
              pcall(create_and_store, 'signed int',
              conv_loaded_int('signed int', a_817)) in
            let strong a_807: pointer =
              {- §6.5.2.2#7, sentences 2 and 3 -}
              pcall(create_and_store, 'signed int',
              conv_loaded_int('signed int', a_823)) in
            let strong a_831: loaded integer =
              ccall('signed int (*) (const char*restrict , ...)', a_802, a_810,
              [('signed int', a_809), ('signed int', a_808),
              ('signed int', a_807)]) in
            let strong _: (unit,unit,unit,unit) =
              unseq(
                kill('char*', a_810)
              ,
                kill('signed int', a_809)
              ,
                kill('signed int', a_808)
              ,
                kill('signed int', a_807)
              ) in
            pure(a_831)
      ) in
    pure(Unit) ;
    pure(Unit)
  else
    pure(Unit) ;
  kill('signed int', y) ;
  kill('signed int', x) ;
  kill('signed int*', p) ;
  kill('signed int*', q) ;
  kill('ptrdiff_t', offset) ;
  kill('signed int*', r) ;
  pure(Unit) ;
  save ret_738: loaded integer (a_832: loaded integer:= Specified(0)) in
    pure(a_832)

