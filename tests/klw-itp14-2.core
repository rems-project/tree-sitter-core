-- Aggregates
def union _G_fpos64_t :=
  __opaque: 'char[16]'
  __lldata: 'signed long_long'
  __align: 'double'

-- Globals
glob x: pointer [ail_ctype = 'signed int'] :=
  let strong a_705: pointer = create(Ivalignof('signed int'), 'signed int') in
  let strong a_706: loaded integer =
    {- §6.5#2 -}
    bound(pure(Specified(1))) in
  store('signed int', a_705, conv_loaded_int('signed int', a_706)) ;
  pure(a_705)

glob y: pointer [ail_ctype = 'signed int'] :=
  let strong a_703: pointer = create(Ivalignof('signed int'), 'signed int') in
  let strong a_704: loaded integer =
    {- §6.5#2 -}
    bound(pure(Specified(2))) in
  store('signed int', a_703, conv_loaded_int('signed int', a_704)) ;
  pure(a_703)

glob a_680: pointer [ail_ctype = 'char[13]'] :=
  create_readonly(Ivalignof('char[13]'), 'char[13]', Specified(Array(Specified(conv_int('char',
  40)), Specified(conv_int('char', 112)), Specified(conv_int('char', 61)),
  Specified(conv_int('char', 61)), Specified(conv_int('char', 113)),
  Specified(conv_int('char', 41)), Specified(conv_int('char', 32)),
  Specified(conv_int('char', 61)), Specified(conv_int('char', 32)),
  Specified(conv_int('char', 37)), Specified(conv_int('char', 115)),
  Specified(conv_int('char', 10)), Specified(0))))

glob a_692: pointer [ail_ctype = 'char[5]'] :=
  create_readonly(Ivalignof('char[5]'), 'char[5]', Specified(Array(Specified(conv_int('char',
  116)), Specified(conv_int('char', 114)), Specified(conv_int('char', 117)),
  Specified(conv_int('char', 101)), Specified(0))))

glob a_695: pointer [ail_ctype = 'char[6]'] :=
  create_readonly(Ivalignof('char[6]'), 'char[6]', Specified(Array(Specified(conv_int('char',
  102)), Specified(conv_int('char', 97)), Specified(conv_int('char', 108)),
  Specified(conv_int('char', 115)), Specified(conv_int('char', 101)),
  Specified(0))))

-- Fun map
proc main (): eff loaded integer :=
  let strong p: pointer = create(Ivalignof('signed int*'), 'signed int*') in
  let strong q: pointer = create(Ivalignof('signed int*'), 'signed int*') in
  let strong b: pointer = create(Ivalignof('_Bool'), '_Bool') in
  let strong a_655: loaded pointer =
    {- §6.5#2 -}
    bound(
      {- §6.5.6 -}
      let weak (a_656: loaded pointer, a_658: loaded integer) =
        unseq(
          {- §6.5.3.2#3, sentence 5 -}
          let weak a_661: pointer = pure(x) in
          pure(Specified(a_661))
        ,
          pure(Specified(1))
        ) in
      let (Specified(a_657: pointer), Specified(a_659: integer)) =
        (a_656, a_658) in
      let weak a_660: pointer =
        memop(PtrArrayShift, a_657, 'signed int', a_659) in
      pure(Specified(a_660))
    ) in
  store('signed int*', p, a_655) ;
  let strong a_662: loaded pointer =
    {- §6.5#2 -}
    bound(
      {- §6.5.3.2#3, sentence 5 -}
      let weak a_663: pointer = pure(y) in
      pure(Specified(a_663))
    ) in
  store('signed int*', q, a_662) ;
  let strong a_664: loaded integer =
    {- §6.5#2 -}
    bound(
      let weak (a_665: loaded pointer, a_666: loaded pointer) =
        unseq(
          let weak a_670: pointer = pure(p) in
          load('signed int*', a_670)
        ,
          let weak a_671: pointer = pure(q) in
          load('signed int*', a_671)
        ) in
      let (Specified(a_667: pointer), Specified(a_668: pointer)) =
        (a_665, a_666) in
      let weak a_669: boolean = memop(PtrEq, a_667, a_668) in
      pure(if a_669 then Specified(1) else Specified(0))
    ) in
  store('_Bool', b, conv_loaded_int('_Bool', a_664)) ;
  let strong _: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.2.2#10, sentence 1 -}
      let strong ((a_672: loaded pointer,
      (a_673: ctype, a_674: [ctype], a_675: boolean, a_676: boolean)),
      a_679: loaded pointer, a_683: loaded pointer) =
        {- §6.5.2.2#4, sentence 2 -}
        unseq(
          let strong a_654: loaded pointer =
            pure(Specified(Cfunction(printf_proxy))) in
          pure((a_654, cfunction(a_654)))
        ,
          let weak a_681: pointer = pure(a_680) in
          {- §6.3.2.1#3 -}
          let weak a_682: pointer = memop(PtrArrayShift, a_681, 'char', 0) in
          pure(Specified(a_682))
        ,
          {- §6.5.15#4, sentence 1 -}
          let strong a_690: loaded integer =
            let weak (a_684: loaded integer, a_685: loaded integer) =
              unseq(
                let weak a_689: pointer = pure(b) in
                load('_Bool', a_689)
              ,
                pure(Specified(0))
              ) in
            pure(
              let (Specified(a_686: integer), Specified(a_687: integer)) =
                (a_684, a_685) in
              if conv_int('signed int', a_686) = conv_int('signed int', a_687) then
                Specified(1)
              else
                Specified(0)
            ) in
          let Specified(a_691: integer) = a_690 in
          {- §6.5.15#4, sentence 2 -}
          if a_691 = 0 then
            let weak a_693: pointer = pure(a_692) in
            {- §6.3.2.1#3 -}
            let weak a_694: pointer =
              memop(PtrArrayShift, a_693, 'char', 0) in
            pure(Specified(a_694))
          else
            let weak a_696: pointer = pure(a_695) in
            {- §6.3.2.1#3 -}
            let weak a_697: pointer =
              memop(PtrArrayShift, a_696, 'char', 0) in
            pure(Specified(a_697))
        ) in
      if not(params_length(a_674) <= 2) then
        pure(undef(<<UB038_number_of_args>>))
      else
        if not(a_675) \/ not(are_compatible ('signed int', a_673)) then
          pure(undef(<<UB041_function_not_compatible>>))
        else
          let strong a_678: pointer =
            let a_698: ctype = params_nth(a_674, 0) in
            if not(are_compatible ('const char*', a_698)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_699: pointer = create(Ivalignof(a_698), a_698) in
              let weak _: unit = store(a_698, a_699, a_679) in
              pure(a_699) in
          let strong a_677: pointer =
            {- §6.5.2.2#7, sentences 2 and 3 -}
            pcall(create_and_store, 'char*', a_683) in
          let strong a_700: loaded integer =
            ccall('signed int (*) (const char*restrict , ...)', a_672, a_678,
            [('char*', a_677)]) in
          let strong _: (unit,unit) =
            unseq(kill('char*', a_678), kill('char*', a_677)) in
          pure(a_700)
    ) in
  pure(Unit) ;
  let strong a_701: loaded integer =
    {- §6.5#2 -}
    bound(pure(Specified(0))) in
  kill('signed int*', p) ;
  kill('signed int*', q) ;
  kill('_Bool', b) ;
  run ret_653(conv_loaded_int('signed int', a_701)) ;
  kill('signed int*', p) ;
  kill('signed int*', q) ;
  kill('_Bool', b) ;
  pure(Unit) ;
  save ret_653: loaded integer (a_702: loaded integer:= Specified(0)) in
    pure(a_702)

