-- Aggregates
def union _G_fpos64_t :=
  __opaque: 'char[16]'
  __lldata: 'signed long_long'
  __align: 'double'

def struct div :=
  quot: 'signed int'
  rem: 'signed int'

def struct ldiv :=
  quot: 'signed long'
  rem: 'signed long'

def struct lldiv :=
  quot: 'signed long_long'
  rem: 'signed long_long'

def struct __cerbty_unnamed_tag_852 :=
  __dummy_max_align_t: 'void*'

def struct __cerbty_unnamed_tag_856 :=
  quot: 'intmax_t'
  rem: 'intmax_t'

-- Globals
glob a_965: pointer [ail_ctype = 'char[26]'] :=
  create_readonly(Ivalignof('char[26]'), 'char[26]', Specified(Array(Specified(conv_int('char',
  65)), Specified(conv_int('char', 100)), Specified(conv_int('char', 100)),
  Specified(conv_int('char', 114)), Specified(conv_int('char', 101)),
  Specified(conv_int('char', 115)), Specified(conv_int('char', 115)),
  Specified(conv_int('char', 101)), Specified(conv_int('char', 115)),
  Specified(conv_int('char', 58)), Specified(conv_int('char', 32)),
  Specified(conv_int('char', 38)), Specified(conv_int('char', 105)),
  Specified(conv_int('char', 61)), Specified(conv_int('char', 37)),
  Specified(conv_int('char', 108)), Specified(conv_int('char', 120)),
  Specified(conv_int('char', 32)), Specified(conv_int('char', 32)),
  Specified(conv_int('char', 106)), Specified(conv_int('char', 61)),
  Specified(conv_int('char', 37)), Specified(conv_int('char', 108)),
  Specified(conv_int('char', 120)), Specified(conv_int('char', 10)),
  Specified(0))))

glob a_1004: pointer [ail_ctype = 'char[8]'] :=
  create_readonly(Ivalignof('char[8]'), 'char[8]', Specified(Array(Specified(conv_int('char',
  42)), Specified(conv_int('char', 121)), Specified(conv_int('char', 112)),
  Specified(conv_int('char', 61)), Specified(conv_int('char', 37)),
  Specified(conv_int('char', 100)), Specified(conv_int('char', 10)),
  Specified(0))))

-- Fun map
proc main (): eff loaded integer :=
  let strong xp: pointer = create(Ivalignof('signed int*'), 'signed int*') in
  let strong i: pointer = create(Ivalignof('uintptr_t'), 'uintptr_t') in
  let strong xp2: pointer = create(Ivalignof('signed int*'), 'signed int*') in
  let strong yp: pointer = create(Ivalignof('signed int*'), 'signed int*') in
  let strong j: pointer = create(Ivalignof('uintptr_t'), 'uintptr_t') in
  let strong a_887: loaded pointer =
    {- §6.5#2 -}
    bound(
      {- §6.5.4 -}
      let weak a_888: loaded pointer =
        {- §6.5.2.2#10, sentence 1 -}
        let strong ((a_891: loaded pointer,
        (a_892: ctype, a_893: [ctype], a_894: boolean, a_895: boolean)),
        a_897: loaded integer) =
          {- §6.5.2.2#4, sentence 2 -}
          unseq(
            let strong a_890: loaded pointer =
              pure(Specified(Cfunction(malloc_proxy))) in
            pure((a_890, cfunction(a_890)))
          ,
            pure(Specified(Ivsizeof('signed int')))
          ) in
        if not(params_length(a_893) = 1) then
          pure(undef(<<UB038_number_of_args>>))
        else
          if a_894 \/ not(are_compatible ('void*', a_892)) then
            pure(undef(<<UB041_function_not_compatible>>))
          else
            let strong a_896: pointer =
              let a_898: ctype = params_nth(a_893, 0) in
              if not(are_compatible ('size_t', a_898)) then
                pure(undef(<<UB041_function_not_compatible>>))
              else
                {- §6.5.2.2#7, sentence 1 -}
                let weak a_899: pointer = create(Ivalignof(a_898), a_898) in
                let weak _: unit =
                  store(a_898, a_899, conv_loaded_int(a_898, a_897)) in
                pure(a_899) in
            let strong a_900: loaded pointer =
              ccall('void* (*) (size_t)', a_891, a_896) in
            kill('size_t', a_896) ;
            pure(a_900) in
      let Specified(a_889: pointer) = a_888 in
      let weak a_901: boolean = memop(PtrWellAligned, 'signed int', a_889) in
      pure(
        Specified(if a_901 then
          a_889
        else
          undef(<<UB025_misaligned_pointer_conversion>>))
      )
    ) in
  store('signed int*', xp, a_887) ;
  let strong _: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.16#3, sentence 4 -}
      let weak (a_886: pointer, a_906: loaded integer) =
        {- §6.5.16#3, sentence 5 -}
        unseq(
          {- §6.5.3.2 -}
          let weak a_902: loaded pointer =
            let weak a_905: pointer = pure(xp) in
            load('signed int*', a_905) in
          let Specified(a_903: pointer) = a_902 in
          let weak a_904: boolean =
            memop(PtrValidForDeref, 'signed int', a_903) in
          pure(
            if a_904 then
              a_903
            else
              undef(<<UB043_indirection_invalid_value>>)
          )
        ,
          pure(Specified(1))
        ) in
      let weak _: unit =
        {- §6.5.16.1#2, store -}
        neg(store('signed int', a_886, conv_loaded_int('signed int', a_906))) in
      pure(conv_loaded_int('signed int', a_906))
    ) in
  pure(Unit) ;
  let strong a_907: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.4 -}
      let weak a_908: loaded pointer =
        let weak a_910: pointer = pure(xp) in
        load('signed int*', a_910) in
      let Specified(a_909: pointer) = a_908 in
      let weak a_911: integer =
        memop(IntFromPtr, 'signed int', 'uintptr_t', a_909) in
      pure(Specified(a_911))
    ) in
  store('uintptr_t', i, conv_loaded_int('uintptr_t', a_907)) ;
  let strong a_912: loaded pointer =
    {- §6.5#2 -}
    bound(
      {- §6.5.4 -}
      let weak a_913: loaded integer =
        let weak a_915: pointer = pure(i) in
        load('uintptr_t', a_915) in
      let Specified(a_914: integer) = a_913 in
      let weak a_916: pointer =
        memop(PtrFromInt, 'uintptr_t', 'signed int', a_914) in
      pure(Specified(a_916))
    ) in
  store('signed int*', xp2, a_912) ;
  {- §6.5#2 -}
  bound(
    {- §6.5.2.2#10, sentence 1 -}
    let strong ((a_917: loaded pointer,
    (a_918: ctype, a_919: [ctype], a_920: boolean, a_921: boolean)),
    a_923: loaded pointer) =
      {- §6.5.2.2#4, sentence 2 -}
      unseq(
        let strong a_885: loaded pointer =
          pure(Specified(Cfunction(free_proxy))) in
        pure((a_885, cfunction(a_885)))
      ,
        {- §6.5.4 -}
        let weak a_926: pointer = pure(xp) in
        load('signed int*', a_926)
      ) in
    if not(params_length(a_919) = 1) then
      pure(undef(<<UB038_number_of_args>>))
    else
      if a_920 \/ not(are_compatible ('void', a_918)) then
        pure(undef(<<UB041_function_not_compatible>>))
      else
        let strong a_922: pointer =
          let a_928: ctype = params_nth(a_919, 0) in
          if not(are_compatible ('void*', a_928)) then
            pure(undef(<<UB041_function_not_compatible>>))
          else
            {- §6.5.2.2#7, sentence 1 -}
            let weak a_929: pointer = create(Ivalignof(a_928), a_928) in
            let weak _: unit = store(a_928, a_929, a_923) in
            pure(a_929) in
        let strong a_930: unit = ccall('void (*) (void*)', a_917, a_922) in
        kill('void*', a_922) ;
        pure(a_930)
  ) ;
  pure(Unit) ;
  let strong a_931: loaded pointer =
    {- §6.5#2 -}
    bound(
      {- §6.5.4 -}
      let weak a_932: loaded pointer =
        {- §6.5.2.2#10, sentence 1 -}
        let strong ((a_935: loaded pointer,
        (a_936: ctype, a_937: [ctype], a_938: boolean, a_939: boolean)),
        a_941: loaded integer) =
          {- §6.5.2.2#4, sentence 2 -}
          unseq(
            let strong a_934: loaded pointer =
              pure(Specified(Cfunction(malloc_proxy))) in
            pure((a_934, cfunction(a_934)))
          ,
            pure(Specified(Ivsizeof('signed int')))
          ) in
        if not(params_length(a_937) = 1) then
          pure(undef(<<UB038_number_of_args>>))
        else
          if a_938 \/ not(are_compatible ('void*', a_936)) then
            pure(undef(<<UB041_function_not_compatible>>))
          else
            let strong a_940: pointer =
              let a_942: ctype = params_nth(a_937, 0) in
              if not(are_compatible ('size_t', a_942)) then
                pure(undef(<<UB041_function_not_compatible>>))
              else
                {- §6.5.2.2#7, sentence 1 -}
                let weak a_943: pointer = create(Ivalignof(a_942), a_942) in
                let weak _: unit =
                  store(a_942, a_943, conv_loaded_int(a_942, a_941)) in
                pure(a_943) in
            let strong a_944: loaded pointer =
              ccall('void* (*) (size_t)', a_935, a_940) in
            kill('size_t', a_940) ;
            pure(a_944) in
      let Specified(a_933: pointer) = a_932 in
      let weak a_945: boolean = memop(PtrWellAligned, 'signed int', a_933) in
      pure(
        Specified(if a_945 then
          a_933
        else
          undef(<<UB025_misaligned_pointer_conversion>>))
      )
    ) in
  store('signed int*', yp, a_931) ;
  let strong _: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.16#3, sentence 4 -}
      let weak (a_884: pointer, a_950: loaded integer) =
        {- §6.5.16#3, sentence 5 -}
        unseq(
          {- §6.5.3.2 -}
          let weak a_946: loaded pointer =
            let weak a_949: pointer = pure(yp) in
            load('signed int*', a_949) in
          let Specified(a_947: pointer) = a_946 in
          let weak a_948: boolean =
            memop(PtrValidForDeref, 'signed int', a_947) in
          pure(
            if a_948 then
              a_947
            else
              undef(<<UB043_indirection_invalid_value>>)
          )
        ,
          pure(Specified(2))
        ) in
      let weak _: unit =
        {- §6.5.16.1#2, store -}
        neg(store('signed int', a_884, conv_loaded_int('signed int', a_950))) in
      pure(conv_loaded_int('signed int', a_950))
    ) in
  pure(Unit) ;
  let strong a_951: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.4 -}
      let weak a_952: loaded pointer =
        let weak a_954: pointer = pure(yp) in
        load('signed int*', a_954) in
      let Specified(a_953: pointer) = a_952 in
      let weak a_955: integer =
        memop(IntFromPtr, 'signed int', 'uintptr_t', a_953) in
      pure(Specified(a_955))
    ) in
  store('uintptr_t', j, conv_loaded_int('uintptr_t', a_951)) ;
  let strong _: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.2.2#10, sentence 1 -}
      let strong ((a_956: loaded pointer,
      (a_957: ctype, a_958: [ctype], a_959: boolean, a_960: boolean)),
      a_964: loaded pointer, a_968: loaded integer, a_970: loaded integer) =
        {- §6.5.2.2#4, sentence 2 -}
        unseq(
          let strong a_883: loaded pointer =
            pure(Specified(Cfunction(printf_proxy))) in
          pure((a_883, cfunction(a_883)))
        ,
          let weak a_966: pointer = pure(a_965) in
          {- §6.3.2.1#3 -}
          let weak a_967: pointer = memop(PtrArrayShift, a_966, 'char', 0) in
          pure(Specified(a_967))
        ,
          let weak a_969: pointer = pure(i) in
          load('uintptr_t', a_969)
        ,
          let weak a_971: pointer = pure(j) in
          load('uintptr_t', a_971)
        ) in
      if not(params_length(a_958) <= 3) then
        pure(undef(<<UB038_number_of_args>>))
      else
        if not(a_959) \/ not(are_compatible ('signed int', a_957)) then
          pure(undef(<<UB041_function_not_compatible>>))
        else
          let strong a_963: pointer =
            let a_972: ctype = params_nth(a_958, 0) in
            if not(are_compatible ('const char*', a_972)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_973: pointer = create(Ivalignof(a_972), a_972) in
              let weak _: unit = store(a_972, a_973, a_964) in
              pure(a_973) in
          let strong a_962: pointer =
            {- §6.5.2.2#7, sentences 2 and 3 -}
            pcall(create_and_store, 'uintptr_t',
            conv_loaded_int('uintptr_t', a_968)) in
          let strong a_961: pointer =
            {- §6.5.2.2#7, sentences 2 and 3 -}
            pcall(create_and_store, 'uintptr_t',
            conv_loaded_int('uintptr_t', a_970)) in
          let strong a_974: loaded integer =
            ccall('signed int (*) (const char*restrict , ...)', a_956, a_963,
            [('uintptr_t', a_962), ('uintptr_t', a_961)]) in
          let strong _: (unit,unit,unit) =
            unseq(
              kill('char*', a_963)
            ,
              kill('uintptr_t', a_962)
            ,
              kill('uintptr_t', a_961)
            ) in
          pure(a_974)
    ) in
  pure(Unit) ;
  let strong a_975: loaded integer =
    {- §6.5#2 -}
    bound(
      let weak (a_977: loaded integer, a_978: loaded integer) =
        unseq(
          let weak (a_982: loaded integer, a_983: loaded integer) =
            unseq(
              let weak a_987: pointer = pure(i) in
              load('uintptr_t', a_987)
            ,
              let weak a_988: pointer = pure(j) in
              load('uintptr_t', a_988)
            ) in
          pure(
            let (Specified(a_984: integer), Specified(a_985: integer)) =
              (a_982, a_983) in
            if conv_int('uintptr_t', a_984) = conv_int('uintptr_t', a_985) then
              Specified(1)
            else
              Specified(0)
          )
        ,
          pure(Specified(0))
        ) in
      pure(
        let (Specified(a_979: integer), Specified(a_980: integer)) =
          (a_977, a_978) in
        if conv_int('signed int', a_979) = conv_int('signed int', a_980) then
          Specified(1)
        else
          Specified(0)
      )
    ) in
  let strong a_882: boolean =
    let Specified(a_976: integer) = a_975 in
    pure(if not(a_976 = 1) then True else False) in
  if a_882 then
    let strong _: loaded integer =
      {- §6.5#2 -}
      bound(
        {- §6.5.16#3, sentence 4 -}
        let weak (a_990: pointer, a_995: loaded integer) =
          {- §6.5.16#3, sentence 5 -}
          unseq(
            {- §6.5.3.2 -}
            let weak a_991: loaded pointer =
              let weak a_994: pointer = pure(xp2) in
              load('signed int*', a_994) in
            let Specified(a_992: pointer) = a_991 in
            let weak a_993: boolean =
              memop(PtrValidForDeref, 'signed int', a_992) in
            pure(
              if a_993 then
                a_992
              else
                undef(<<UB043_indirection_invalid_value>>)
            )
          ,
            pure(Specified(3))
          ) in
        let weak _: unit =
          {- §6.5.16.1#2, store -}
          neg(store('signed int', a_990, conv_loaded_int('signed int', a_995))) in
        pure(conv_loaded_int('signed int', a_995))
      ) in
    pure(Unit) ;
    let strong _: loaded integer =
      {- §6.5#2 -}
      bound(
        {- §6.5.2.2#10, sentence 1 -}
        let strong ((a_996: loaded pointer,
        (a_997: ctype, a_998: [ctype], a_999: boolean, a_1000: boolean)),
        a_1003: loaded pointer, a_1007: loaded integer) =
          {- §6.5.2.2#4, sentence 2 -}
          unseq(
            let strong a_989: loaded pointer =
              pure(Specified(Cfunction(printf_proxy))) in
            pure((a_989, cfunction(a_989)))
          ,
            let weak a_1005: pointer = pure(a_1004) in
            {- §6.3.2.1#3 -}
            let weak a_1006: pointer =
              memop(PtrArrayShift, a_1005, 'char', 0) in
            pure(Specified(a_1006))
          ,
            let weak a_1012: pointer =
              {- §6.5.3.2 -}
              let weak a_1008: loaded pointer =
                let weak a_1011: pointer = pure(yp) in
                load('signed int*', a_1011) in
              let Specified(a_1009: pointer) = a_1008 in
              let weak a_1010: boolean =
                memop(PtrValidForDeref, 'signed int', a_1009) in
              pure(
                if a_1010 then
                  a_1009
                else
                  undef(<<UB043_indirection_invalid_value>>)
              ) in
            load('signed int', a_1012)
          ) in
        if not(params_length(a_998) <= 2) then
          pure(undef(<<UB038_number_of_args>>))
        else
          if not(a_999) \/ not(are_compatible ('signed int', a_997)) then
            pure(undef(<<UB041_function_not_compatible>>))
          else
            let strong a_1002: pointer =
              let a_1013: ctype = params_nth(a_998, 0) in
              if not(are_compatible ('const char*', a_1013)) then
                pure(undef(<<UB041_function_not_compatible>>))
              else
                {- §6.5.2.2#7, sentence 1 -}
                let weak a_1014: pointer =
                  create(Ivalignof(a_1013), a_1013) in
                let weak _: unit = store(a_1013, a_1014, a_1003) in
                pure(a_1014) in
            let strong a_1001: pointer =
              {- §6.5.2.2#7, sentences 2 and 3 -}
              pcall(create_and_store, 'signed int',
              conv_loaded_int('signed int', a_1007)) in
            let strong a_1015: loaded integer =
              ccall('signed int (*) (const char*restrict , ...)', a_996,
              a_1002, [('signed int', a_1001)]) in
            let strong _: (unit,unit) =
              unseq(kill('char*', a_1002), kill('signed int', a_1001)) in
            pure(a_1015)
      ) in
    pure(Unit) ;
    pure(Unit)
  else
    pure(Unit) ;
  kill('signed int*', xp) ;
  kill('uintptr_t', i) ;
  kill('signed int*', xp2) ;
  kill('signed int*', yp) ;
  kill('uintptr_t', j) ;
  pure(Unit) ;
  save ret_881: loaded integer (a_1016: loaded integer:= Specified(0)) in
    pure(a_1016)

