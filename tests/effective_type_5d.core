-- Aggregates
def union _G_fpos64_t :=
  __opaque: 'char[16]'
  __lldata: 'signed long_long'
  __align: 'double'

def struct div :=
  quot: 'signed int'
  rem: 'signed int'

def struct ldiv :=
  quot: 'signed long'
  rem: 'signed long'

def struct lldiv :=
  quot: 'signed long_long'
  rem: 'signed long_long'

def struct __cerbty_unnamed_tag_746 :=
  __dummy_max_align_t: 'void*'

def struct __cerbty_unnamed_tag_750 :=
  c1: 'char'
  f1: 'float'

-- Globals
glob a_819: pointer [ail_ctype = 'char[6]'] :=
  create_readonly(Ivalignof('char[6]'), 'char[6]', Specified(Array(Specified(conv_int('char',
  102)), Specified(conv_int('char', 61)), Specified(conv_int('char', 37)),
  Specified(conv_int('char', 102)), Specified(conv_int('char', 10)),
  Specified(0))))

-- Fun map
proc main (): eff loaded integer :=
  let strong p: pointer = create(Ivalignof('void*'), 'void*') in
  let strong s1: pointer =
    create(Ivalignof('struct __cerbty_unnamed_tag_750'), 'struct __cerbty_unnamed_tag_750') in
  let strong pf: pointer = create(Ivalignof('float*'), 'float*') in
  let strong f: pointer = create(Ivalignof('float'), 'float') in
  let strong a_762: loaded pointer =
    {- §6.5#2 -}
    bound(
      {- §6.5.2.2#10, sentence 1 -}
      let strong ((a_764: loaded pointer,
      (a_765: ctype, a_766: [ctype], a_767: boolean, a_768: boolean)),
      a_770: loaded integer) =
        {- §6.5.2.2#4, sentence 2 -}
        unseq(
          let strong a_763: loaded pointer =
            pure(Specified(Cfunction(malloc_proxy))) in
          pure((a_763, cfunction(a_763)))
        ,
          pure(Specified(Ivsizeof('struct __cerbty_unnamed_tag_750')))
        ) in
      if not(params_length(a_766) = 1) then
        pure(undef(<<UB038_number_of_args>>))
      else
        if a_767 \/ not(are_compatible ('void*', a_765)) then
          pure(undef(<<UB041_function_not_compatible>>))
        else
          let strong a_769: pointer =
            let a_771: ctype = params_nth(a_766, 0) in
            if not(are_compatible ('size_t', a_771)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_772: pointer = create(Ivalignof(a_771), a_771) in
              let weak _: unit =
                store(a_771, a_772, conv_loaded_int(a_771, a_770)) in
              pure(a_772) in
          let strong a_773: loaded pointer =
            ccall('void* (*) (size_t)', a_764, a_769) in
          kill('size_t', a_769) ;
          pure(a_773)
    ) in
  store('void*', p, a_762) ;
  {- §6.5#2 -}
  bound(
    let strong a_761: loaded integer =
      let weak a_777: loaded pointer =
        let weak a_776: pointer = pure(p) in
        load('void*', a_776) in
      let Specified(a_778: pointer) = a_777 in
      let weak a_779: boolean = memop(PtrNe, a_778, NULL(void*)) in
      {- §6.5.9#3 -}
      pure(if a_779 then Specified(1) else Specified(0)) in
    pure(
      let Specified(a_774: integer) = a_761 in
      if a_774 = 0 then error("assert() failure", Unit) else Unit
    )
  ) ;
  pure(Unit) ;
  let strong a_780: loaded struct a_750 =
    {- §6.5#2 -}
    bound(
      let weak (a_782: loaded floating, a_781: loaded integer) =
        {- §6.7.9#23 -}
        unseq(pure(Specified(1.)), pure(Specified(65))) in
      pure(
        Specified((struct __cerbty_unnamed_tag_750){.c1= conv_loaded_int('char',
        a_781), .f1= a_782})
      )
    ) in
  store('struct __cerbty_unnamed_tag_750', s1, a_780) ;
  let strong _: loaded struct a_750 =
    {- §6.5#2 -}
    bound(
      {- §6.5.16#3, sentence 4 -}
      let weak (a_760: pointer, a_791: loaded struct a_750) =
        {- §6.5.16#3, sentence 5 -}
        unseq(
          {- §6.5.3.2 -}
          let weak a_783: loaded pointer =
            {- §6.5.4 -}
            let weak a_786: loaded pointer =
              let weak a_788: pointer = pure(p) in
              load('void*', a_788) in
            let Specified(a_787: pointer) = a_786 in
            let weak a_789: boolean =
              memop(PtrWellAligned, 'struct __cerbty_unnamed_tag_750', a_787) in
            pure(
              Specified(if a_789 then
                a_787
              else
                undef(<<UB025_misaligned_pointer_conversion>>))
            ) in
          let Specified(a_784: pointer) = a_783 in
          let weak a_785: boolean =
            memop(PtrValidForDeref, 'struct __cerbty_unnamed_tag_750', a_784) in
          pure(
            if a_785 then
              a_784
            else
              undef(<<UB043_indirection_invalid_value>>)
          )
        ,
          let weak a_790: pointer = pure(s1) in
          load('struct __cerbty_unnamed_tag_750', a_790)
        ) in
      let weak _: unit =
        {- §6.5.16.1#2, store -}
        neg(store('struct __cerbty_unnamed_tag_750', a_760, a_791)) in
      pure(a_791)
    ) in
  pure(Unit) ;
  let strong a_792: loaded pointer =
    {- §6.5#2 -}
    bound(
      {- §6.5.4 -}
      let weak a_793: loaded pointer =
        {- §6.5.6 -}
        let weak (a_795: loaded pointer, a_797: loaded integer) =
          unseq(
            {- §6.5.4 -}
            let weak a_800: loaded pointer =
              let weak a_802: pointer = pure(p) in
              load('void*', a_802) in
            let Specified(a_801: pointer) = a_800 in
            let weak a_803: boolean = memop(PtrWellAligned, 'char', a_801) in
            pure(
              Specified(if a_803 then
                a_801
              else
                undef(<<UB025_misaligned_pointer_conversion>>))
            )
          ,
            pure(Specified(8))
          ) in
        let (Specified(a_796: pointer), Specified(a_798: integer)) =
          (a_795, a_797) in
        let weak a_799: pointer =
          memop(PtrArrayShift, a_796, 'char', a_798) in
        pure(Specified(a_799)) in
      let Specified(a_794: pointer) = a_793 in
      let weak a_804: boolean = memop(PtrWellAligned, 'float', a_794) in
      pure(
        Specified(if a_804 then
          a_794
        else
          undef(<<UB025_misaligned_pointer_conversion>>))
      )
    ) in
  store('float*', pf, a_792) ;
  let strong a_805: loaded floating =
    {- §6.5#2 -}
    bound(
      let weak a_810: pointer =
        {- §6.5.3.2 -}
        let weak a_806: loaded pointer =
          let weak a_809: pointer = pure(pf) in
          load('float*', a_809) in
        let Specified(a_807: pointer) = a_806 in
        let weak a_808: boolean = memop(PtrValidForDeref, 'float', a_807) in
        pure(
          if a_808 then a_807 else undef(<<UB043_indirection_invalid_value>>)
        ) in
      load('float', a_810)
    ) in
  store('float', f, a_805) ;
  let strong _: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.2.2#10, sentence 1 -}
      let strong ((a_811: loaded pointer,
      (a_812: ctype, a_813: [ctype], a_814: boolean, a_815: boolean)),
      a_818: loaded pointer, a_822: loaded floating) =
        {- §6.5.2.2#4, sentence 2 -}
        unseq(
          let strong a_759: loaded pointer =
            pure(Specified(Cfunction(printf_proxy))) in
          pure((a_759, cfunction(a_759)))
        ,
          let weak a_820: pointer = pure(a_819) in
          {- §6.3.2.1#3 -}
          let weak a_821: pointer = memop(PtrArrayShift, a_820, 'char', 0) in
          pure(Specified(a_821))
        ,
          let weak a_823: pointer = pure(f) in
          load('float', a_823)
        ) in
      if not(params_length(a_813) <= 2) then
        pure(undef(<<UB038_number_of_args>>))
      else
        if not(a_814) \/ not(are_compatible ('signed int', a_812)) then
          pure(undef(<<UB041_function_not_compatible>>))
        else
          let strong a_817: pointer =
            let a_824: ctype = params_nth(a_813, 0) in
            if not(are_compatible ('const char*', a_824)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_825: pointer = create(Ivalignof(a_824), a_824) in
              let weak _: unit = store(a_824, a_825, a_818) in
              pure(a_825) in
          let strong a_816: pointer =
            {- §6.5.2.2#7, sentences 2 and 3 -}
            pcall(create_and_store, 'double', a_822) in
          let strong a_826: loaded integer =
            ccall('signed int (*) (const char*restrict , ...)', a_811, a_817,
            [('double', a_816)]) in
          let strong _: (unit,unit) =
            unseq(kill('char*', a_817), kill('double', a_816)) in
          pure(a_826)
    ) in
  pure(Unit) ;
  kill('void*', p) ;
  kill('struct __cerbty_unnamed_tag_750', s1) ;
  kill('float*', pf) ;
  kill('float', f) ;
  pure(Unit) ;
  save ret_758: loaded integer (a_827: loaded integer:= Specified(0)) in
    pure(a_827)

