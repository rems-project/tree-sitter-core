-- Aggregates
def union _G_fpos64_t :=
  __opaque: 'char[16]'
  __lldata: 'signed long_long'
  __align: 'double'

def struct __cerbty_unnamed_tag_646 :=
  x: 'signed int'
  y: 'signed int'
  z: 'signed int'

-- Globals
glob s: pointer [ail_ctype = 'struct __cerbty_unnamed_tag_646'] :=
  let strong a_722: pointer =
    create(Ivalignof('struct __cerbty_unnamed_tag_646'), 'struct __cerbty_unnamed_tag_646') in
  let strong a_723: loaded struct a_646 =
    {- §6.5#2 -}
    bound(
      pure(
        Specified((struct __cerbty_unnamed_tag_646){.x= Specified(0),
        .y= Specified(0), .z= Specified(0)})
      )
    ) in
  store('struct __cerbty_unnamed_tag_646', a_722, a_723) ;
  pure(a_722)

glob a_679: pointer [ail_ctype = 'char[8]'] :=
  create_readonly(Ivalignof('char[8]'), 'char[8]', Specified(Array(Specified(conv_int('char',
  115)), Specified(conv_int('char', 46)), Specified(conv_int('char', 121)),
  Specified(conv_int('char', 61)), Specified(conv_int('char', 37)),
  Specified(conv_int('char', 105)), Specified(conv_int('char', 32)),
  Specified(0))))

glob a_712: pointer [ail_ctype = 'char[8]'] :=
  create_readonly(Ivalignof('char[8]'), 'char[8]', Specified(Array(Specified(conv_int('char',
  115)), Specified(conv_int('char', 46)), Specified(conv_int('char', 121)),
  Specified(conv_int('char', 61)), Specified(conv_int('char', 37)),
  Specified(conv_int('char', 105)), Specified(conv_int('char', 10)),
  Specified(0))))

-- Fun map
proc main (): eff loaded integer :=
  let strong _: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.16#3, sentence 4 -}
      let weak (a_655: pointer, a_657: loaded integer) =
        {- §6.5.16#3, sentence 5 -}
        unseq(
          {- §6.5.2.3#3, sentence 2 -}
          let strong a_656: pointer = pure(s) in
          memop(PtrArrayShift[__cerbty_unnamed_tag_646, y], a_656)
        ,
          pure(Specified(41))
        ) in
      let weak _: unit =
        {- §6.5.16.1#2, store -}
        neg(store('signed int', a_655, conv_loaded_int('signed int', a_657))) in
      pure(conv_loaded_int('signed int', a_657))
    ) in
  pure(Unit) ;
  let strong _: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.16#3, sentence 4 -}
      let weak (a_654: pointer, a_670: loaded integer) =
        {- §6.5.16#3, sentence 5 -}
        unseq(
          {- §6.5.3.2 -}
          let weak a_658: loaded pointer =
            {- §6.5.6 -}
            let weak (a_661: loaded pointer, a_663: loaded integer) =
              unseq(
                {- §6.5.4 -}
                let weak a_666: loaded pointer =
                  {- §6.5.3.2#3, sentence 5 -}
                  let weak a_668: pointer = pure(s) in
                  pure(Specified(a_668)) in
                let Specified(a_667: pointer) = a_666 in
                let weak a_669: boolean =
                  memop(PtrWellAligned, 'signed int', a_667) in
                pure(
                  Specified(if a_669 then
                    a_667
                  else
                    undef(<<UB025_misaligned_pointer_conversion>>))
                )
              ,
                pure(Specified(1))
              ) in
            let (Specified(a_662: pointer), Specified(a_664: integer)) =
              (a_661, a_663) in
            let weak a_665: pointer =
              memop(PtrArrayShift, a_662, 'signed int', a_664) in
            pure(Specified(a_665)) in
          let Specified(a_659: pointer) = a_658 in
          let weak a_660: boolean =
            memop(PtrValidForDeref, 'signed int', a_659) in
          pure(
            if a_660 then
              a_659
            else
              undef(<<UB043_indirection_invalid_value>>)
          )
        ,
          pure(Specified(42))
        ) in
      let weak _: unit =
        {- §6.5.16.1#2, store -}
        neg(store('signed int', a_654, conv_loaded_int('signed int', a_670))) in
      pure(conv_loaded_int('signed int', a_670))
    ) in
  pure(Unit) ;
  let strong _: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.2.2#10, sentence 1 -}
      let strong ((a_671: loaded pointer,
      (a_672: ctype, a_673: [ctype], a_674: boolean, a_675: boolean)),
      a_678: loaded pointer, a_682: loaded integer) =
        {- §6.5.2.2#4, sentence 2 -}
        unseq(
          let strong a_653: loaded pointer =
            pure(Specified(Cfunction(printf_proxy))) in
          pure((a_653, cfunction(a_653)))
        ,
          let weak a_680: pointer = pure(a_679) in
          {- §6.3.2.1#3 -}
          let weak a_681: pointer = memop(PtrArrayShift, a_680, 'char', 0) in
          pure(Specified(a_681))
        ,
          let weak a_684: pointer =
            {- §6.5.2.3#3, sentence 2 -}
            let strong a_683: pointer = pure(s) in
            memop(PtrArrayShift[__cerbty_unnamed_tag_646, y], a_683) in
          load('signed int', a_684)
        ) in
      if not(params_length(a_673) <= 2) then
        pure(undef(<<UB038_number_of_args>>))
      else
        if not(a_674) \/ not(are_compatible ('signed int', a_672)) then
          pure(undef(<<UB041_function_not_compatible>>))
        else
          let strong a_677: pointer =
            let a_685: ctype = params_nth(a_673, 0) in
            if not(are_compatible ('const char*', a_685)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_686: pointer = create(Ivalignof(a_685), a_685) in
              let weak _: unit = store(a_685, a_686, a_678) in
              pure(a_686) in
          let strong a_676: pointer =
            {- §6.5.2.2#7, sentences 2 and 3 -}
            pcall(create_and_store, 'signed int',
            conv_loaded_int('signed int', a_682)) in
          let strong a_687: loaded integer =
            ccall('signed int (*) (const char*restrict , ...)', a_671, a_677,
            [('signed int', a_676)]) in
          let strong _: (unit,unit) =
            unseq(kill('char*', a_677), kill('signed int', a_676)) in
          pure(a_687)
    ) in
  pure(Unit) ;
  let strong _: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.16#3, sentence 4 -}
      let weak (a_652: pointer, a_703: loaded integer) =
        {- §6.5.16#3, sentence 5 -}
        unseq(
          {- §6.5.3.2 -}
          let weak a_688: loaded pointer =
            {- §6.5.4 -}
            let weak a_691: loaded pointer =
              {- §6.5.6 -}
              let weak (a_693: loaded pointer, a_695: loaded integer) =
                unseq(
                  {- §6.5.4 -}
                  let weak a_698: loaded pointer =
                    {- §6.5.3.2#3, sentence 5 -}
                    let weak a_700: pointer = pure(s) in
                    pure(Specified(a_700)) in
                  let Specified(a_699: pointer) = a_698 in
                  let weak a_701: boolean =
                    memop(PtrWellAligned, 'char', a_699) in
                  pure(
                    Specified(if a_701 then
                      a_699
                    else
                      undef(<<UB025_misaligned_pointer_conversion>>))
                  )
                ,
                  pure(Specified(Ivsizeof('signed int')))
                ) in
              let (Specified(a_694: pointer), Specified(a_696: integer)) =
                (a_693, a_695) in
              let weak a_697: pointer =
                memop(PtrArrayShift, a_694, 'char', a_696) in
              pure(Specified(a_697)) in
            let Specified(a_692: pointer) = a_691 in
            let weak a_702: boolean =
              memop(PtrWellAligned, 'signed int', a_692) in
            pure(
              Specified(if a_702 then
                a_692
              else
                undef(<<UB025_misaligned_pointer_conversion>>))
            ) in
          let Specified(a_689: pointer) = a_688 in
          let weak a_690: boolean =
            memop(PtrValidForDeref, 'signed int', a_689) in
          pure(
            if a_690 then
              a_689
            else
              undef(<<UB043_indirection_invalid_value>>)
          )
        ,
          pure(Specified(43))
        ) in
      let weak _: unit =
        {- §6.5.16.1#2, store -}
        neg(store('signed int', a_652, conv_loaded_int('signed int', a_703))) in
      pure(conv_loaded_int('signed int', a_703))
    ) in
  pure(Unit) ;
  let strong _: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.2.2#10, sentence 1 -}
      let strong ((a_704: loaded pointer,
      (a_705: ctype, a_706: [ctype], a_707: boolean, a_708: boolean)),
      a_711: loaded pointer, a_715: loaded integer) =
        {- §6.5.2.2#4, sentence 2 -}
        unseq(
          let strong a_651: loaded pointer =
            pure(Specified(Cfunction(printf_proxy))) in
          pure((a_651, cfunction(a_651)))
        ,
          let weak a_713: pointer = pure(a_712) in
          {- §6.3.2.1#3 -}
          let weak a_714: pointer = memop(PtrArrayShift, a_713, 'char', 0) in
          pure(Specified(a_714))
        ,
          let weak a_717: pointer =
            {- §6.5.2.3#3, sentence 2 -}
            let strong a_716: pointer = pure(s) in
            memop(PtrArrayShift[__cerbty_unnamed_tag_646, y], a_716) in
          load('signed int', a_717)
        ) in
      if not(params_length(a_706) <= 2) then
        pure(undef(<<UB038_number_of_args>>))
      else
        if not(a_707) \/ not(are_compatible ('signed int', a_705)) then
          pure(undef(<<UB041_function_not_compatible>>))
        else
          let strong a_710: pointer =
            let a_718: ctype = params_nth(a_706, 0) in
            if not(are_compatible ('const char*', a_718)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_719: pointer = create(Ivalignof(a_718), a_718) in
              let weak _: unit = store(a_718, a_719, a_711) in
              pure(a_719) in
          let strong a_709: pointer =
            {- §6.5.2.2#7, sentences 2 and 3 -}
            pcall(create_and_store, 'signed int',
            conv_loaded_int('signed int', a_715)) in
          let strong a_720: loaded integer =
            ccall('signed int (*) (const char*restrict , ...)', a_704, a_710,
            [('signed int', a_709)]) in
          let strong _: (unit,unit) =
            unseq(kill('char*', a_710), kill('signed int', a_709)) in
          pure(a_720)
    ) in
  pure(Unit) ;
  pure(Unit) ;
  save ret_650: loaded integer (a_721: loaded integer:= Specified(0)) in
    pure(a_721)

