-- Aggregates
def union _G_fpos64_t :=
  __opaque: 'char[16]'
  __lldata: 'signed long_long'
  __align: 'double'

-- Globals
glob a_674: pointer [ail_ctype = 'char[8]'] :=
  create_readonly(Ivalignof('char[8]'), 'char[8]', Specified(Array(Specified(conv_int('char',
  42)), Specified(conv_int('char', 102)), Specified(conv_int('char', 112)),
  Specified(conv_int('char', 61)), Specified(conv_int('char', 37)),
  Specified(conv_int('char', 102)), Specified(conv_int('char', 10)),
  Specified(0))))

-- Fun map
proc main (): eff loaded integer :=
  let strong c: pointer = create(Ivalignof('float'), 'unsigned char[8]') in
  let strong fp: pointer = create(Ivalignof('float*'), 'float*') in
  {- §6.2.4#6 -}
  store('unsigned char[8]', c, Unspecified('unsigned ichar[8]')) ;
  let strong a_655: loaded pointer =
    {- §6.5#2 -}
    bound(
      {- §6.5.4 -}
      let weak a_656: loaded pointer =
        let weak a_658: pointer = pure(c) in
        {- §6.3.2.1#3 -}
        let weak a_659: pointer =
          memop(PtrArrayShift, a_658, 'unsigned char', 0) in
        pure(Specified(a_659)) in
      let Specified(a_657: pointer) = a_656 in
      let weak a_660: boolean = memop(PtrWellAligned, 'float', a_657) in
      pure(
        Specified(if a_660 then
          a_657
        else
          undef(<<UB025_misaligned_pointer_conversion>>))
      )
    ) in
  store('float*', fp, a_655) ;
  let strong _: loaded floating =
    {- §6.5#2 -}
    bound(
      {- §6.5.16#3, sentence 4 -}
      let weak (a_654: pointer, a_665: loaded floating) =
        {- §6.5.16#3, sentence 5 -}
        unseq(
          {- §6.5.3.2 -}
          let weak a_661: loaded pointer =
            let weak a_664: pointer = pure(fp) in
            load('float*', a_664) in
          let Specified(a_662: pointer) = a_661 in
          let weak a_663: boolean = memop(PtrValidForDeref, 'float', a_662) in
          pure(
            if a_663 then
              a_662
            else
              undef(<<UB043_indirection_invalid_value>>)
          )
        ,
          pure(Specified(1.))
        ) in
      let weak _: unit =
        {- §6.5.16.1#2, store -}
        neg(store('float', a_654, a_665)) in
      pure(a_665)
    ) in
  pure(Unit) ;
  let strong _: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.2.2#10, sentence 1 -}
      let strong ((a_666: loaded pointer,
      (a_667: ctype, a_668: [ctype], a_669: boolean, a_670: boolean)),
      a_673: loaded pointer, a_677: loaded floating) =
        {- §6.5.2.2#4, sentence 2 -}
        unseq(
          let strong a_653: loaded pointer =
            pure(Specified(Cfunction(printf_proxy))) in
          pure((a_653, cfunction(a_653)))
        ,
          let weak a_675: pointer = pure(a_674) in
          {- §6.3.2.1#3 -}
          let weak a_676: pointer = memop(PtrArrayShift, a_675, 'char', 0) in
          pure(Specified(a_676))
        ,
          let weak a_682: pointer =
            {- §6.5.3.2 -}
            let weak a_678: loaded pointer =
              let weak a_681: pointer = pure(fp) in
              load('float*', a_681) in
            let Specified(a_679: pointer) = a_678 in
            let weak a_680: boolean =
              memop(PtrValidForDeref, 'float', a_679) in
            pure(
              if a_680 then
                a_679
              else
                undef(<<UB043_indirection_invalid_value>>)
            ) in
          load('float', a_682)
        ) in
      if not(params_length(a_668) <= 2) then
        pure(undef(<<UB038_number_of_args>>))
      else
        if not(a_669) \/ not(are_compatible ('signed int', a_667)) then
          pure(undef(<<UB041_function_not_compatible>>))
        else
          let strong a_672: pointer =
            let a_683: ctype = params_nth(a_668, 0) in
            if not(are_compatible ('const char*', a_683)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_684: pointer = create(Ivalignof(a_683), a_683) in
              let weak _: unit = store(a_683, a_684, a_673) in
              pure(a_684) in
          let strong a_671: pointer =
            {- §6.5.2.2#7, sentences 2 and 3 -}
            pcall(create_and_store, 'double', a_677) in
          let strong a_685: loaded integer =
            ccall('signed int (*) (const char*restrict , ...)', a_666, a_672,
            [('double', a_671)]) in
          let strong _: (unit,unit) =
            unseq(kill('char*', a_672), kill('double', a_671)) in
          pure(a_685)
    ) in
  pure(Unit) ;
  kill('unsigned ichar[8]', c) ;
  kill('float*', fp) ;
  pure(Unit) ;
  save ret_652: loaded integer (a_686: loaded integer:= Specified(0)) in
    pure(a_686)

