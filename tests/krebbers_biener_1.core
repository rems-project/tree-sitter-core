-- Aggregates
def struct div :=
  quot: 'signed int'
  rem: 'signed int'

def struct ldiv :=
  quot: 'signed long'
  rem: 'signed long'

def struct lldiv :=
  quot: 'signed long_long'
  rem: 'signed long_long'

def union _G_fpos64_t :=
  __opaque: 'char[16]'
  __lldata: 'signed long_long'
  __align: 'double'

def struct X :=
  i: 'signed int'
  j: 'signed int'

-- Globals
glob a_793: pointer [ail_ctype = 'char[4]'] :=
  create_readonly(Ivalignof('char[4]'), 'char[4]', Specified(Array(Specified(conv_int('char',
  37)), Specified(conv_int('char', 105)), Specified(conv_int('char', 10)),
  Specified(0))))

-- Fun map
proc foo (p: pointer, q: pointer): eff loaded integer :=
  let strong _: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.16#3, sentence 4 -}
      let weak (a_833: pointer, a_839: loaded integer) =
        {- §6.5.16#3, sentence 5 -}
        unseq(
          {- §6.5.2.3#4, sentence 2 -}
          let strong a_834: loaded pointer =
            let weak a_838: pointer = pure(q) in
            load('struct X*', a_838) in
          let Specified(a_835: pointer) = a_834 in
          let weak a_836: boolean =
            memop(PtrValidForDeref, 'struct X', a_835) in
          pure(
            if a_836 then
              member_shift(a_835, X, .j)
            else
              undef(<<UB043_indirection_invalid_value>>)
          )
        ,
          pure(Specified(1))
        ) in
      let weak _: unit =
        {- §6.5.16.1#2, store -}
        neg(store('signed int', a_833, conv_loaded_int('signed int', a_839))) in
      pure(conv_loaded_int('signed int', a_839))
    ) in
  pure(Unit) ;
  let strong _: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.16#3, sentence 4 -}
      let weak (a_832: pointer, a_845: loaded integer) =
        {- §6.5.16#3, sentence 5 -}
        unseq(
          {- §6.5.2.3#4, sentence 2 -}
          let strong a_840: loaded pointer =
            let weak a_844: pointer = pure(p) in
            load('struct X*', a_844) in
          let Specified(a_841: pointer) = a_840 in
          let weak a_842: boolean =
            memop(PtrValidForDeref, 'struct X', a_841) in
          pure(
            if a_842 then
              member_shift(a_841, X, .i)
            else
              undef(<<UB043_indirection_invalid_value>>)
          )
        ,
          pure(Specified(0))
        ) in
      let weak _: unit =
        {- §6.5.16.1#2, store -}
        neg(store('signed int', a_832, conv_loaded_int('signed int', a_845))) in
      pure(conv_loaded_int('signed int', a_845))
    ) in
  pure(Unit) ;
  let strong a_852: loaded integer =
    {- §6.5#2 -}
    bound(
      let weak a_851: pointer =
        {- §6.5.2.3#4, sentence 2 -}
        let strong a_846: loaded pointer =
          let weak a_850: pointer = pure(q) in
          load('struct X*', a_850) in
        let Specified(a_847: pointer) = a_846 in
        let weak a_848: boolean =
          memop(PtrValidForDeref, 'struct X', a_847) in
        pure(
          if a_848 then
            member_shift(a_847, X, .j)
          else
            undef(<<UB043_indirection_invalid_value>>)
        ) in
      load('signed int', a_851)
    ) in
  run ret_831(conv_loaded_int('signed int', a_852)) ;
  pure(Unit) ;
  save ret_831: loaded integer (a_853: loaded integer:= undef(<<UB088_reached_end_of_function>>)) in
    pure(a_853)

proc main (): eff loaded integer :=
  let strong p: pointer =
    create(Ivalignof('unsigned char*'), 'unsigned char*') in
  {- §6.5#2 -}
  bound(
    let strong a_755: loaded integer =
      let weak (a_758: loaded integer, a_759: loaded integer) =
        unseq(
          pure(Specified(Ivsizeof('struct X')))
        ,
          {- §6.5.5 -}
          let weak (a_763: loaded integer, a_764: loaded integer) =
            unseq(pure(Specified(2)), pure(Specified(Ivsizeof('signed int')))) in
          pure(
            let (Specified(a_765: integer), Specified(a_766: integer)) =
              (a_763, a_764) in
            Specified(wrapI('size_t',
            if all_values_representable_in('size_t', 'signed int') then
              conv_int('signed int', a_765)
            else
              conv_int('unsigned int', a_765) *
            if all_values_representable_in('size_t', 'signed int') then
              conv_int('signed int', a_766)
            else
              conv_int('unsigned int', a_766)))
          )
        ) in
      pure(
        let (Specified(a_760: integer), Specified(a_761: integer)) =
          (a_758, a_759) in
        if conv_int('size_t', a_760) = conv_int('size_t', a_761) then
          Specified(1)
        else
          Specified(0)
      ) in
    pure(
      let Specified(a_756: integer) = a_755 in
      if a_756 = 0 then error("assert() failure", Unit) else Unit
    )
  ) ;
  pure(Unit) ;
  let strong a_768: loaded pointer =
    {- §6.5#2 -}
    bound(
      {- §6.5.2.2#10, sentence 1 -}
      let strong ((a_770: loaded pointer,
      (a_771: ctype, a_772: [ctype], a_773: boolean, a_774: boolean)),
      a_776: loaded integer) =
        {- §6.5.2.2#4, sentence 2 -}
        unseq(
          let strong a_769: loaded pointer =
            pure(Specified(Cfunction(malloc_proxy))) in
          pure((a_769, cfunction(a_769)))
        ,
          {- §6.5.5 -}
          let weak (a_777: loaded integer, a_778: loaded integer) =
            unseq(pure(Specified(3)), pure(Specified(Ivsizeof('signed int')))) in
          pure(
            let (Specified(a_779: integer), Specified(a_780: integer)) =
              (a_777, a_778) in
            Specified(wrapI('size_t',
            if all_values_representable_in('size_t', 'signed int') then
              conv_int('signed int', a_779)
            else
              conv_int('unsigned int', a_779) *
            if all_values_representable_in('size_t', 'signed int') then
              conv_int('signed int', a_780)
            else
              conv_int('unsigned int', a_780)))
          )
        ) in
      if not(params_length(a_772) = 1) then
        pure(undef(<<UB038_number_of_args>>))
      else
        if a_773 \/ not(are_compatible ('void*', a_771)) then
          pure(undef(<<UB041_function_not_compatible>>))
        else
          let strong a_775: pointer =
            let a_782: ctype = params_nth(a_772, 0) in
            if not(are_compatible ('size_t', a_782)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_783: pointer = create(Ivalignof(a_782), a_782) in
              let weak _: unit =
                store(a_782, a_783, conv_loaded_int(a_782, a_776)) in
              pure(a_783) in
          let strong a_784: loaded pointer =
            ccall('void* (*) (size_t)', a_770, a_775) in
          kill('size_t', a_775) ;
          pure(a_784)
    ) in
  store('unsigned char*', p, a_768) ;
  let strong _: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.2.2#10, sentence 1 -}
      let strong ((a_785: loaded pointer,
      (a_786: ctype, a_787: [ctype], a_788: boolean, a_789: boolean)),
      a_792: loaded pointer, a_796: loaded integer) =
        {- §6.5.2.2#4, sentence 2 -}
        unseq(
          let strong a_754: loaded pointer =
            pure(Specified(Cfunction(printf_proxy))) in
          pure((a_754, cfunction(a_754)))
        ,
          let weak a_794: pointer = pure(a_793) in
          {- §6.3.2.1#3 -}
          let weak a_795: pointer = memop(PtrArrayShift, a_794, 'char', 0) in
          pure(Specified(a_795))
        ,
          {- §6.5.2.2#10, sentence 1 -}
          let strong ((a_798: loaded pointer,
          (a_799: ctype, a_800: [ctype], a_801: boolean, a_802: boolean)),
          a_805: loaded pointer, a_815: loaded pointer) =
            {- §6.5.2.2#4, sentence 2 -}
            unseq(
              let strong a_797: loaded pointer =
                pure(Specified(Cfunction(foo))) in
              pure((a_797, cfunction(a_797)))
            ,
              {- §6.5.4 -}
              let weak a_806: loaded pointer =
                {- §6.5.6 -}
                let weak (a_808: loaded pointer, a_810: loaded integer) =
                  unseq(
                    let weak a_813: pointer = pure(p) in
                    load('unsigned char*', a_813)
                  ,
                    pure(Specified(Ivsizeof('signed int')))
                  ) in
                let (Specified(a_809: pointer), Specified(a_811: integer)) =
                  (a_808, a_810) in
                let weak a_812: pointer =
                  memop(PtrArrayShift, a_809, 'unsigned char', a_811) in
                pure(Specified(a_812)) in
              let Specified(a_807: pointer) = a_806 in
              let weak a_814: boolean =
                memop(PtrWellAligned, 'struct X', a_807) in
              pure(
                Specified(if a_814 then
                  a_807
                else
                  undef(<<UB025_misaligned_pointer_conversion>>))
              )
            ,
              {- §6.5.4 -}
              let weak a_816: loaded pointer =
                let weak a_818: pointer = pure(p) in
                load('unsigned char*', a_818) in
              let Specified(a_817: pointer) = a_816 in
              let weak a_819: boolean =
                memop(PtrWellAligned, 'struct X', a_817) in
              pure(
                Specified(if a_819 then
                  a_817
                else
                  undef(<<UB025_misaligned_pointer_conversion>>))
              )
            ) in
          if not(params_length(a_800) = 2) then
            pure(undef(<<UB038_number_of_args>>))
          else
            if a_801 \/ not(are_compatible ('signed int', a_799)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              let strong a_804: pointer =
                let a_820: ctype = params_nth(a_800, 0) in
                if not(are_compatible ('struct X*', a_820)) then
                  pure(undef(<<UB041_function_not_compatible>>))
                else
                  {- §6.5.2.2#7, sentence 1 -}
                  let weak a_821: pointer = create(Ivalignof(a_820), a_820) in
                  let weak _: unit = store(a_820, a_821, a_805) in
                  pure(a_821) in
              let strong a_803: pointer =
                let a_822: ctype = params_nth(a_800, 1) in
                if not(are_compatible ('struct X*', a_822)) then
                  pure(undef(<<UB041_function_not_compatible>>))
                else
                  {- §6.5.2.2#7, sentence 1 -}
                  let weak a_823: pointer = create(Ivalignof(a_822), a_822) in
                  let weak _: unit = store(a_822, a_823, a_815) in
                  pure(a_823) in
              let strong a_824: loaded integer =
                ccall('signed int (*) (struct X*, struct X*)', a_798, a_804,
                a_803) in
              let strong _: (unit,unit) =
                unseq(kill('struct X*', a_804), kill('struct X*', a_803)) in
              pure(a_824)
        ) in
      if not(params_length(a_787) <= 2) then
        pure(undef(<<UB038_number_of_args>>))
      else
        if not(a_788) \/ not(are_compatible ('signed int', a_786)) then
          pure(undef(<<UB041_function_not_compatible>>))
        else
          let strong a_791: pointer =
            let a_825: ctype = params_nth(a_787, 0) in
            if not(are_compatible ('const char*', a_825)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_826: pointer = create(Ivalignof(a_825), a_825) in
              let weak _: unit = store(a_825, a_826, a_792) in
              pure(a_826) in
          let strong a_790: pointer =
            {- §6.5.2.2#7, sentences 2 and 3 -}
            pcall(create_and_store, 'signed int',
            conv_loaded_int('signed int', a_796)) in
          let strong a_827: loaded integer =
            ccall('signed int (*) (const char*restrict , ...)', a_785, a_791,
            [('signed int', a_790)]) in
          let strong _: (unit,unit) =
            unseq(kill('char*', a_791), kill('signed int', a_790)) in
          pure(a_827)
    ) in
  pure(Unit) ;
  kill('unsigned ichar*', p) ;
  pure(Unit) ;
  save ret_753: loaded integer (a_828: loaded integer:= Specified(0)) in
    pure(a_828)

