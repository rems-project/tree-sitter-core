-- Aggregates
def struct div :=
  quot: 'signed int'
  rem: 'signed int'

def struct ldiv :=
  quot: 'signed long'
  rem: 'signed long'

def struct lldiv :=
  quot: 'signed long_long'
  rem: 'signed long_long'

-- Fun map
proc f (j: pointer): eff unit :=
  let strong a: pointer =
    create(Ivalignof('signed int[1]'), 'signed int[1]') in
  let strong b: pointer =
    create(Ivalignof('signed int[1]'), 'signed int[1]') in
  let strong p: pointer = create(Ivalignof('signed int*'), 'signed int*') in
  let strong i: pointer = create(Ivalignof('intptr_t'), 'intptr_t') in
  let strong a_663: loaded array(integer) =
    {- §6.5#2 -}
    bound(
      let weak a_664: loaded integer = pure(Specified(0)) in
      pure(Specified(Array(conv_loaded_int('signed int', a_664))))
    ) in
  store('signed int[1]', a, a_663) ;
  let strong a_665: loaded array(integer) =
    {- §6.5#2 -}
    bound(
      let weak a_666: loaded integer = pure(Specified(0)) in
      pure(Specified(Array(conv_loaded_int('signed int', a_666))))
    ) in
  store('signed int[1]', b, a_665) ;
  let strong a_667: loaded pointer =
    {- §6.5#2 -}
    bound(
      let weak a_668: pointer = pure(a) in
      {- §6.3.2.1#3 -}
      let weak a_669: pointer =
        memop(PtrArrayShift, a_668, 'signed int', 0) in
      pure(Specified(a_669))
    ) in
  store('signed int*', p, a_667) ;
  let strong a_670: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.4 -}
      let weak a_671: loaded pointer =
        let weak a_673: pointer = pure(p) in
        load('signed int*', a_673) in
      let Specified(a_672: pointer) = a_671 in
      let weak a_674: integer =
        memop(IntFromPtr, 'signed int', 'intptr_t', a_672) in
      pure(Specified(a_674))
    ) in
  store('intptr_t', i, conv_loaded_int('intptr_t', a_670)) ;
  let strong _: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.16#3, sentence 4 -}
      let weak (a_662: pointer, a_682: loaded integer) =
        {- §6.5.16#3, sentence 5 -}
        unseq(
          pure(i)
        ,
          {- §6.5.6 -}
          let weak (a_675: loaded integer, a_676: loaded integer) =
            unseq(
              let weak a_680: pointer = pure(i) in
              load('intptr_t', a_680)
            ,
              let weak a_681: pointer = pure(j) in
              load('signed int', a_681)
            ) in
          pure(
            let (Specified(a_677: integer), Specified(a_678: integer)) =
              (a_675, a_676) in
            Specified(catch_exceptional_condition('intptr_t',
            conv_int('intptr_t', a_677) + conv_int('intptr_t', a_678)))
          )
        ) in
      let weak _: unit =
        {- §6.5.16.1#2, store -}
        neg(store('intptr_t', a_662, conv_loaded_int('intptr_t', a_682))) in
      pure(conv_loaded_int('intptr_t', a_682))
    ) in
  pure(Unit) ;
  let strong _: loaded pointer =
    {- §6.5#2 -}
    bound(
      {- §6.5.16#3, sentence 4 -}
      let weak (a_661: pointer, a_687: loaded pointer) =
        {- §6.5.16#3, sentence 5 -}
        unseq(
          pure(p)
        ,
          {- §6.5.4 -}
          let weak a_683: loaded integer =
            let weak a_685: pointer = pure(i) in
            load('intptr_t', a_685) in
          let Specified(a_684: integer) = a_683 in
          let weak a_686: pointer =
            memop(PtrFromInt, 'intptr_t', 'signed int', a_684) in
          pure(Specified(a_686))
        ) in
      let weak _: unit =
        {- §6.5.16.1#2, store -}
        neg(store('signed int*', a_661, a_687)) in
      pure(a_687)
    ) in
  pure(Unit) ;
  let strong a_688: loaded integer =
    {- §6.5#2 -}
    bound(
      let weak (a_690: loaded integer, a_691: loaded integer) =
        unseq(
          let weak (a_695: loaded pointer, a_696: loaded pointer) =
            unseq(
              let weak a_700: pointer = pure(p) in
              load('signed int*', a_700)
            ,
              {- §6.5.6 -}
              {- §6.5.3.2#3, sentence 3 -}
              let weak (a_701: loaded pointer, a_703: loaded integer) =
                unseq(
                  let weak a_706: pointer = pure(b) in
                  {- §6.3.2.1#3 -}
                  let weak a_707: pointer =
                    memop(PtrArrayShift, a_706, 'signed int', 0) in
                  pure(Specified(a_707))
                ,
                  pure(Specified(0))
                ) in
              let (Specified(a_702: pointer), Specified(a_704: integer)) =
                (a_701, a_703) in
              let weak a_705: pointer =
                memop(PtrArrayShift, a_702, 'signed int', a_704) in
              pure(Specified(a_705))
            ) in
          let (Specified(a_697: pointer), Specified(a_698: pointer)) =
            (a_695, a_696) in
          let weak a_699: boolean = memop(PtrEq, a_697, a_698) in
          pure(if a_699 then Specified(1) else Specified(0))
        ,
          pure(Specified(0))
        ) in
      pure(
        let (Specified(a_692: integer), Specified(a_693: integer)) =
          (a_690, a_691) in
        if conv_int('signed int', a_692) = conv_int('signed int', a_693) then
          Specified(1)
        else
          Specified(0)
      )
    ) in
  let strong a_660: boolean =
    let Specified(a_689: integer) = a_688 in
    pure(if not(a_689 = 1) then True else False) in
  if a_660 then
    {- §6.5#2 -}
    bound(
      let strong a_708: loaded pointer = pure(Specified(Cfunction(abort))) in
      let (a_709: ctype, a_710: [ctype], _: boolean, _: boolean) =
        cfunction(a_708) in
      if params_length(a_710) = 0 then
        if are_compatible ('void', a_709) then
          ccall('void (*) (void)', a_708)
        else
          pure(undef(<<UB041_function_not_compatible>>))
      else
        pure(undef(<<UB038_number_of_args>>))
    ) ;
    pure(Unit)
  else
    pure(Unit) ;
  let strong _: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.16#3, sentence 4 -}
      let weak (a_659: pointer, a_715: loaded integer) =
        {- §6.5.16#3, sentence 5 -}
        unseq(
          {- §6.5.3.2 -}
          let weak a_711: loaded pointer =
            let weak a_714: pointer = pure(p) in
            load('signed int*', a_714) in
          let Specified(a_712: pointer) = a_711 in
          let weak a_713: boolean =
            memop(PtrValidForDeref, 'signed int', a_712) in
          pure(
            if a_713 then
              a_712
            else
              undef(<<UB043_indirection_invalid_value>>)
          )
        ,
          pure(Specified(123))
        ) in
      let weak _: unit =
        {- §6.5.16.1#2, store -}
        neg(store('signed int', a_659, conv_loaded_int('signed int', a_715))) in
      pure(conv_loaded_int('signed int', a_715))
    ) in
  pure(Unit) ;
  let strong a_716: loaded integer =
    {- §6.5#2 -}
    bound(
      let weak (a_718: loaded integer, a_719: loaded integer) =
        unseq(
          let weak a_733: pointer =
            {- §6.5.3.2 -}
            let weak a_723: loaded pointer =
              {- §6.5.6 -}
              let weak (a_726: loaded pointer, a_728: loaded integer) =
                unseq(
                  let weak a_731: pointer = pure(b) in
                  {- §6.3.2.1#3 -}
                  let weak a_732: pointer =
                    memop(PtrArrayShift, a_731, 'signed int', 0) in
                  pure(Specified(a_732))
                ,
                  pure(Specified(0))
                ) in
              let (Specified(a_727: pointer), Specified(a_729: integer)) =
                (a_726, a_728) in
              let weak a_730: pointer =
                memop(PtrArrayShift, a_727, 'signed int', a_729) in
              pure(Specified(a_730)) in
            let Specified(a_724: pointer) = a_723 in
            let weak a_725: boolean =
              memop(PtrValidForDeref, 'signed int', a_724) in
            pure(
              if a_725 then
                a_724
              else
                undef(<<UB043_indirection_invalid_value>>)
            ) in
          load('signed int', a_733)
        ,
          pure(Specified(0))
        ) in
      pure(
        let (Specified(a_720: integer), Specified(a_721: integer)) =
          (a_718, a_719) in
        if conv_int('signed int', a_720) = conv_int('signed int', a_721) then
          Specified(1)
        else
          Specified(0)
      )
    ) in
  let strong a_658: boolean =
    let Specified(a_717: integer) = a_716 in
    pure(if not(a_717 = 1) then True else False) in
  if a_658 then
    {- §6.5#2 -}
    bound(
      let strong a_734: loaded pointer = pure(Specified(Cfunction(abort))) in
      let (a_735: ctype, a_736: [ctype], _: boolean, _: boolean) =
        cfunction(a_734) in
      if params_length(a_736) = 0 then
        if are_compatible ('void', a_735) then
          ccall('void (*) (void)', a_734)
        else
          pure(undef(<<UB041_function_not_compatible>>))
      else
        pure(undef(<<UB038_number_of_args>>))
    ) ;
    pure(Unit)
  else
    pure(Unit) ;
  kill('signed int[1]', a) ;
  kill('signed int[1]', b) ;
  kill('signed int*', p) ;
  kill('intptr_t', i) ;
  pure(Unit) ;
  save ret_657: unit (a_737: unit:= Unit) in  pure(a_737)

proc main (): eff loaded integer :=
  {- §6.5#2 -}
  bound(
    {- §6.5.2.2#10, sentence 1 -}
    let strong ((a_645: loaded pointer,
    (a_646: ctype, a_647: [ctype], a_648: boolean, a_649: boolean)),
    a_651: loaded integer) =
      {- §6.5.2.2#4, sentence 2 -}
      unseq(
        let strong a_644: loaded pointer = pure(Specified(Cfunction(f))) in
        pure((a_644, cfunction(a_644)))
      ,
        pure(Specified(Ivsizeof('signed int')))
      ) in
    if not(params_length(a_647) = 1) then
      pure(undef(<<UB038_number_of_args>>))
    else
      if a_648 \/ not(are_compatible ('void', a_646)) then
        pure(undef(<<UB041_function_not_compatible>>))
      else
        let strong a_650: pointer =
          let a_652: ctype = params_nth(a_647, 0) in
          if not(are_compatible ('signed int', a_652)) then
            pure(undef(<<UB041_function_not_compatible>>))
          else
            {- §6.5.2.2#7, sentence 1 -}
            let weak a_653: pointer = create(Ivalignof(a_652), a_652) in
            let weak _: unit =
              store(a_652, a_653, conv_loaded_int(a_652, a_651)) in
            pure(a_653) in
        let strong a_654: unit =
          ccall('void (*) (signed int)', a_645, a_650) in
        kill('signed int', a_650) ;
        pure(a_654)
  ) ;
  pure(Unit) ;
  pure(Unit) ;
  save ret_643: loaded integer (a_655: loaded integer:= Specified(0)) in
    pure(a_655)

