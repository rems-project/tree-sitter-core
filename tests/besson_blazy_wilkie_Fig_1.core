proc set (p: pointer, flag: pointer): eff loaded integer :=
  let strong a_588: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.12 -}
      let weak (a_575: loaded integer, a_576: loaded integer) =
        unseq(
          let weak a_579: pointer = pure(p) in
          load('signed int', a_579)
        ,
          {- §6.5.7 -}
          let weak (a_580: loaded integer, a_581: loaded integer) =
            unseq(
              pure(Specified(1))
            ,
              let weak a_587: pointer = pure(flag) in
              load('signed int', a_587)
            ) in
          pure(
            let (Specified(a_582: integer), Specified(a_583: integer)) =
              (a_580, a_581) in
            let a_584: integer = conv_int('signed int', a_582) in
            let a_585: integer = conv_int('signed int', a_583) in
            if a_585 < 0 then
              undef(<<UB051a_negative_shift>>)
            else
              if ctype_width('signed int') < a_585 \/
              ctype_width('signed int') = a_585 then
                undef(<<UB51b_shift_too_large>>)
              else
                if a_584 < 0 then
                  undef(<<UB052a_negative_left_shift>>)
                else
                  let a_586: integer = a_584 * 2 ^ a_585 in
                  if is_representable_integer(a_586, 'signed int') then
                    Specified(a_586)
                  else
                    undef(<<UB052b_non_representable_left_shift>>)
          )
        ) in
      pure(
        let (Specified(a_577: integer), Specified(a_578: integer)) =
          (a_575, a_576) in
        Specified(IvOR('signed int', conv_int('signed int', a_577),
        conv_int('signed int', a_578)))
      )
    ) in
  run ret_574(conv_loaded_int('signed int', a_588)) ;
  pure(Unit) ;
  save ret_574: loaded integer (a_589: loaded integer:= undef(<<UB088_reached_end_of_function>>)) in
    pure(a_589)

proc isset (p: pointer, flag: pointer): eff loaded integer :=
  let strong a_570: loaded integer =
    {- §6.5#2 -}
    bound(
      let weak (a_552: loaded integer, a_553: loaded integer) =
        unseq(
          {- §6.5.10 -}
          let weak (a_557: loaded integer, a_558: loaded integer) =
            unseq(
              let weak a_561: pointer = pure(p) in
              load('signed int', a_561)
            ,
              {- §6.5.7 -}
              let weak (a_562: loaded integer, a_563: loaded integer) =
                unseq(
                  pure(Specified(1))
                ,
                  let weak a_569: pointer = pure(flag) in
                  load('signed int', a_569)
                ) in
              pure(
                let (Specified(a_564: integer), Specified(a_565: integer)) =
                  (a_562, a_563) in
                let a_566: integer = conv_int('signed int', a_564) in
                let a_567: integer = conv_int('signed int', a_565) in
                if a_567 < 0 then
                  undef(<<UB051a_negative_shift>>)
                else
                  if ctype_width('signed int') < a_567 \/
                  ctype_width('signed int') = a_567 then
                    undef(<<UB51b_shift_too_large>>)
                  else
                    if a_566 < 0 then
                      undef(<<UB052a_negative_left_shift>>)
                    else
                      let a_568: integer = a_566 * 2 ^ a_567 in
                      if is_representable_integer(a_568, 'signed int') then
                        Specified(a_568)
                      else
                        undef(<<UB052b_non_representable_left_shift>>)
              )
            ) in
          pure(
            let (Specified(a_559: integer), Specified(a_560: integer)) =
              (a_557, a_558) in
            Specified(IvAND('signed int', conv_int('signed int', a_559),
            conv_int('signed int', a_560)))
          )
        ,
          pure(Specified(0))
        ) in
      pure(
        let (Specified(a_554: integer), Specified(a_555: integer)) =
          (a_552, a_553) in
        if not(conv_int('signed int', a_554) = conv_int('signed int', a_555)) then
          Specified(1)
        else
          Specified(0)
      )
    ) in
  run ret_551(conv_loaded_int('signed int', a_570)) ;
  pure(Unit) ;
  save ret_551: loaded integer (a_571: loaded integer:= undef(<<UB088_reached_end_of_function>>)) in
    pure(a_571)

proc main (): eff loaded integer :=
  let strong status: pointer =
    create(Ivalignof('signed int'), 'signed int') in
  let strong a_514: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.2.2#10, sentence 1 -}
      let strong ((a_516: loaded pointer,
      (a_517: ctype, a_518: [ctype], a_519: boolean, a_520: boolean)),
      a_523: loaded integer, a_525: loaded integer) =
        {- §6.5.2.2#4, sentence 2 -}
        unseq(
          let strong a_515: loaded pointer =
            pure(Specified(Cfunction(set))) in
          pure((a_515, cfunction(a_515)))
        ,
          let weak a_524: pointer = pure(status) in
          load('signed int', a_524)
        ,
          pure(Specified(0))
        ) in
      if not(params_length(a_518) = 2) then
        pure(undef(<<UB038_number_of_args>>))
      else
        if a_519 \/ not(are_compatible ('signed int', a_517)) then
          pure(undef(<<UB041_function_not_compatible>>))
        else
          let strong a_522: pointer =
            let a_526: ctype = params_nth(a_518, 0) in
            if not(are_compatible ('signed int', a_526)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_527: pointer = create(Ivalignof(a_526), a_526) in
              let weak _: unit =
                store(a_526, a_527, conv_loaded_int(a_526, a_523)) in
              pure(a_527) in
          let strong a_521: pointer =
            let a_528: ctype = params_nth(a_518, 1) in
            if not(are_compatible ('signed int', a_528)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_529: pointer = create(Ivalignof(a_528), a_528) in
              let weak _: unit =
                store(a_528, a_529, conv_loaded_int(a_528, a_525)) in
              pure(a_529) in
          let strong a_530: loaded integer =
            ccall('signed int (*) (signed int, signed int)', a_516, a_522,
            a_521) in
          let strong _: (unit,unit) =
            unseq(kill('signed int', a_522), kill('signed int', a_521)) in
          pure(a_530)
    ) in
  store('signed int', status, conv_loaded_int('signed int', a_514)) ;
  let strong a_547: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.2.2#10, sentence 1 -}
      let strong ((a_532: loaded pointer,
      (a_533: ctype, a_534: [ctype], a_535: boolean, a_536: boolean)),
      a_539: loaded integer, a_541: loaded integer) =
        {- §6.5.2.2#4, sentence 2 -}
        unseq(
          let strong a_531: loaded pointer =
            pure(Specified(Cfunction(isset))) in
          pure((a_531, cfunction(a_531)))
        ,
          let weak a_540: pointer = pure(status) in
          load('signed int', a_540)
        ,
          pure(Specified(0))
        ) in
      if not(params_length(a_534) = 2) then
        pure(undef(<<UB038_number_of_args>>))
      else
        if a_535 \/ not(are_compatible ('signed int', a_533)) then
          pure(undef(<<UB041_function_not_compatible>>))
        else
          let strong a_538: pointer =
            let a_542: ctype = params_nth(a_534, 0) in
            if not(are_compatible ('signed int', a_542)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_543: pointer = create(Ivalignof(a_542), a_542) in
              let weak _: unit =
                store(a_542, a_543, conv_loaded_int(a_542, a_539)) in
              pure(a_543) in
          let strong a_537: pointer =
            let a_544: ctype = params_nth(a_534, 1) in
            if not(are_compatible ('signed int', a_544)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_545: pointer = create(Ivalignof(a_544), a_544) in
              let weak _: unit =
                store(a_544, a_545, conv_loaded_int(a_544, a_541)) in
              pure(a_545) in
          let strong a_546: loaded integer =
            ccall('signed int (*) (signed int, signed int)', a_532, a_538,
            a_537) in
          let strong _: (unit,unit) =
            unseq(kill('signed int', a_538), kill('signed int', a_537)) in
          pure(a_546)
    ) in
  kill('signed int', status) ;
  run ret_513(conv_loaded_int('signed int', a_547)) ;
  kill('signed int', status) ;
  pure(Unit) ;
  save ret_513: loaded integer (a_548: loaded integer:= Specified(0)) in
    pure(a_548)

