-- Aggregates
def union _G_fpos64_t :=
  __opaque: 'char[16]'
  __lldata: 'signed long_long'
  __align: 'double'

-- Globals
glob x: pointer [ail_ctype = 'signed int'] :=
  let strong a_689: pointer = create(Ivalignof('signed int'), 'signed int') in
  let strong a_690: loaded integer =
    {- §6.5#2 -}
    bound(pure(Specified(1))) in
  store('signed int', a_689, conv_loaded_int('signed int', a_690)) ;
  pure(a_689)

glob secret_key: pointer [ail_ctype = 'signed int'] :=
  let strong a_687: pointer = create(Ivalignof('signed int'), 'signed int') in
  let strong a_688: loaded integer =
    {- §6.5#2 -}
    bound(pure(Specified(4091))) in
  store('signed int', a_687, conv_loaded_int('signed int', a_688)) ;
  pure(a_687)

glob a_678: pointer [ail_ctype = 'char[10]'] :=
  create_readonly(Ivalignof('char[10]'), 'char[10]', Specified(Array(Specified(conv_int('char',
  108)), Specified(conv_int('char', 101)), Specified(conv_int('char', 97)),
  Specified(conv_int('char', 107)), Specified(conv_int('char', 58)),
  Specified(conv_int('char', 32)), Specified(conv_int('char', 37)),
  Specified(conv_int('char', 100)), Specified(conv_int('char', 10)),
  Specified(0))))

-- Fun map
proc main (): eff loaded integer :=
  let strong p: pointer = create(Ivalignof('signed int*'), 'signed int*') in
  let strong a_655: loaded pointer =
    {- §6.5#2 -}
    bound(
      {- §6.5.3.2#3, sentence 5 -}
      let weak a_656: pointer = pure(x) in
      pure(Specified(a_656))
    ) in
  store('signed int*', p, a_655) ;
  let strong _: loaded pointer =
    {- §6.5#2 -}
    bound(
      {- §6.5.16#3, sentence 4 -}
      let weak (a_654: pointer, a_663: loaded pointer) =
        {- §6.5.16#3, sentence 5 -}
        unseq(
          pure(p)
        ,
          {- §6.5.6 -}
          let weak (a_657: loaded pointer, a_659: loaded integer) =
            unseq(
              let weak a_662: pointer = pure(p) in
              load('signed int*', a_662)
            ,
              pure(Specified(1))
            ) in
          let (Specified(a_658: pointer), Specified(a_660: integer)) =
            (a_657, a_659) in
          let weak a_661: pointer =
            memop(PtrArrayShift, a_658, 'signed int', a_660) in
          pure(Specified(a_661))
        ) in
      let weak _: unit =
        {- §6.5.16.1#2, store -}
        neg(store('signed int*', a_654, a_663)) in
      pure(a_663)
    ) in
  pure(Unit) ;
  let strong leak: pointer = create(Ivalignof('signed int'), 'signed int') in
  let strong a_664: loaded integer =
    {- §6.5#2 -}
    bound(
      let weak a_669: pointer =
        {- §6.5.3.2 -}
        let weak a_665: loaded pointer =
          let weak a_668: pointer = pure(p) in
          load('signed int*', a_668) in
        let Specified(a_666: pointer) = a_665 in
        let weak a_667: boolean =
          memop(PtrValidForDeref, 'signed int', a_666) in
        pure(
          if a_667 then a_666 else undef(<<UB043_indirection_invalid_value>>)
        ) in
      load('signed int', a_669)
    ) in
  store('signed int', leak, conv_loaded_int('signed int', a_664)) ;
  let strong _: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.2.2#10, sentence 1 -}
      let strong ((a_670: loaded pointer,
      (a_671: ctype, a_672: [ctype], a_673: boolean, a_674: boolean)),
      a_677: loaded pointer, a_681: loaded integer) =
        {- §6.5.2.2#4, sentence 2 -}
        unseq(
          let strong a_653: loaded pointer =
            pure(Specified(Cfunction(printf_proxy))) in
          pure((a_653, cfunction(a_653)))
        ,
          let weak a_679: pointer = pure(a_678) in
          {- §6.3.2.1#3 -}
          let weak a_680: pointer = memop(PtrArrayShift, a_679, 'char', 0) in
          pure(Specified(a_680))
        ,
          let weak a_682: pointer = pure(leak) in
          load('signed int', a_682)
        ) in
      if not(params_length(a_672) <= 2) then
        pure(undef(<<UB038_number_of_args>>))
      else
        if not(a_673) \/ not(are_compatible ('signed int', a_671)) then
          pure(undef(<<UB041_function_not_compatible>>))
        else
          let strong a_676: pointer =
            let a_683: ctype = params_nth(a_672, 0) in
            if not(are_compatible ('const char*', a_683)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_684: pointer = create(Ivalignof(a_683), a_683) in
              let weak _: unit = store(a_683, a_684, a_677) in
              pure(a_684) in
          let strong a_675: pointer =
            {- §6.5.2.2#7, sentences 2 and 3 -}
            pcall(create_and_store, 'signed int',
            conv_loaded_int('signed int', a_681)) in
          let strong a_685: loaded integer =
            ccall('signed int (*) (const char*restrict , ...)', a_670, a_676,
            [('signed int', a_675)]) in
          let strong _: (unit,unit) =
            unseq(kill('char*', a_676), kill('signed int', a_675)) in
          pure(a_685)
    ) in
  pure(Unit) ;
  kill('signed int', leak) ;
  pure(Unit) ;
  kill('signed int*', p) ;
  pure(Unit) ;
  save ret_652: loaded integer (a_686: loaded integer:= Specified(0)) in
    pure(a_686)

