-- Aggregates
def union _G_fpos64_t :=
  __opaque: 'char[16]'
  __lldata: 'signed long_long'
  __align: 'double'

def struct div :=
  quot: 'signed int'
  rem: 'signed int'

def struct ldiv :=
  quot: 'signed long'
  rem: 'signed long'

def struct lldiv :=
  quot: 'signed long_long'
  rem: 'signed long_long'

def struct __cerbty_unnamed_tag_746 :=
  __dummy_max_align_t: 'void*'

-- Globals
glob a_846: pointer [ail_ctype = 'char[6]'] :=
  create_readonly(Ivalignof('char[6]'), 'char[6]', Specified(Array(Specified(conv_int('char',
  105)), Specified(conv_int('char', 61)), Specified(conv_int('char', 37)),
  Specified(conv_int('char', 100)), Specified(conv_int('char', 10)),
  Specified(0))))

-- Fun map
proc main (): eff loaded integer :=
  let strong p: pointer = create(Ivalignof('void*'), 'void*') in
  let strong i: pointer = create(Ivalignof('signed int'), 'signed int') in
  {- §6.5#2 -}
  bound(
    let strong a_787: loaded integer =
      let weak (a_790: loaded integer, a_791: loaded integer) =
        unseq(
          pure(Specified(Ivsizeof('signed int')))
        ,
          pure(Specified(Ivsizeof('float')))
        ) in
      pure(
        let (Specified(a_792: integer), Specified(a_793: integer)) =
          (a_790, a_791) in
        if conv_int('size_t', a_792) = conv_int('size_t', a_793) then
          Specified(1)
        else
          Specified(0)
      ) in
    pure(
      let Specified(a_788: integer) = a_787 in
      if a_788 = 0 then error("assert() failure", Unit) else Unit
    )
  ) ;
  pure(Unit) ;
  let strong a_795: loaded pointer =
    {- §6.5#2 -}
    bound(
      {- §6.5.2.2#10, sentence 1 -}
      let strong ((a_797: loaded pointer,
      (a_798: ctype, a_799: [ctype], a_800: boolean, a_801: boolean)),
      a_803: loaded integer) =
        {- §6.5.2.2#4, sentence 2 -}
        unseq(
          let strong a_796: loaded pointer =
            pure(Specified(Cfunction(malloc_proxy))) in
          pure((a_796, cfunction(a_796)))
        ,
          pure(Specified(Ivsizeof('signed int')))
        ) in
      if not(params_length(a_799) = 1) then
        pure(undef(<<UB038_number_of_args>>))
      else
        if a_800 \/ not(are_compatible ('void*', a_798)) then
          pure(undef(<<UB041_function_not_compatible>>))
        else
          let strong a_802: pointer =
            let a_804: ctype = params_nth(a_799, 0) in
            if not(are_compatible ('size_t', a_804)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_805: pointer = create(Ivalignof(a_804), a_804) in
              let weak _: unit =
                store(a_804, a_805, conv_loaded_int(a_804, a_803)) in
              pure(a_805) in
          let strong a_806: loaded pointer =
            ccall('void* (*) (size_t)', a_797, a_802) in
          kill('size_t', a_802) ;
          pure(a_806)
    ) in
  store('void*', p, a_795) ;
  {- §6.5#2 -}
  bound(
    let strong a_786: loaded integer =
      let weak a_810: loaded pointer =
        let weak a_809: pointer = pure(p) in
        load('void*', a_809) in
      let Specified(a_811: pointer) = a_810 in
      let weak a_812: boolean = memop(PtrNe, a_811, NULL(void*)) in
      {- §6.5.9#3 -}
      pure(if a_812 then Specified(1) else Specified(0)) in
    pure(
      let Specified(a_807: integer) = a_786 in
      if a_807 = 0 then error("assert() failure", Unit) else Unit
    )
  ) ;
  pure(Unit) ;
  let strong _: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.16#3, sentence 4 -}
      let weak (a_785: pointer, a_820: loaded integer) =
        {- §6.5.16#3, sentence 5 -}
        unseq(
          {- §6.5.3.2 -}
          let weak a_813: loaded pointer =
            {- §6.5.4 -}
            let weak a_816: loaded pointer =
              let weak a_818: pointer = pure(p) in
              load('void*', a_818) in
            let Specified(a_817: pointer) = a_816 in
            let weak a_819: boolean =
              memop(PtrWellAligned, 'signed int', a_817) in
            pure(
              Specified(if a_819 then
                a_817
              else
                undef(<<UB025_misaligned_pointer_conversion>>))
            ) in
          let Specified(a_814: pointer) = a_813 in
          let weak a_815: boolean =
            memop(PtrValidForDeref, 'signed int', a_814) in
          pure(
            if a_815 then
              a_814
            else
              undef(<<UB043_indirection_invalid_value>>)
          )
        ,
          pure(Specified(3))
        ) in
      let weak _: unit =
        {- §6.5.16.1#2, store -}
        neg(store('signed int', a_785, conv_loaded_int('signed int', a_820))) in
      pure(conv_loaded_int('signed int', a_820))
    ) in
  pure(Unit) ;
  let strong _: loaded floating =
    {- §6.5#2 -}
    bound(
      {- §6.5.16#3, sentence 4 -}
      let weak (a_784: pointer, a_828: loaded floating) =
        {- §6.5.16#3, sentence 5 -}
        unseq(
          {- §6.5.3.2 -}
          let weak a_821: loaded pointer =
            {- §6.5.4 -}
            let weak a_824: loaded pointer =
              let weak a_826: pointer = pure(p) in
              load('void*', a_826) in
            let Specified(a_825: pointer) = a_824 in
            let weak a_827: boolean = memop(PtrWellAligned, 'float', a_825) in
            pure(
              Specified(if a_827 then
                a_825
              else
                undef(<<UB025_misaligned_pointer_conversion>>))
            ) in
          let Specified(a_822: pointer) = a_821 in
          let weak a_823: boolean = memop(PtrValidForDeref, 'float', a_822) in
          pure(
            if a_823 then
              a_822
            else
              undef(<<UB043_indirection_invalid_value>>)
          )
        ,
          pure(Specified(3.14))
        ) in
      let weak _: unit =
        {- §6.5.16.1#2, store -}
        neg(store('float', a_784, a_828)) in
      pure(a_828)
    ) in
  pure(Unit) ;
  let strong a_829: loaded integer =
    {- §6.5#2 -}
    bound(
      let weak a_837: pointer =
        {- §6.5.3.2 -}
        let weak a_830: loaded pointer =
          {- §6.5.4 -}
          let weak a_833: loaded pointer =
            let weak a_835: pointer = pure(p) in
            load('void*', a_835) in
          let Specified(a_834: pointer) = a_833 in
          let weak a_836: boolean =
            memop(PtrWellAligned, 'signed int', a_834) in
          pure(
            Specified(if a_836 then
              a_834
            else
              undef(<<UB025_misaligned_pointer_conversion>>))
          ) in
        let Specified(a_831: pointer) = a_830 in
        let weak a_832: boolean =
          memop(PtrValidForDeref, 'signed int', a_831) in
        pure(
          if a_832 then a_831 else undef(<<UB043_indirection_invalid_value>>)
        ) in
      load('signed int', a_837)
    ) in
  store('signed int', i, conv_loaded_int('signed int', a_829)) ;
  let strong _: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.2.2#10, sentence 1 -}
      let strong ((a_838: loaded pointer,
      (a_839: ctype, a_840: [ctype], a_841: boolean, a_842: boolean)),
      a_845: loaded pointer, a_849: loaded integer) =
        {- §6.5.2.2#4, sentence 2 -}
        unseq(
          let strong a_783: loaded pointer =
            pure(Specified(Cfunction(printf_proxy))) in
          pure((a_783, cfunction(a_783)))
        ,
          let weak a_847: pointer = pure(a_846) in
          {- §6.3.2.1#3 -}
          let weak a_848: pointer = memop(PtrArrayShift, a_847, 'char', 0) in
          pure(Specified(a_848))
        ,
          let weak a_850: pointer = pure(i) in
          load('signed int', a_850)
        ) in
      if not(params_length(a_840) <= 2) then
        pure(undef(<<UB038_number_of_args>>))
      else
        if not(a_841) \/ not(are_compatible ('signed int', a_839)) then
          pure(undef(<<UB041_function_not_compatible>>))
        else
          let strong a_844: pointer =
            let a_851: ctype = params_nth(a_840, 0) in
            if not(are_compatible ('const char*', a_851)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_852: pointer = create(Ivalignof(a_851), a_851) in
              let weak _: unit = store(a_851, a_852, a_845) in
              pure(a_852) in
          let strong a_843: pointer =
            {- §6.5.2.2#7, sentences 2 and 3 -}
            pcall(create_and_store, 'signed int',
            conv_loaded_int('signed int', a_849)) in
          let strong a_853: loaded integer =
            ccall('signed int (*) (const char*restrict , ...)', a_838, a_844,
            [('signed int', a_843)]) in
          let strong _: (unit,unit) =
            unseq(kill('char*', a_844), kill('signed int', a_843)) in
          pure(a_853)
    ) in
  pure(Unit) ;
  kill('void*', p) ;
  kill('signed int', i) ;
  pure(Unit) ;
  save ret_782: loaded integer (a_854: loaded integer:= Specified(0)) in
    pure(a_854)

