-- Aggregates
def union _G_fpos64_t :=
  __opaque: 'char[16]'
  __lldata: 'signed long_long'
  __align: 'double'

-- Globals
glob a_696: pointer [ail_ctype = 'char[6]'] :=
  create_readonly(Ivalignof('char[6]'), 'char[6]', Specified(Array(Specified(conv_int('char',
  106)), Specified(conv_int('char', 61)), Specified(conv_int('char', 37)),
  Specified(conv_int('char', 100)), Specified(conv_int('char', 10)),
  Specified(0))))

-- Fun map
proc f (): eff unit :=
  let strong i: pointer = create(Ivalignof('uintptr_t'), 'uintptr_t') in
  let strong p: pointer = create(Ivalignof('signed int*'), 'signed int*') in
  let strong a_707: loaded integer =
    bound(pure(Specified(140737488346508))) in
  store('uintptr_t', i, conv_loaded_int('uintptr_t', a_707)) ;
  let strong a_708: loaded pointer =
    bound(
      let weak a_709: loaded integer =
        let weak a_711: pointer = pure(i) in
        load('uintptr_t', a_711) in
      let Specified(a_710: integer) = a_709 in
      let weak a_712: pointer =
        memop(PtrFromInt, 'uintptr_t', 'signed int', a_710) in
      pure(Specified(a_712))
    ) in
  store('signed int*', p, a_708) ;
  let strong _: loaded integer =
    bound(
      let weak (a_706: pointer, a_717: loaded integer) =
        unseq(
          let weak a_713: loaded pointer =
            let weak a_716: pointer = pure(p) in
            load('signed int*', a_716) in
          let Specified(a_714: pointer) = a_713 in
          let weak a_715: boolean =
            memop(PtrValidForDeref, 'signed int', a_714) in
          pure(
            if a_715 then
              a_714
            else
              undef(<<UB043_indirection_invalid_value>>)
          )
        ,
          pure(Specified(1))
        ) in
      let weak _: unit =
        neg(store('signed int', a_706, conv_loaded_int('signed int', a_717))) in
      pure(conv_loaded_int('signed int', a_717))
    ) in
  pure(Unit) ;
  kill('uintptr_t', i) ;
  kill('signed int*', p) ;
  pure(Unit) ;
  save ret_705: unit (a_718: unit:= Unit) in  pure(a_718)

proc main (): eff loaded integer :=
  let strong j: pointer = create(Ivalignof('signed int'), 'signed int') in
  let strong a_685: loaded integer = bound(pure(Specified(0))) in
  store('signed int', j, conv_loaded_int('signed int', a_685)) ;
  bound(
    let strong a_684: loaded pointer = pure(Specified(Cfunction(f))) in
    let (a_686: ctype, a_687: [ctype], _: boolean, _: boolean) =
      cfunction(a_684) in
    if params_length(a_687) = 0 then
      if are_compatible ('void', a_686) then
        ccall('void (*) (void)', a_684)
      else
        pure(undef(<<UB041_function_not_compatible>>))
    else
      pure(undef(<<UB038_number_of_args>>))
  ) ;
  pure(Unit) ;
  let strong _: loaded integer =
    bound(
      let strong ((a_688: loaded pointer,
      (a_689: ctype, a_690: [ctype], a_691: boolean, a_692: boolean)),
      a_695: loaded pointer, a_699: loaded integer) =
        unseq(
          let strong a_683: loaded pointer =
            pure(Specified(Cfunction(printf_proxy))) in
          pure((a_683, cfunction(a_683)))
        ,
          let weak a_697: pointer = pure(a_696) in
          let weak a_698: pointer = memop(PtrArrayShift, a_697, 'char', 0) in
          pure(Specified(a_698))
        ,
          let weak a_700: pointer = pure(j) in
          load('signed int', a_700)
        ) in
      if not(params_length(a_690) <= 2) then
        pure(undef(<<UB038_number_of_args>>))
      else
        if not(a_691) \/ not(are_compatible ('signed int', a_689)) then
          pure(undef(<<UB041_function_not_compatible>>))
        else
          let strong a_694: pointer =
            let a_701: ctype = params_nth(a_690, 0) in
            if not(are_compatible ('const char*', a_701)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              let weak a_702: pointer =
                create(Ivalignof('const char*'), 'const char*') in
              let weak _: unit = store('const char*', a_702, a_695) in
              pure(a_702) in
          let strong a_693: pointer =
            pcall(create_and_store, 'signed int',
            conv_loaded_int('signed int', a_699)) in
          let strong a_703: loaded integer =
            ccall('signed int (*) (const char*restrict , ...)', a_688, a_694,
            [('signed int', a_693)]) in
          let strong _: (unit,unit) =
            unseq(kill('char*', a_694), kill('signed int', a_693)) in
          pure(a_703)
    ) in
  pure(Unit) ;
  kill('signed int', j) ;
  pure(Unit) ;
  save ret_682: loaded integer (a_704: loaded integer:= Specified(0)) in
    pure(a_704)

