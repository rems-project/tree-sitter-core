-- Aggregates
def union _G_fpos64_t :=
  __opaque: 'char[16]'
  __lldata: 'signed long_long'
  __align: 'double'

-- Globals
glob a_664: pointer [ail_ctype = 'char[8]'] :=
  create_readonly(Ivalignof('char[8]'), 'char[8]', Specified(Array(Specified(conv_int('char',
  105)), Specified(conv_int('char', 61)), Specified(conv_int('char', 48)),
  Specified(conv_int('char', 120)), Specified(conv_int('char', 37)),
  Specified(conv_int('char', 120)), Specified(conv_int('char', 10)),
  Specified(0))))

glob a_680: pointer [ail_ctype = 'char[8]'] :=
  create_readonly(Ivalignof('char[8]'), 'char[8]', Specified(Array(Specified(conv_int('char',
  105)), Specified(conv_int('char', 61)), Specified(conv_int('char', 48)),
  Specified(conv_int('char', 120)), Specified(conv_int('char', 37)),
  Specified(conv_int('char', 120)), Specified(conv_int('char', 10)),
  Specified(0))))

glob a_709: pointer [ail_ctype = 'char[8]'] :=
  create_readonly(Ivalignof('char[8]'), 'char[8]', Specified(Array(Specified(conv_int('char',
  105)), Specified(conv_int('char', 61)), Specified(conv_int('char', 48)),
  Specified(conv_int('char', 120)), Specified(conv_int('char', 37)),
  Specified(conv_int('char', 120)), Specified(conv_int('char', 10)),
  Specified(0))))

glob a_725: pointer [ail_ctype = 'char[8]'] :=
  create_readonly(Ivalignof('char[8]'), 'char[8]', Specified(Array(Specified(conv_int('char',
  105)), Specified(conv_int('char', 61)), Specified(conv_int('char', 48)),
  Specified(conv_int('char', 120)), Specified(conv_int('char', 37)),
  Specified(conv_int('char', 120)), Specified(conv_int('char', 10)),
  Specified(0))))

-- Fun map
proc main (): eff loaded integer :=
  let strong i: pointer = create(Ivalignof('signed int'), 'signed int') in
  store('signed int', i, Unspecified('signed int')) ;
  let strong _: loaded integer =
    bound(
      let strong ((a_656: loaded pointer,
      (a_657: ctype, a_658: [ctype], a_659: boolean, a_660: boolean)),
      a_663: loaded pointer, a_667: loaded integer) =
        unseq(
          let strong a_655: loaded pointer =
            pure(Specified(Cfunction(printf_proxy))) in
          pure((a_655, cfunction(a_655)))
        ,
          let weak a_665: pointer = pure(a_664) in
          let weak a_666: pointer = memop(PtrArrayShift, a_665, 'char', 0) in
          pure(Specified(a_666))
        ,
          let weak a_668: pointer = pure(i) in
          load('signed int', a_668)
        ) in
      if not(params_length(a_658) <= 2) then
        pure(undef(<<UB038_number_of_args>>))
      else
        if not(a_659) \/ not(are_compatible ('signed int', a_657)) then
          pure(undef(<<UB041_function_not_compatible>>))
        else
          let strong a_662: pointer =
            let a_669: ctype = params_nth(a_658, 0) in
            if not(are_compatible ('const char*', a_669)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              let weak a_670: pointer =
                create(Ivalignof('const char*'), 'const char*') in
              let weak _: unit = store('const char*', a_670, a_663) in
              pure(a_670) in
          let strong a_661: pointer =
            pcall(create_and_store, 'signed int',
            conv_loaded_int('signed int', a_667)) in
          let strong a_671: loaded integer =
            ccall('signed int (*) (const char*restrict , ...)', a_656, a_662,
            [('signed int', a_661)]) in
          let strong _: (unit,unit) =
            unseq(kill('char*', a_662), kill('signed int', a_661)) in
          pure(a_671)
    ) in
  pure(Unit) ;
  let strong _: loaded integer =
    bound(
      let strong ((a_672: loaded pointer,
      (a_673: ctype, a_674: [ctype], a_675: boolean, a_676: boolean)),
      a_679: loaded pointer, a_683: loaded integer) =
        unseq(
          let strong a_654: loaded pointer =
            pure(Specified(Cfunction(printf_proxy))) in
          pure((a_654, cfunction(a_654)))
        ,
          let weak a_681: pointer = pure(a_680) in
          let weak a_682: pointer = memop(PtrArrayShift, a_681, 'char', 0) in
          pure(Specified(a_682))
        ,
          let weak a_684: pointer = pure(i) in
          load('signed int', a_684)
        ) in
      if not(params_length(a_674) <= 2) then
        pure(undef(<<UB038_number_of_args>>))
      else
        if not(a_675) \/ not(are_compatible ('signed int', a_673)) then
          pure(undef(<<UB041_function_not_compatible>>))
        else
          let strong a_678: pointer =
            let a_685: ctype = params_nth(a_674, 0) in
            if not(are_compatible ('const char*', a_685)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              let weak a_686: pointer =
                create(Ivalignof('const char*'), 'const char*') in
              let weak _: unit = store('const char*', a_686, a_679) in
              pure(a_686) in
          let strong a_677: pointer =
            pcall(create_and_store, 'signed int',
            conv_loaded_int('signed int', a_683)) in
          let strong a_687: loaded integer =
            ccall('signed int (*) (const char*restrict , ...)', a_672, a_678,
            [('signed int', a_677)]) in
          let strong _: (unit,unit) =
            unseq(kill('char*', a_678), kill('signed int', a_677)) in
          pure(a_687)
    ) in
  pure(Unit) ;
  let strong _: loaded integer =
    bound(
      let weak (a_653: pointer, a_700: loaded integer) =
        unseq(
          let weak a_688: loaded pointer =
            let weak (a_691: loaded pointer, a_693: loaded integer) =
              unseq(
                let weak a_696: loaded pointer =
                  let weak a_698: pointer = pure(i) in
                  pure(Specified(a_698)) in
                let Specified(a_697: pointer) = a_696 in
                let weak a_699: boolean =
                  memop(PtrWellAligned, 'unsigned char', a_697) in
                pure(
                  Specified(if a_699 then
                    a_697
                  else
                    undef(<<UB025_misaligned_pointer_conversion>>))
                )
              ,
                pure(Specified(1))
              ) in
            let (Specified(a_692: pointer), Specified(a_694: integer)) =
              (a_691, a_693) in
            let weak a_695: pointer =
              memop(PtrArrayShift, a_692, 'unsigned char', a_694) in
            pure(Specified(a_695)) in
          let Specified(a_689: pointer) = a_688 in
          let weak a_690: boolean =
            memop(PtrValidForDeref, 'unsigned char', a_689) in
          pure(
            if a_690 then
              a_689
            else
              undef(<<UB043_indirection_invalid_value>>)
          )
        ,
          pure(Specified(34))
        ) in
      let weak _: unit =
        neg(store('unsigned char', a_653,
        conv_loaded_int('unsigned char', a_700))) in
      pure(conv_loaded_int('unsigned char', a_700))
    ) in
  pure(Unit) ;
  let strong _: loaded integer =
    bound(
      let strong ((a_701: loaded pointer,
      (a_702: ctype, a_703: [ctype], a_704: boolean, a_705: boolean)),
      a_708: loaded pointer, a_712: loaded integer) =
        unseq(
          let strong a_652: loaded pointer =
            pure(Specified(Cfunction(printf_proxy))) in
          pure((a_652, cfunction(a_652)))
        ,
          let weak a_710: pointer = pure(a_709) in
          let weak a_711: pointer = memop(PtrArrayShift, a_710, 'char', 0) in
          pure(Specified(a_711))
        ,
          let weak a_713: pointer = pure(i) in
          load('signed int', a_713)
        ) in
      if not(params_length(a_703) <= 2) then
        pure(undef(<<UB038_number_of_args>>))
      else
        if not(a_704) \/ not(are_compatible ('signed int', a_702)) then
          pure(undef(<<UB041_function_not_compatible>>))
        else
          let strong a_707: pointer =
            let a_714: ctype = params_nth(a_703, 0) in
            if not(are_compatible ('const char*', a_714)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              let weak a_715: pointer =
                create(Ivalignof('const char*'), 'const char*') in
              let weak _: unit = store('const char*', a_715, a_708) in
              pure(a_715) in
          let strong a_706: pointer =
            pcall(create_and_store, 'signed int',
            conv_loaded_int('signed int', a_712)) in
          let strong a_716: loaded integer =
            ccall('signed int (*) (const char*restrict , ...)', a_701, a_707,
            [('signed int', a_706)]) in
          let strong _: (unit,unit) =
            unseq(kill('char*', a_707), kill('signed int', a_706)) in
          pure(a_716)
    ) in
  pure(Unit) ;
  let strong _: loaded integer =
    bound(
      let strong ((a_717: loaded pointer,
      (a_718: ctype, a_719: [ctype], a_720: boolean, a_721: boolean)),
      a_724: loaded pointer, a_728: loaded integer) =
        unseq(
          let strong a_651: loaded pointer =
            pure(Specified(Cfunction(printf_proxy))) in
          pure((a_651, cfunction(a_651)))
        ,
          let weak a_726: pointer = pure(a_725) in
          let weak a_727: pointer = memop(PtrArrayShift, a_726, 'char', 0) in
          pure(Specified(a_727))
        ,
          let weak a_729: pointer = pure(i) in
          load('signed int', a_729)
        ) in
      if not(params_length(a_719) <= 2) then
        pure(undef(<<UB038_number_of_args>>))
      else
        if not(a_720) \/ not(are_compatible ('signed int', a_718)) then
          pure(undef(<<UB041_function_not_compatible>>))
        else
          let strong a_723: pointer =
            let a_730: ctype = params_nth(a_719, 0) in
            if not(are_compatible ('const char*', a_730)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              let weak a_731: pointer =
                create(Ivalignof('const char*'), 'const char*') in
              let weak _: unit = store('const char*', a_731, a_724) in
              pure(a_731) in
          let strong a_722: pointer =
            pcall(create_and_store, 'signed int',
            conv_loaded_int('signed int', a_728)) in
          let strong a_732: loaded integer =
            ccall('signed int (*) (const char*restrict , ...)', a_717, a_723,
            [('signed int', a_722)]) in
          let strong _: (unit,unit) =
            unseq(kill('char*', a_723), kill('signed int', a_722)) in
          pure(a_732)
    ) in
  pure(Unit) ;
  kill('signed int', i) ;
  pure(Unit) ;
  save ret_650: loaded integer (a_733: loaded integer:= Specified(0)) in
    pure(a_733)

