-- Aggregates
def struct div :=
  quot: 'signed int'
  rem: 'signed int'

def struct ldiv :=
  quot: 'signed long'
  rem: 'signed long'

def struct lldiv :=
  quot: 'signed long_long'
  rem: 'signed long_long'

def union _G_fpos64_t :=
  __opaque: 'char[16]'
  __lldata: 'signed long_long'
  __align: 'double'

-- Globals
glob a_768: pointer [ail_ctype = 'char[6]'] :=
  create_readonly(Ivalignof('char[6]'), 'char[6]', Specified(Array(Specified(conv_int('char',
  110)), Specified(conv_int('char', 61)), Specified(conv_int('char', 37)),
  Specified(conv_int('char', 100)), Specified(conv_int('char', 10)),
  Specified(0))))

-- Fun map
proc foo ()

proc bar (p: pointer): eff unit :=
  bound(
    let strong ((a_780: loaded pointer,
    (a_781: ctype, a_782: [ctype], a_783: boolean, a_784: boolean)),
    a_786: loaded pointer) =
      unseq(
        let strong a_779: loaded pointer =
          pure(Specified(Cfunction(free_proxy))) in
        pure((a_779, cfunction(a_779)))
      ,
        let weak a_787: pointer = pure(p) in
        load('void*', a_787)
      ) in
    if not(params_length(a_782) = 1) then
      pure(undef(<<UB038_number_of_args>>))
    else
      if a_783 \/ not(are_compatible ('void', a_781)) then
        pure(undef(<<UB041_function_not_compatible>>))
      else
        let strong a_785: pointer =
          let a_788: ctype = params_nth(a_782, 0) in
          if not(are_compatible ('void*', a_788)) then
            pure(undef(<<UB041_function_not_compatible>>))
          else
            let weak a_789: pointer = create(Ivalignof('void*'), 'void*') in
            let weak _: unit = store('void*', a_789, a_786) in
            pure(a_789) in
        let strong a_790: unit = ccall('void (*) (void*)', a_780, a_785) in
        kill('void*', a_785) ;
        pure(a_790)
  ) ;
  pure(Unit) ;
  pure(Unit) ;
  save ret_778: unit (a_791: unit:= Unit) in  pure(a_791)

proc main (): eff loaded integer :=
  let strong n: pointer = create(Ivalignof('signed int'), 'signed int') in
  store('signed int', n, Unspecified('signed int')) ;
  let strong _: loaded integer =
    bound(
      let weak (a_755: pointer, a_759: loaded integer) =
        unseq(
          pure(n)
        ,
          let strong a_756: loaded pointer =
            pure(Specified(Cfunction(foo))) in
          let (a_757: ctype, a_758: [ctype], _: boolean, _: boolean) =
            cfunction(a_756) in
          if params_length(a_758) = 0 then
            if are_compatible ('signed int', a_757) then
              ccall('signed int (*) (void)', a_756)
            else
              pure(undef(<<UB041_function_not_compatible>>))
          else
            pure(undef(<<UB038_number_of_args>>))
        ) in
      let weak _: unit =
        neg(store('signed int', a_755, conv_loaded_int('signed int', a_759))) in
      pure(conv_loaded_int('signed int', a_759))
    ) in
  pure(Unit) ;
  let strong _: loaded integer =
    bound(
      let strong ((a_760: loaded pointer,
      (a_761: ctype, a_762: [ctype], a_763: boolean, a_764: boolean)),
      a_767: loaded pointer, a_771: loaded integer) =
        unseq(
          let strong a_754: loaded pointer =
            pure(Specified(Cfunction(printf_proxy))) in
          pure((a_754, cfunction(a_754)))
        ,
          let weak a_769: pointer = pure(a_768) in
          let weak a_770: pointer = memop(PtrArrayShift, a_769, 'char', 0) in
          pure(Specified(a_770))
        ,
          let weak a_772: pointer = pure(n) in
          load('signed int', a_772)
        ) in
      if not(params_length(a_762) <= 2) then
        pure(undef(<<UB038_number_of_args>>))
      else
        if not(a_763) \/ not(are_compatible ('signed int', a_761)) then
          pure(undef(<<UB041_function_not_compatible>>))
        else
          let strong a_766: pointer =
            let a_773: ctype = params_nth(a_762, 0) in
            if not(are_compatible ('const char*', a_773)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              let weak a_774: pointer =
                create(Ivalignof('const char*'), 'const char*') in
              let weak _: unit = store('const char*', a_774, a_767) in
              pure(a_774) in
          let strong a_765: pointer =
            pcall(create_and_store, 'signed int',
            conv_loaded_int('signed int', a_771)) in
          let strong a_775: loaded integer =
            ccall('signed int (*) (const char*restrict , ...)', a_760, a_766,
            [('signed int', a_765)]) in
          let strong _: (unit,unit) =
            unseq(kill('char*', a_766), kill('signed int', a_765)) in
          pure(a_775)
    ) in
  pure(Unit) ;
  kill('signed int', n) ;
  pure(Unit) ;
  save ret_753: loaded integer (a_776: loaded integer:= Specified(0)) in
    pure(a_776)

