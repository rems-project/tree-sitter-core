-- Aggregates
def struct div :=
  quot: 'signed int'
  rem: 'signed int'

def struct ldiv :=
  quot: 'signed long'
  rem: 'signed long'

def struct lldiv :=
  quot: 'signed long_long'
  rem: 'signed long_long'

def struct S :=
  a: 'signed int[4]'
  b: 'signed int[4]'

-- Globals
glob s: pointer [ail_ctype = 'struct S'] :=
  let strong a_691: pointer = create(Ivalignof('struct S'), 'struct S') in
  let strong a_692: loaded struct S_604 =
    {- §6.5#2 -}
    bound(
      pure(
        Specified((struct S){.a= Specified(Array(Specified(0), Specified(0),
        Specified(0), Specified(0))),
        .b= Specified(Array(Specified(0), Specified(0), Specified(0),
        Specified(0)))})
      )
    ) in
  store('struct S', a_691, a_692) ;
  pure(a_691)

-- Fun map
proc f (i: pointer): eff unit :=
  let strong u: pointer = create(Ivalignof('signed int'), 'signed int') in
  let strong p: pointer = create(Ivalignof('signed int*'), 'signed int*') in
  let strong a_634: loaded integer =
    {- §6.5#2 -}
    bound(
      let weak a_646: pointer =
        {- §6.5.3.2 -}
        let weak a_635: loaded pointer =
          {- §6.5.6 -}
          let weak (a_638: loaded pointer, a_640: loaded integer) =
            unseq(
              let weak a_644: pointer =
                {- §6.5.2.3#3, sentence 2 -}
                let strong a_643: pointer = pure(s) in
                memop(PtrArrayShift[S, b], a_643) in
              {- §6.3.2.1#3 -}
              let weak a_645: pointer =
                memop(PtrArrayShift, a_644, 'signed int', 0) in
              pure(Specified(a_645))
            ,
              pure(Specified(0))
            ) in
          let (Specified(a_639: pointer), Specified(a_641: integer)) =
            (a_638, a_640) in
          let weak a_642: pointer =
            memop(PtrArrayShift, a_639, 'signed int', a_641) in
          pure(Specified(a_642)) in
        let Specified(a_636: pointer) = a_635 in
        let weak a_637: boolean =
          memop(PtrValidForDeref, 'signed int', a_636) in
        pure(
          if a_637 then a_636 else undef(<<UB043_indirection_invalid_value>>)
        ) in
      load('signed int', a_646)
    ) in
  store('signed int', u, conv_loaded_int('signed int', a_634)) ;
  let strong a_647: loaded pointer =
    {- §6.5#2 -}
    bound(
      {- §6.5.6 -}
      {- §6.5.3.2#3, sentence 3 -}
      let weak (a_648: loaded pointer, a_650: loaded integer) =
        unseq(
          let weak a_654: pointer =
            {- §6.5.2.3#3, sentence 2 -}
            let strong a_653: pointer = pure(s) in
            memop(PtrArrayShift[S, a], a_653) in
          {- §6.3.2.1#3 -}
          let weak a_655: pointer =
            memop(PtrArrayShift, a_654, 'signed int', 0) in
          pure(Specified(a_655))
        ,
          let weak a_656: pointer = pure(i) in
          load('signed int', a_656)
        ) in
      let (Specified(a_649: pointer), Specified(a_651: integer)) =
        (a_648, a_650) in
      let weak a_652: pointer =
        memop(PtrArrayShift, a_649, 'signed int', a_651) in
      pure(Specified(a_652))
    ) in
  store('signed int*', p, a_647) ;
  let strong _: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.16#3, sentence 4 -}
      let weak (a_633: pointer, a_661: loaded integer) =
        {- §6.5.16#3, sentence 5 -}
        unseq(
          {- §6.5.3.2 -}
          let weak a_657: loaded pointer =
            let weak a_660: pointer = pure(p) in
            load('signed int*', a_660) in
          let Specified(a_658: pointer) = a_657 in
          let weak a_659: boolean =
            memop(PtrValidForDeref, 'signed int', a_658) in
          pure(
            if a_659 then
              a_658
            else
              undef(<<UB043_indirection_invalid_value>>)
          )
        ,
          pure(Specified(0))
        ) in
      let weak _: unit =
        {- §6.5.16.1#2, store -}
        neg(store('signed int', a_633, conv_loaded_int('signed int', a_661))) in
      pure(conv_loaded_int('signed int', a_661))
    ) in
  pure(Unit) ;
  let strong a_662: loaded integer =
    {- §6.5#2 -}
    bound(
      let weak (a_664: loaded integer, a_665: loaded integer) =
        unseq(
          let weak (a_669: loaded integer, a_670: loaded integer) =
            unseq(
              let weak a_674: pointer = pure(u) in
              load('signed int', a_674)
            ,
              let weak a_686: pointer =
                {- §6.5.3.2 -}
                let weak a_675: loaded pointer =
                  {- §6.5.6 -}
                  let weak (a_678: loaded pointer, a_680: loaded integer) =
                    unseq(
                      let weak a_684: pointer =
                        {- §6.5.2.3#3, sentence 2 -}
                        let strong a_683: pointer = pure(s) in
                        memop(PtrArrayShift[S, b], a_683) in
                      {- §6.3.2.1#3 -}
                      let weak a_685: pointer =
                        memop(PtrArrayShift, a_684, 'signed int', 0) in
                      pure(Specified(a_685))
                    ,
                      pure(Specified(0))
                    ) in
                  let (Specified(a_679: pointer), Specified(a_681: integer)) =
                    (a_678, a_680) in
                  let weak a_682: pointer =
                    memop(PtrArrayShift, a_679, 'signed int', a_681) in
                  pure(Specified(a_682)) in
                let Specified(a_676: pointer) = a_675 in
                let weak a_677: boolean =
                  memop(PtrValidForDeref, 'signed int', a_676) in
                pure(
                  if a_677 then
                    a_676
                  else
                    undef(<<UB043_indirection_invalid_value>>)
                ) in
              load('signed int', a_686)
            ) in
          pure(
            let (Specified(a_671: integer), Specified(a_672: integer)) =
              (a_669, a_670) in
            if not(conv_int('signed int', a_671) =
            conv_int('signed int', a_672)) then
              Specified(1)
            else
              Specified(0)
          )
        ,
          pure(Specified(0))
        ) in
      pure(
        let (Specified(a_666: integer), Specified(a_667: integer)) =
          (a_664, a_665) in
        if conv_int('signed int', a_666) = conv_int('signed int', a_667) then
          Specified(1)
        else
          Specified(0)
      )
    ) in
  let strong a_632: boolean =
    let Specified(a_663: integer) = a_662 in
    pure(if not(a_663 = 1) then True else False) in
  if a_632 then
    {- §6.5#2 -}
    bound(
      let strong a_687: loaded pointer = pure(Specified(Cfunction(abort))) in
      let (a_688: ctype, a_689: [ctype], _: boolean, _: boolean) =
        cfunction(a_687) in
      if params_length(a_689) = 0 then
        if are_compatible ('void', a_688) then
          ccall('void (*) (void)', a_687)
        else
          pure(undef(<<UB041_function_not_compatible>>))
      else
        pure(undef(<<UB038_number_of_args>>))
    ) ;
    pure(Unit)
  else
    pure(Unit) ;
  kill('signed int', u) ;
  kill('signed int*', p) ;
  pure(Unit) ;
  save ret_631: unit (a_690: unit:= Unit) in  pure(a_690)

proc main (): eff loaded integer :=
  {- §6.5#2 -}
  bound(
    {- §6.5.2.2#10, sentence 1 -}
    let strong ((a_619: loaded pointer,
    (a_620: ctype, a_621: [ctype], a_622: boolean, a_623: boolean)),
    a_625: loaded integer) =
      {- §6.5.2.2#4, sentence 2 -}
      unseq(
        let strong a_618: loaded pointer = pure(Specified(Cfunction(f))) in
        pure((a_618, cfunction(a_618)))
      ,
        pure(Specified(4))
      ) in
    if not(params_length(a_621) = 1) then
      pure(undef(<<UB038_number_of_args>>))
    else
      if a_622 \/ not(are_compatible ('void', a_620)) then
        pure(undef(<<UB041_function_not_compatible>>))
      else
        let strong a_624: pointer =
          let a_626: ctype = params_nth(a_621, 0) in
          if not(are_compatible ('signed int', a_626)) then
            pure(undef(<<UB041_function_not_compatible>>))
          else
            {- §6.5.2.2#7, sentence 1 -}
            let weak a_627: pointer = create(Ivalignof(a_626), a_626) in
            let weak _: unit =
              store(a_626, a_627, conv_loaded_int(a_626, a_625)) in
            pure(a_627) in
        let strong a_628: unit =
          ccall('void (*) (signed int)', a_619, a_624) in
        kill('signed int', a_624) ;
        pure(a_628)
  ) ;
  pure(Unit) ;
  pure(Unit) ;
  save ret_617: loaded integer (a_629: loaded integer:= Specified(0)) in
    pure(a_629)

