-- Aggregates
def union _G_fpos64_t :=
  __opaque: 'char[16]'
  __lldata: 'signed long_long'
  __align: 'double'

def struct __cerbty_unnamed_tag_648 :=
  __dummy_max_align_t: 'void*'

def struct div :=
  quot: 'signed int'
  rem: 'signed int'

def struct ldiv :=
  quot: 'signed long'
  rem: 'signed long'

def struct lldiv :=
  quot: 'signed long_long'
  rem: 'signed long_long'

-- Globals
glob y: pointer [ail_ctype = 'signed int'] :=
  let strong a_913: pointer = create(Ivalignof('signed int'), 'signed int') in
  let strong a_914: loaded integer =
    {- §6.5#2 -}
    bound(pure(Specified(0))) in
  store('signed int', a_913, conv_loaded_int('signed int', a_914)) ;
  pure(a_913)

glob a_891: pointer [ail_ctype = 'char[4]'] :=
  create_readonly(Ivalignof('char[4]'), 'char[4]', Specified(Array(Specified(conv_int('char',
  37)), Specified(conv_int('char', 115)), Specified(conv_int('char', 10)),
  Specified(0))))

glob a_903: pointer [ail_ctype = 'char[5]'] :=
  create_readonly(Ivalignof('char[5]'), 'char[5]', Specified(Array(Specified(conv_int('char',
  122)), Specified(conv_int('char', 101)), Specified(conv_int('char', 114)),
  Specified(conv_int('char', 111)), Specified(0))))

glob a_906: pointer [ail_ctype = 'char[8]'] :=
  create_readonly(Ivalignof('char[8]'), 'char[8]', Specified(Array(Specified(conv_int('char',
  110)), Specified(conv_int('char', 111)), Specified(conv_int('char', 110)),
  Specified(conv_int('char', 122)), Specified(conv_int('char', 101)),
  Specified(conv_int('char', 114)), Specified(conv_int('char', 111)),
  Specified(0))))

-- Fun map
proc main (): eff loaded integer :=
  let strong p: pointer = create(Ivalignof('signed int*'), 'signed int*') in
  let strong q: pointer = create(Ivalignof('signed int**'), 'signed int**') in
  let strong b: pointer = create(Ivalignof('_Bool'), '_Bool') in
  store('signed int*', p, Specified(NULL(signed int))) ;
  let strong a_837: loaded pointer =
    {- §6.5#2 -}
    bound(
      {- §6.5.4 -}
      let weak a_838: loaded pointer =
        {- §6.5.2.2#10, sentence 1 -}
        let strong ((a_841: loaded pointer,
        (a_842: ctype, a_843: [ctype], a_844: boolean, a_845: boolean)),
        a_848: loaded integer, a_849: loaded integer) =
          {- §6.5.2.2#4, sentence 2 -}
          unseq(
            let strong a_840: loaded pointer =
              pure(Specified(Cfunction(calloc))) in
            pure((a_840, cfunction(a_840)))
          ,
            pure(Specified(1))
          ,
            pure(Specified(Ivsizeof('signed int*')))
          ) in
        if not(params_length(a_843) = 2) then
          pure(undef(<<UB038_number_of_args>>))
        else
          if a_844 \/ not(are_compatible ('void*', a_842)) then
            pure(undef(<<UB041_function_not_compatible>>))
          else
            let strong a_847: pointer =
              let a_850: ctype = params_nth(a_843, 0) in
              if not(are_compatible ('size_t', a_850)) then
                pure(undef(<<UB041_function_not_compatible>>))
              else
                {- §6.5.2.2#7, sentence 1 -}
                let weak a_851: pointer = create(Ivalignof(a_850), a_850) in
                let weak _: unit =
                  store(a_850, a_851, conv_loaded_int(a_850, a_848)) in
                pure(a_851) in
            let strong a_846: pointer =
              let a_852: ctype = params_nth(a_843, 1) in
              if not(are_compatible ('size_t', a_852)) then
                pure(undef(<<UB041_function_not_compatible>>))
              else
                {- §6.5.2.2#7, sentence 1 -}
                let weak a_853: pointer = create(Ivalignof(a_852), a_852) in
                let weak _: unit =
                  store(a_852, a_853, conv_loaded_int(a_852, a_849)) in
                pure(a_853) in
            let strong a_854: loaded pointer =
              ccall('void* (*) (size_t, size_t)', a_841, a_847, a_846) in
            let strong _: (unit,unit) =
              unseq(kill('size_t', a_847), kill('size_t', a_846)) in
            pure(a_854) in
      let Specified(a_839: pointer) = a_838 in
      let weak a_855: boolean = memop(PtrWellAligned, 'signed int*', a_839) in
      pure(
        Specified(if a_855 then
          a_839
        else
          undef(<<UB025_misaligned_pointer_conversion>>))
      )
    ) in
  store('signed int**', q, a_837) ;
  let strong a_856: loaded integer =
    {- §6.5#2 -}
    bound(
      let weak (a_857: loaded integer, a_858: loaded integer) =
        unseq(
          {- §6.5.2.2#10, sentence 1 -}
          let strong ((a_863: loaded pointer,
          (a_864: ctype, a_865: [ctype], a_866: boolean, a_867: boolean)),
          a_871: loaded pointer, a_873: loaded pointer, a_875: loaded integer) =
            {- §6.5.2.2#4, sentence 2 -}
            unseq(
              let strong a_862: loaded pointer =
                pure(Specified(Cfunction(memcmp_proxy))) in
              pure((a_862, cfunction(a_862)))
            ,
              {- §6.5.3.2#3, sentence 5 -}
              let weak a_872: pointer = pure(p) in
              pure(Specified(a_872))
            ,
              let weak a_874: pointer = pure(q) in
              load('signed int**', a_874)
            ,
              pure(Specified(Ivsizeof('signed int*')))
            ) in
          if not(params_length(a_865) = 3) then
            pure(undef(<<UB038_number_of_args>>))
          else
            if a_866 \/ not(are_compatible ('signed int', a_864)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              let strong a_870: pointer =
                let a_876: ctype = params_nth(a_865, 0) in
                if not(are_compatible ('const void*', a_876)) then
                  pure(undef(<<UB041_function_not_compatible>>))
                else
                  {- §6.5.2.2#7, sentence 1 -}
                  let weak a_877: pointer = create(Ivalignof(a_876), a_876) in
                  let weak _: unit = store(a_876, a_877, a_871) in
                  pure(a_877) in
              let strong a_869: pointer =
                let a_878: ctype = params_nth(a_865, 1) in
                if not(are_compatible ('const void*', a_878)) then
                  pure(undef(<<UB041_function_not_compatible>>))
                else
                  {- §6.5.2.2#7, sentence 1 -}
                  let weak a_879: pointer = create(Ivalignof(a_878), a_878) in
                  let weak _: unit = store(a_878, a_879, a_873) in
                  pure(a_879) in
              let strong a_868: pointer =
                let a_880: ctype = params_nth(a_865, 2) in
                if not(are_compatible ('size_t', a_880)) then
                  pure(undef(<<UB041_function_not_compatible>>))
                else
                  {- §6.5.2.2#7, sentence 1 -}
                  let weak a_881: pointer = create(Ivalignof(a_880), a_880) in
                  let weak _: unit =
                    store(a_880, a_881, conv_loaded_int(a_880, a_875)) in
                  pure(a_881) in
              let strong a_882: loaded integer =
                ccall('signed int (*) (const void*, const void*, size_t)',
                a_863, a_870, a_869, a_868) in
              let strong _: (unit,unit,unit) =
                unseq(
                  kill('void*', a_870)
                ,
                  kill('void*', a_869)
                ,
                  kill('size_t', a_868)
                ) in
              pure(a_882)
        ,
          pure(Specified(0))
        ) in
      pure(
        let (Specified(a_859: integer), Specified(a_860: integer)) =
          (a_857, a_858) in
        if conv_int('signed int', a_859) = conv_int('signed int', a_860) then
          Specified(1)
        else
          Specified(0)
      )
    ) in
  store('_Bool', b, conv_loaded_int('_Bool', a_856)) ;
  let strong _: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.2.2#10, sentence 1 -}
      let strong ((a_883: loaded pointer,
      (a_884: ctype, a_885: [ctype], a_886: boolean, a_887: boolean)),
      a_890: loaded pointer, a_894: loaded pointer) =
        {- §6.5.2.2#4, sentence 2 -}
        unseq(
          let strong a_835: loaded pointer =
            pure(Specified(Cfunction(printf_proxy))) in
          pure((a_835, cfunction(a_835)))
        ,
          let weak a_892: pointer = pure(a_891) in
          {- §6.3.2.1#3 -}
          let weak a_893: pointer = memop(PtrArrayShift, a_892, 'char', 0) in
          pure(Specified(a_893))
        ,
          {- §6.5.15#4, sentence 1 -}
          let strong a_901: loaded integer =
            let weak (a_895: loaded integer, a_896: loaded integer) =
              unseq(
                let weak a_900: pointer = pure(b) in
                load('_Bool', a_900)
              ,
                pure(Specified(0))
              ) in
            pure(
              let (Specified(a_897: integer), Specified(a_898: integer)) =
                (a_895, a_896) in
              if conv_int('signed int', a_897) = conv_int('signed int', a_898) then
                Specified(1)
              else
                Specified(0)
            ) in
          let Specified(a_902: integer) = a_901 in
          {- §6.5.15#4, sentence 2 -}
          if a_902 = 0 then
            let weak a_904: pointer = pure(a_903) in
            {- §6.3.2.1#3 -}
            let weak a_905: pointer =
              memop(PtrArrayShift, a_904, 'char', 0) in
            pure(Specified(a_905))
          else
            let weak a_907: pointer = pure(a_906) in
            {- §6.3.2.1#3 -}
            let weak a_908: pointer =
              memop(PtrArrayShift, a_907, 'char', 0) in
            pure(Specified(a_908))
        ) in
      if not(params_length(a_885) <= 2) then
        pure(undef(<<UB038_number_of_args>>))
      else
        if not(a_886) \/ not(are_compatible ('signed int', a_884)) then
          pure(undef(<<UB041_function_not_compatible>>))
        else
          let strong a_889: pointer =
            let a_909: ctype = params_nth(a_885, 0) in
            if not(are_compatible ('const char*', a_909)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_910: pointer = create(Ivalignof(a_909), a_909) in
              let weak _: unit = store(a_909, a_910, a_890) in
              pure(a_910) in
          let strong a_888: pointer =
            {- §6.5.2.2#7, sentences 2 and 3 -}
            pcall(create_and_store, 'char*', a_894) in
          let strong a_911: loaded integer =
            ccall('signed int (*) (const char*restrict , ...)', a_883, a_889,
            [('char*', a_888)]) in
          let strong _: (unit,unit) =
            unseq(kill('char*', a_889), kill('char*', a_888)) in
          pure(a_911)
    ) in
  pure(Unit) ;
  kill('signed int*', p) ;
  kill('signed int**', q) ;
  kill('_Bool', b) ;
  pure(Unit) ;
  save ret_834: loaded integer (a_912: loaded integer:= Specified(0)) in
    pure(a_912)

