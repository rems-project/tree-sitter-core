-- Aggregates
def union _G_fpos64_t :=
  __opaque: 'char[16]'
  __lldata: 'signed long_long'
  __align: 'double'

def struct div :=
  quot: 'signed int'
  rem: 'signed int'

def struct ldiv :=
  quot: 'signed long'
  rem: 'signed long'

def struct lldiv :=
  quot: 'signed long_long'
  rem: 'signed long_long'

def struct __cerbty_unnamed_tag_746 :=
  __dummy_max_align_t: 'void*'

-- Globals
glob a_849: pointer [ail_ctype = 'char[6]'] :=
  create_readonly(Ivalignof('char[6]'), 'char[6]', Specified(Array(Specified(conv_int('char',
  105)), Specified(conv_int('char', 61)), Specified(conv_int('char', 37)),
  Specified(conv_int('char', 100)), Specified(conv_int('char', 10)),
  Specified(0))))

-- Fun map
proc f (p: pointer, q: pointer): eff unit :=
  let strong _: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.16#3, sentence 4 -}
      let weak (a_862: pointer, a_870: loaded integer) =
        {- §6.5.16#3, sentence 5 -}
        unseq(
          {- §6.5.3.2 -}
          let weak a_863: loaded pointer =
            {- §6.5.4 -}
            let weak a_866: loaded pointer =
              let weak a_868: pointer = pure(p) in
              load('void*', a_868) in
            let Specified(a_867: pointer) = a_866 in
            let weak a_869: boolean =
              memop(PtrWellAligned, 'signed int', a_867) in
            pure(
              Specified(if a_869 then
                a_867
              else
                undef(<<UB025_misaligned_pointer_conversion>>))
            ) in
          let Specified(a_864: pointer) = a_863 in
          let weak a_865: boolean =
            memop(PtrValidForDeref, 'signed int', a_864) in
          pure(
            if a_865 then
              a_864
            else
              undef(<<UB043_indirection_invalid_value>>)
          )
        ,
          pure(Specified(3))
        ) in
      let weak _: unit =
        {- §6.5.16.1#2, store -}
        neg(store('signed int', a_862, conv_loaded_int('signed int', a_870))) in
      pure(conv_loaded_int('signed int', a_870))
    ) in
  pure(Unit) ;
  let strong _: loaded floating =
    {- §6.5#2 -}
    bound(
      {- §6.5.16#3, sentence 4 -}
      let weak (a_861: pointer, a_878: loaded floating) =
        {- §6.5.16#3, sentence 5 -}
        unseq(
          {- §6.5.3.2 -}
          let weak a_871: loaded pointer =
            {- §6.5.4 -}
            let weak a_874: loaded pointer =
              let weak a_876: pointer = pure(p) in
              load('void*', a_876) in
            let Specified(a_875: pointer) = a_874 in
            let weak a_877: boolean = memop(PtrWellAligned, 'float', a_875) in
            pure(
              Specified(if a_877 then
                a_875
              else
                undef(<<UB025_misaligned_pointer_conversion>>))
            ) in
          let Specified(a_872: pointer) = a_871 in
          let weak a_873: boolean = memop(PtrValidForDeref, 'float', a_872) in
          pure(
            if a_873 then
              a_872
            else
              undef(<<UB043_indirection_invalid_value>>)
          )
        ,
          pure(Specified(3.14))
        ) in
      let weak _: unit =
        {- §6.5.16.1#2, store -}
        neg(store('float', a_861, a_878)) in
      pure(a_878)
    ) in
  pure(Unit) ;
  pure(Unit) ;
  save ret_860: unit (a_879: unit:= Unit) in  pure(a_879)

proc main (): eff loaded integer :=
  let strong p: pointer = create(Ivalignof('void*'), 'void*') in
  let strong i: pointer = create(Ivalignof('signed int'), 'signed int') in
  {- §6.5#2 -}
  bound(
    let strong a_790: loaded integer =
      let weak (a_793: loaded integer, a_794: loaded integer) =
        unseq(
          pure(Specified(Ivsizeof('signed int')))
        ,
          pure(Specified(Ivsizeof('float')))
        ) in
      pure(
        let (Specified(a_795: integer), Specified(a_796: integer)) =
          (a_793, a_794) in
        if conv_int('size_t', a_795) = conv_int('size_t', a_796) then
          Specified(1)
        else
          Specified(0)
      ) in
    pure(
      let Specified(a_791: integer) = a_790 in
      if a_791 = 0 then error("assert() failure", Unit) else Unit
    )
  ) ;
  pure(Unit) ;
  let strong a_798: loaded pointer =
    {- §6.5#2 -}
    bound(
      {- §6.5.2.2#10, sentence 1 -}
      let strong ((a_800: loaded pointer,
      (a_801: ctype, a_802: [ctype], a_803: boolean, a_804: boolean)),
      a_806: loaded integer) =
        {- §6.5.2.2#4, sentence 2 -}
        unseq(
          let strong a_799: loaded pointer =
            pure(Specified(Cfunction(malloc_proxy))) in
          pure((a_799, cfunction(a_799)))
        ,
          pure(Specified(Ivsizeof('signed int')))
        ) in
      if not(params_length(a_802) = 1) then
        pure(undef(<<UB038_number_of_args>>))
      else
        if a_803 \/ not(are_compatible ('void*', a_801)) then
          pure(undef(<<UB041_function_not_compatible>>))
        else
          let strong a_805: pointer =
            let a_807: ctype = params_nth(a_802, 0) in
            if not(are_compatible ('size_t', a_807)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_808: pointer = create(Ivalignof(a_807), a_807) in
              let weak _: unit =
                store(a_807, a_808, conv_loaded_int(a_807, a_806)) in
              pure(a_808) in
          let strong a_809: loaded pointer =
            ccall('void* (*) (size_t)', a_800, a_805) in
          kill('size_t', a_805) ;
          pure(a_809)
    ) in
  store('void*', p, a_798) ;
  {- §6.5#2 -}
  bound(
    let strong a_789: loaded integer =
      let weak a_813: loaded pointer =
        let weak a_812: pointer = pure(p) in
        load('void*', a_812) in
      let Specified(a_814: pointer) = a_813 in
      let weak a_815: boolean = memop(PtrNe, a_814, NULL(void*)) in
      {- §6.5.9#3 -}
      pure(if a_815 then Specified(1) else Specified(0)) in
    pure(
      let Specified(a_810: integer) = a_789 in
      if a_810 = 0 then error("assert() failure", Unit) else Unit
    )
  ) ;
  pure(Unit) ;
  {- §6.5#2 -}
  bound(
    {- §6.5.2.2#10, sentence 1 -}
    let strong ((a_816: loaded pointer,
    (a_817: ctype, a_818: [ctype], a_819: boolean, a_820: boolean)),
    a_823: loaded pointer, a_825: loaded pointer) =
      {- §6.5.2.2#4, sentence 2 -}
      unseq(
        let strong a_788: loaded pointer = pure(Specified(Cfunction(f))) in
        pure((a_788, cfunction(a_788)))
      ,
        let weak a_824: pointer = pure(p) in
        load('void*', a_824)
      ,
        let weak a_826: pointer = pure(p) in
        load('void*', a_826)
      ) in
    if not(params_length(a_818) = 2) then
      pure(undef(<<UB038_number_of_args>>))
    else
      if a_819 \/ not(are_compatible ('void', a_817)) then
        pure(undef(<<UB041_function_not_compatible>>))
      else
        let strong a_822: pointer =
          let a_827: ctype = params_nth(a_818, 0) in
          if not(are_compatible ('void*', a_827)) then
            pure(undef(<<UB041_function_not_compatible>>))
          else
            {- §6.5.2.2#7, sentence 1 -}
            let weak a_828: pointer = create(Ivalignof(a_827), a_827) in
            let weak _: unit = store(a_827, a_828, a_823) in
            pure(a_828) in
        let strong a_821: pointer =
          let a_829: ctype = params_nth(a_818, 1) in
          if not(are_compatible ('void*', a_829)) then
            pure(undef(<<UB041_function_not_compatible>>))
          else
            {- §6.5.2.2#7, sentence 1 -}
            let weak a_830: pointer = create(Ivalignof(a_829), a_829) in
            let weak _: unit = store(a_829, a_830, a_825) in
            pure(a_830) in
        let strong a_831: unit =
          ccall('void (*) (void*, void*)', a_816, a_822, a_821) in
        let strong _: (unit,unit) =
          unseq(kill('void*', a_822), kill('void*', a_821)) in
        pure(a_831)
  ) ;
  pure(Unit) ;
  let strong a_832: loaded integer =
    {- §6.5#2 -}
    bound(
      let weak a_840: pointer =
        {- §6.5.3.2 -}
        let weak a_833: loaded pointer =
          {- §6.5.4 -}
          let weak a_836: loaded pointer =
            let weak a_838: pointer = pure(p) in
            load('void*', a_838) in
          let Specified(a_837: pointer) = a_836 in
          let weak a_839: boolean =
            memop(PtrWellAligned, 'signed int', a_837) in
          pure(
            Specified(if a_839 then
              a_837
            else
              undef(<<UB025_misaligned_pointer_conversion>>))
          ) in
        let Specified(a_834: pointer) = a_833 in
        let weak a_835: boolean =
          memop(PtrValidForDeref, 'signed int', a_834) in
        pure(
          if a_835 then a_834 else undef(<<UB043_indirection_invalid_value>>)
        ) in
      load('signed int', a_840)
    ) in
  store('signed int', i, conv_loaded_int('signed int', a_832)) ;
  let strong _: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.2.2#10, sentence 1 -}
      let strong ((a_841: loaded pointer,
      (a_842: ctype, a_843: [ctype], a_844: boolean, a_845: boolean)),
      a_848: loaded pointer, a_852: loaded integer) =
        {- §6.5.2.2#4, sentence 2 -}
        unseq(
          let strong a_787: loaded pointer =
            pure(Specified(Cfunction(printf_proxy))) in
          pure((a_787, cfunction(a_787)))
        ,
          let weak a_850: pointer = pure(a_849) in
          {- §6.3.2.1#3 -}
          let weak a_851: pointer = memop(PtrArrayShift, a_850, 'char', 0) in
          pure(Specified(a_851))
        ,
          let weak a_853: pointer = pure(i) in
          load('signed int', a_853)
        ) in
      if not(params_length(a_843) <= 2) then
        pure(undef(<<UB038_number_of_args>>))
      else
        if not(a_844) \/ not(are_compatible ('signed int', a_842)) then
          pure(undef(<<UB041_function_not_compatible>>))
        else
          let strong a_847: pointer =
            let a_854: ctype = params_nth(a_843, 0) in
            if not(are_compatible ('const char*', a_854)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_855: pointer = create(Ivalignof(a_854), a_854) in
              let weak _: unit = store(a_854, a_855, a_848) in
              pure(a_855) in
          let strong a_846: pointer =
            {- §6.5.2.2#7, sentences 2 and 3 -}
            pcall(create_and_store, 'signed int',
            conv_loaded_int('signed int', a_852)) in
          let strong a_856: loaded integer =
            ccall('signed int (*) (const char*restrict , ...)', a_841, a_847,
            [('signed int', a_846)]) in
          let strong _: (unit,unit) =
            unseq(kill('char*', a_847), kill('signed int', a_846)) in
          pure(a_856)
    ) in
  pure(Unit) ;
  kill('void*', p) ;
  kill('signed int', i) ;
  pure(Unit) ;
  save ret_786: loaded integer (a_857: loaded integer:= Specified(0)) in
    pure(a_857)

