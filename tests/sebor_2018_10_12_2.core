-- Aggregates
def struct div :=
  quot: 'signed int'
  rem: 'signed int'

def struct ldiv :=
  quot: 'signed long'
  rem: 'signed long'

def struct lldiv :=
  quot: 'signed long_long'
  rem: 'signed long_long'

-- Globals
glob a: pointer [ail_ctype = 'signed int[3]'] :=
  let strong a_692: pointer =
    create(Ivalignof('signed int[3]'), 'signed int[3]') in
  let strong a_693: loaded array(integer) =
    {- §6.5#2 -}
    bound(pure(Specified(Array(Specified(0), Specified(0), Specified(0))))) in
  store('signed int[3]', a_692, a_693) ;
  pure(a_692)

-- Fun map
proc f (): eff unit :=
  let strong p: pointer = create(Ivalignof('signed int*'), 'signed int*') in
  let strong i: pointer = create(Ivalignof('intptr_t'), 'intptr_t') in
  let strong a_648: loaded pointer =
    {- §6.5#2 -}
    bound(
      let weak a_649: pointer = pure(a) in
      {- §6.3.2.1#3 -}
      let weak a_650: pointer =
        memop(PtrArrayShift, a_649, 'signed int', 0) in
      pure(Specified(a_650))
    ) in
  store('signed int*', p, a_648) ;
  let strong a_651: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.4 -}
      let weak a_652: loaded pointer =
        let weak a_654: pointer = pure(p) in
        load('signed int*', a_654) in
      let Specified(a_653: pointer) = a_652 in
      let weak a_655: integer =
        memop(IntFromPtr, 'signed int', 'intptr_t', a_653) in
      pure(Specified(a_655))
    ) in
  store('intptr_t', i, conv_loaded_int('intptr_t', a_651)) ;
  let strong _: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.16#3, sentence 4 -}
      let weak (a_647: pointer, a_662: loaded integer) =
        {- §6.5.16#3, sentence 5 -}
        unseq(
          pure(i)
        ,
          {- §6.5.6 -}
          let weak (a_656: loaded integer, a_657: loaded integer) =
            unseq(
              let weak a_661: pointer = pure(i) in
              load('intptr_t', a_661)
            ,
              pure(Specified(Ivsizeof('signed int')))
            ) in
          pure(
            let (Specified(a_658: integer), Specified(a_659: integer)) =
              (a_656, a_657) in
            Specified(wrapI('size_t',
            if all_values_representable_in('size_t', 'intptr_t') then
              conv_int('intptr_t', a_658)
            else
              conv_int('uintptr_t', a_658) +
            if all_values_representable_in('size_t', 'intptr_t') then
              conv_int('intptr_t', a_659)
            else
              conv_int('uintptr_t', a_659)))
          )
        ) in
      let weak _: unit =
        {- §6.5.16.1#2, store -}
        neg(store('intptr_t', a_647, conv_loaded_int('intptr_t', a_662))) in
      pure(conv_loaded_int('intptr_t', a_662))
    ) in
  pure(Unit) ;
  let strong _: loaded pointer =
    {- §6.5#2 -}
    bound(
      {- §6.5.16#3, sentence 4 -}
      let weak (a_646: pointer, a_667: loaded pointer) =
        {- §6.5.16#3, sentence 5 -}
        unseq(
          pure(p)
        ,
          {- §6.5.4 -}
          let weak a_663: loaded integer =
            let weak a_665: pointer = pure(i) in
            load('intptr_t', a_665) in
          let Specified(a_664: integer) = a_663 in
          let weak a_666: pointer =
            memop(PtrFromInt, 'intptr_t', 'signed int', a_664) in
          pure(Specified(a_666))
        ) in
      let weak _: unit =
        {- §6.5.16.1#2, store -}
        neg(store('signed int*', a_646, a_667)) in
      pure(a_667)
    ) in
  pure(Unit) ;
  let strong a_668: loaded integer =
    {- §6.5#2 -}
    bound(
      let weak (a_670: loaded integer, a_671: loaded integer) =
        unseq(
          let weak (a_675: loaded pointer, a_676: loaded pointer) =
            unseq(
              let weak a_680: pointer = pure(p) in
              load('signed int*', a_680)
            ,
              {- §6.5.6 -}
              {- §6.5.3.2#3, sentence 3 -}
              let weak (a_681: loaded pointer, a_683: loaded integer) =
                unseq(
                  let weak a_686: pointer = pure(a) in
                  {- §6.3.2.1#3 -}
                  let weak a_687: pointer =
                    memop(PtrArrayShift, a_686, 'signed int', 0) in
                  pure(Specified(a_687))
                ,
                  pure(Specified(1))
                ) in
              let (Specified(a_682: pointer), Specified(a_684: integer)) =
                (a_681, a_683) in
              let weak a_685: pointer =
                memop(PtrArrayShift, a_682, 'signed int', a_684) in
              pure(Specified(a_685))
            ) in
          let (Specified(a_677: pointer), Specified(a_678: pointer)) =
            (a_675, a_676) in
          let weak a_679: boolean = memop(PtrNe, a_677, a_678) in
          pure(if a_679 then Specified(1) else Specified(0))
        ,
          pure(Specified(0))
        ) in
      pure(
        let (Specified(a_672: integer), Specified(a_673: integer)) =
          (a_670, a_671) in
        if conv_int('signed int', a_672) = conv_int('signed int', a_673) then
          Specified(1)
        else
          Specified(0)
      )
    ) in
  let strong a_645: boolean =
    let Specified(a_669: integer) = a_668 in
    pure(if not(a_669 = 1) then True else False) in
  if a_645 then
    {- §6.5#2 -}
    bound(
      let strong a_688: loaded pointer = pure(Specified(Cfunction(abort))) in
      let (a_689: ctype, a_690: [ctype], _: boolean, _: boolean) =
        cfunction(a_688) in
      if params_length(a_690) = 0 then
        if are_compatible ('void', a_689) then
          ccall('void (*) (void)', a_688)
        else
          pure(undef(<<UB041_function_not_compatible>>))
      else
        pure(undef(<<UB038_number_of_args>>))
    ) ;
    pure(Unit)
  else
    pure(Unit) ;
  kill('signed int*', p) ;
  kill('intptr_t', i) ;
  pure(Unit) ;
  save ret_644: unit (a_691: unit:= Unit) in  pure(a_691)

proc main (): eff loaded integer :=
  {- §6.5#2 -}
  bound(
    let strong a_640: loaded pointer = pure(Specified(Cfunction(f))) in
    let (a_641: ctype, a_642: [ctype], _: boolean, _: boolean) =
      cfunction(a_640) in
    if params_length(a_642) = 0 then
      if are_compatible ('void', a_641) then
        ccall('void (*) (void)', a_640)
      else
        pure(undef(<<UB041_function_not_compatible>>))
    else
      pure(undef(<<UB038_number_of_args>>))
  ) ;
  pure(Unit) ;
  pure(Unit) ;
  save ret_639: loaded integer (a_643: loaded integer:= Specified(0)) in
    pure(a_643)

