-- Aggregates
def union _G_fpos64_t :=
  __opaque: 'char[16]'
  __lldata: 'signed long_long'
  __align: 'double'

def struct div :=
  quot: 'signed int'
  rem: 'signed int'

def struct ldiv :=
  quot: 'signed long'
  rem: 'signed long'

def struct lldiv :=
  quot: 'signed long_long'
  rem: 'signed long_long'

def struct __cerbty_unnamed_tag_746 :=
  __dummy_max_align_t: 'void*'

def struct __cerbty_unnamed_tag_750 :=
  c1: 'char'
  f1: 'float'

def struct __cerbty_unnamed_tag_752 :=
  c2: 'char'
  f2: 'float'

-- Globals
glob a_830: pointer [ail_ctype = 'char[23]'] :=
  create_readonly(Ivalignof('char[23]'), 'char[23]', Specified(Array(Specified(conv_int('char',
  40)), Specified(conv_int('char', 40)), Specified(conv_int('char', 115)),
  Specified(conv_int('char', 116)), Specified(conv_int('char', 50)),
  Specified(conv_int('char', 32)), Specified(conv_int('char', 42)),
  Specified(conv_int('char', 41)), Specified(conv_int('char', 112)),
  Specified(conv_int('char', 41)), Specified(conv_int('char', 45)),
  Specified(conv_int('char', 62)), Specified(conv_int('char', 99)),
  Specified(conv_int('char', 50)), Specified(conv_int('char', 32)),
  Specified(conv_int('char', 61)), Specified(conv_int('char', 32)),
  Specified(conv_int('char', 39)), Specified(conv_int('char', 37)),
  Specified(conv_int('char', 99)), Specified(conv_int('char', 39)),
  Specified(conv_int('char', 10)), Specified(0))))

-- Fun map
proc main (): eff loaded integer :=
  let strong p: pointer = create(Ivalignof('void*'), 'void*') in
  {- §6.5#2 -}
  bound(
    let strong a_764: loaded integer =
      let weak (a_767: loaded integer, a_768: loaded integer) =
        unseq(
          pure(Specified(Ivsizeof('struct __cerbty_unnamed_tag_750')))
        ,
          pure(Specified(Ivsizeof('struct __cerbty_unnamed_tag_752')))
        ) in
      pure(
        let (Specified(a_769: integer), Specified(a_770: integer)) =
          (a_767, a_768) in
        if conv_int('size_t', a_769) = conv_int('size_t', a_770) then
          Specified(1)
        else
          Specified(0)
      ) in
    pure(
      let Specified(a_765: integer) = a_764 in
      if a_765 = 0 then error("assert() failure", Unit) else Unit
    )
  ) ;
  pure(Unit) ;
  {- §6.5#2 -}
  bound(
    let strong a_763: loaded integer =
      let weak (a_774: loaded integer, a_775: loaded integer) =
        unseq(pure(Specified(0)), pure(Specified(0))) in
      pure(
        let (Specified(a_776: integer), Specified(a_777: integer)) =
          (a_774, a_775) in
        if conv_int('size_t', a_776) = conv_int('size_t', a_777) then
          Specified(1)
        else
          Specified(0)
      ) in
    pure(
      let Specified(a_772: integer) = a_763 in
      if a_772 = 0 then error("assert() failure", Unit) else Unit
    )
  ) ;
  pure(Unit) ;
  {- §6.5#2 -}
  bound(
    let strong a_762: loaded integer =
      let weak (a_781: loaded integer, a_782: loaded integer) =
        unseq(pure(Specified(8)), pure(Specified(8))) in
      pure(
        let (Specified(a_783: integer), Specified(a_784: integer)) =
          (a_781, a_782) in
        if conv_int('size_t', a_783) = conv_int('size_t', a_784) then
          Specified(1)
        else
          Specified(0)
      ) in
    pure(
      let Specified(a_779: integer) = a_762 in
      if a_779 = 0 then error("assert() failure", Unit) else Unit
    )
  ) ;
  pure(Unit) ;
  let strong a_786: loaded pointer =
    {- §6.5#2 -}
    bound(
      {- §6.5.2.2#10, sentence 1 -}
      let strong ((a_788: loaded pointer,
      (a_789: ctype, a_790: [ctype], a_791: boolean, a_792: boolean)),
      a_794: loaded integer) =
        {- §6.5.2.2#4, sentence 2 -}
        unseq(
          let strong a_787: loaded pointer =
            pure(Specified(Cfunction(malloc_proxy))) in
          pure((a_787, cfunction(a_787)))
        ,
          pure(Specified(Ivsizeof('struct __cerbty_unnamed_tag_750')))
        ) in
      if not(params_length(a_790) = 1) then
        pure(undef(<<UB038_number_of_args>>))
      else
        if a_791 \/ not(are_compatible ('void*', a_789)) then
          pure(undef(<<UB041_function_not_compatible>>))
        else
          let strong a_793: pointer =
            let a_795: ctype = params_nth(a_790, 0) in
            if not(are_compatible ('size_t', a_795)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_796: pointer = create(Ivalignof(a_795), a_795) in
              let weak _: unit =
                store(a_795, a_796, conv_loaded_int(a_795, a_794)) in
              pure(a_796) in
          let strong a_797: loaded pointer =
            ccall('void* (*) (size_t)', a_788, a_793) in
          kill('size_t', a_793) ;
          pure(a_797)
    ) in
  store('void*', p, a_786) ;
  {- §6.5#2 -}
  bound(
    let strong a_761: loaded integer =
      let weak a_801: loaded pointer =
        let weak a_800: pointer = pure(p) in
        load('void*', a_800) in
      let Specified(a_802: pointer) = a_801 in
      let weak a_803: boolean = memop(PtrNe, a_802, NULL(void*)) in
      {- §6.5.9#3 -}
      pure(if a_803 then Specified(1) else Specified(0)) in
    pure(
      let Specified(a_798: integer) = a_761 in
      if a_798 = 0 then error("assert() failure", Unit) else Unit
    )
  ) ;
  pure(Unit) ;
  let strong _: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.16#3, sentence 4 -}
      let weak (a_760: pointer, a_812: loaded integer) =
        {- §6.5.16#3, sentence 5 -}
        unseq(
          {- §6.5.2.3#4, sentence 2 -}
          let strong a_804: loaded pointer =
            {- §6.5.4 -}
            let weak a_808: loaded pointer =
              let weak a_810: pointer = pure(p) in
              load('void*', a_810) in
            let Specified(a_809: pointer) = a_808 in
            let weak a_811: boolean =
              memop(PtrWellAligned, 'struct __cerbty_unnamed_tag_750', a_809) in
            pure(
              Specified(if a_811 then
                a_809
              else
                undef(<<UB025_misaligned_pointer_conversion>>))
            ) in
          let Specified(a_805: pointer) = a_804 in
          let weak a_806: boolean =
            memop(PtrValidForDeref, 'struct __cerbty_unnamed_tag_750', a_805) in
          pure(
            if a_806 then
              member_shift(a_805, __cerbty_unnamed_tag_750, .c1)
            else
              undef(<<UB043_indirection_invalid_value>>)
          )
        ,
          pure(Specified(65))
        ) in
      let weak _: unit =
        {- §6.5.16.1#2, store -}
        neg(store('char', a_760, conv_loaded_int('char', a_812))) in
      pure(conv_loaded_int('char', a_812))
    ) in
  pure(Unit) ;
  let strong _: loaded floating =
    {- §6.5#2 -}
    bound(
      {- §6.5.16#3, sentence 4 -}
      let weak (a_759: pointer, a_821: loaded floating) =
        {- §6.5.16#3, sentence 5 -}
        unseq(
          {- §6.5.2.3#4, sentence 2 -}
          let strong a_813: loaded pointer =
            {- §6.5.4 -}
            let weak a_817: loaded pointer =
              let weak a_819: pointer = pure(p) in
              load('void*', a_819) in
            let Specified(a_818: pointer) = a_817 in
            let weak a_820: boolean =
              memop(PtrWellAligned, 'struct __cerbty_unnamed_tag_752', a_818) in
            pure(
              Specified(if a_820 then
                a_818
              else
                undef(<<UB025_misaligned_pointer_conversion>>))
            ) in
          let Specified(a_814: pointer) = a_813 in
          let weak a_815: boolean =
            memop(PtrValidForDeref, 'struct __cerbty_unnamed_tag_752', a_814) in
          pure(
            if a_815 then
              member_shift(a_814, __cerbty_unnamed_tag_752, .f2)
            else
              undef(<<UB043_indirection_invalid_value>>)
          )
        ,
          pure(Specified(1.))
        ) in
      let weak _: unit =
        {- §6.5.16.1#2, store -}
        neg(store('float', a_759, a_821)) in
      pure(a_821)
    ) in
  pure(Unit) ;
  let strong _: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.2.2#10, sentence 1 -}
      let strong ((a_822: loaded pointer,
      (a_823: ctype, a_824: [ctype], a_825: boolean, a_826: boolean)),
      a_829: loaded pointer, a_833: loaded integer) =
        {- §6.5.2.2#4, sentence 2 -}
        unseq(
          let strong a_758: loaded pointer =
            pure(Specified(Cfunction(printf_proxy))) in
          pure((a_758, cfunction(a_758)))
        ,
          let weak a_831: pointer = pure(a_830) in
          {- §6.3.2.1#3 -}
          let weak a_832: pointer = memop(PtrArrayShift, a_831, 'char', 0) in
          pure(Specified(a_832))
        ,
          let weak a_842: pointer =
            {- §6.5.2.3#4, sentence 2 -}
            let strong a_834: loaded pointer =
              {- §6.5.4 -}
              let weak a_838: loaded pointer =
                let weak a_840: pointer = pure(p) in
                load('void*', a_840) in
              let Specified(a_839: pointer) = a_838 in
              let weak a_841: boolean =
                memop(PtrWellAligned, 'struct __cerbty_unnamed_tag_752', a_839) in
              pure(
                Specified(if a_841 then
                  a_839
                else
                  undef(<<UB025_misaligned_pointer_conversion>>))
              ) in
            let Specified(a_835: pointer) = a_834 in
            let weak a_836: boolean =
              memop(PtrValidForDeref, 'struct __cerbty_unnamed_tag_752', a_835) in
            pure(
              if a_836 then
                member_shift(a_835, __cerbty_unnamed_tag_752, .c2)
              else
                undef(<<UB043_indirection_invalid_value>>)
            ) in
          load('char', a_842)
        ) in
      if not(params_length(a_824) <= 2) then
        pure(undef(<<UB038_number_of_args>>))
      else
        if not(a_825) \/ not(are_compatible ('signed int', a_823)) then
          pure(undef(<<UB041_function_not_compatible>>))
        else
          let strong a_828: pointer =
            let a_843: ctype = params_nth(a_824, 0) in
            if not(are_compatible ('const char*', a_843)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_844: pointer = create(Ivalignof(a_843), a_843) in
              let weak _: unit = store(a_843, a_844, a_829) in
              pure(a_844) in
          let strong a_827: pointer =
            {- §6.5.2.2#7, sentences 2 and 3 -}
            pcall(create_and_store, 'signed int',
            conv_loaded_int('signed int', a_833)) in
          let strong a_845: loaded integer =
            ccall('signed int (*) (const char*restrict , ...)', a_822, a_828,
            [('signed int', a_827)]) in
          let strong _: (unit,unit) =
            unseq(kill('char*', a_828), kill('signed int', a_827)) in
          pure(a_845)
    ) in
  pure(Unit) ;
  kill('void*', p) ;
  pure(Unit) ;
  save ret_757: loaded integer (a_846: loaded integer:= Specified(0)) in
    pure(a_846)

