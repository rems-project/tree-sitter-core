-- Aggregates
def union _G_fpos64_t :=
  __opaque: 'char[16]'
  __lldata: 'signed long_long'
  __align: 'double'

-- Globals
glob a_668: pointer [ail_ctype = 'char[6]'] :=
  create_readonly(Ivalignof('char[6]'), 'char[6]', Specified(Array(Specified(conv_int('char',
  120)), Specified(conv_int('char', 61)), Specified(conv_int('char', 37)),
  Specified(conv_int('char', 105)), Specified(conv_int('char', 10)),
  Specified(0))))

-- Fun map
proc main (): eff loaded integer :=
  let strong x: pointer = create(Ivalignof('signed int'), 'signed int') in
  {- §6.2.4#6 -}
  store('signed int', x, Unspecified('signed int')) ;
  let strong _: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.16#3, sentence 4 -}
      let weak (a_651: pointer, a_659: loaded integer) =
        {- §6.5.16#3, sentence 5 -}
        unseq(
          pure(x)
        ,
          let weak a_658: pointer =
            {- §6.5.3.2 -}
            let weak a_652: loaded pointer =
              {- §6.5.4 -}
              let weak a_655: loaded integer = pure(Specified(6636321)) in
              let Specified(a_656: integer) = a_655 in
              let weak a_657: pointer =
                memop(PtrFromInt, 'signed int', 'signed int', a_656) in
              pure(Specified(a_657)) in
            let Specified(a_653: pointer) = a_652 in
            let weak a_654: boolean =
              memop(PtrValidForDeref, 'signed int', a_653) in
            pure(
              if a_654 then
                a_653
              else
                undef(<<UB043_indirection_invalid_value>>)
            ) in
          load('signed int', a_658)
        ) in
      let weak _: unit =
        {- §6.5.16.1#2, store -}
        neg(store('signed int', a_651, conv_loaded_int('signed int', a_659))) in
      pure(conv_loaded_int('signed int', a_659))
    ) in
  pure(Unit) ;
  let strong _: loaded integer =
    {- §6.5#2 -}
    bound(
      {- §6.5.2.2#10, sentence 1 -}
      let strong ((a_660: loaded pointer,
      (a_661: ctype, a_662: [ctype], a_663: boolean, a_664: boolean)),
      a_667: loaded pointer, a_671: loaded integer) =
        {- §6.5.2.2#4, sentence 2 -}
        unseq(
          let strong a_650: loaded pointer =
            pure(Specified(Cfunction(printf_proxy))) in
          pure((a_650, cfunction(a_650)))
        ,
          let weak a_669: pointer = pure(a_668) in
          {- §6.3.2.1#3 -}
          let weak a_670: pointer = memop(PtrArrayShift, a_669, 'char', 0) in
          pure(Specified(a_670))
        ,
          let weak a_672: pointer = pure(x) in
          load('signed int', a_672)
        ) in
      if not(params_length(a_662) <= 2) then
        pure(undef(<<UB038_number_of_args>>))
      else
        if not(a_663) \/ not(are_compatible ('signed int', a_661)) then
          pure(undef(<<UB041_function_not_compatible>>))
        else
          let strong a_666: pointer =
            let a_673: ctype = params_nth(a_662, 0) in
            if not(are_compatible ('const char*', a_673)) then
              pure(undef(<<UB041_function_not_compatible>>))
            else
              {- §6.5.2.2#7, sentence 1 -}
              let weak a_674: pointer = create(Ivalignof(a_673), a_673) in
              let weak _: unit = store(a_673, a_674, a_667) in
              pure(a_674) in
          let strong a_665: pointer =
            {- §6.5.2.2#7, sentences 2 and 3 -}
            pcall(create_and_store, 'signed int',
            conv_loaded_int('signed int', a_671)) in
          let strong a_675: loaded integer =
            ccall('signed int (*) (const char*restrict , ...)', a_660, a_666,
            [('signed int', a_665)]) in
          let strong _: (unit,unit) =
            unseq(kill('char*', a_666), kill('signed int', a_665)) in
          pure(a_675)
    ) in
  pure(Unit) ;
  kill('signed int', x) ;
  pure(Unit) ;
  save ret_649: loaded integer (a_676: loaded integer:= Specified(0)) in
    pure(a_676)

